run file
read conent in rust: import { "lexer.lum", "parser.lum", "ast_printer.lum", "compiler.lum", "import_resolver.lum" }

def file = #args(0)

#print("compiling file: ", file)

def input = #read_file(file)
#print("input:", input)

def lexer = Lexer(input, 0)
lexer = Peekable(lexer, nil)

def parser = Parser(lexer, file)
def root = parser.parse_root()

def import_resolver = ImportResolver()
root.accept(import_resolver)

def printer = AstPrinter([], true)

root.accept(printer)

def compiler = Compiler(nil, nil, nil, nil, nil, nil, nil)
compiler.init()
root.accept(compiler)

def i = 0
while i < #len(compiler.code) {
    #print(compiler.code[i])
    i = i + 1
}
#print("Bytecode:", compiler.code)
#print("strings:", compiler.strings)

next token: Some(Import)
read conent in rust: class Kind {
    LeftParen { return 0 }
    RightParen { return 1 }
    LeftBracket { return 2 }
    RightBracket { return 3 }
    LeftBrace { return 4 }
    RightBrace { return 5 }
    Less { return 6 }
    Greater { return 7 }
    Equal { return 8 }
    Plus { return 9 }
    Minus { return 10 }
    Slash { return 11 }
    Star { return 12 }
    Dot { return 13 }
    Comma { return 14 }
    Colon { return 15 }
    SemiColon { return 16 }
    Bang { return 17 }
    At { return 18 }
    Hash { return 19 }
    Class { return 20 }
    And { return 21 }
    Or { return 22 }
    Else { return 23 }
    If { return 24 }
    For { return 25 }
    Nil { return 26 }
    Return { return 27 }
    While { return 28 }
    Import { return 29 }
    True { return 30 }
    False { return 31 }
    Def { return 32 }
    Int { return 33 }
    Float { return 34 }
    Bool { return 35 }
    Str { return 36 }
    Identifier { return 37 }
    String { return 38 }
    Float { return 40 }
    BangEqual { return 41 }
    EqualEqual { return 42 }
    GreaterEqual { return 43 }
    LessEqual { return 44 }

    from_str(in) {
        def kinds = [
            "(", ")", "[", "]", "{", "}", "<", ">", "=", "+",
            "-", "/", "*", ".", ",", ":", ";", "!", "@", "#",
            "class", "and", "or", "else", "if", "for", "nil",
            "return", "while", "import", "true", "false",
            "def", "int", "float", "bool", "str"
        ]
        def i = 0
        while i < #len(kinds) {
            if in == kinds[i] {
                return i
            }
            i = i + 1
        }
        return nil
    }
}

class Token(value, start, end, kind) {}

class Lexer(code, p) {

    whitespace {
        while @p < #len(@code) and @code[@p] == " " {
            @p = @p + 1
        }
    }

    is_done {
        return @p >= #len(@code)
    }

    letter() {
        if @is_done() {
            return false
        }
        def letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"
        def i = 0
        while i < #len(letters) {
            if letters[i] == @code[@p] {
                return true
            }
            i = i + 1
        }
        return false
    }

    digit() {
        if @is_done() {
            return false
        }
        def digits = "0123456789"
        def i = 0
        while i < #len(digits) {
            if digits[i] == @code[@p] {
                return true
            }
            i = i + 1
        }
        return false
    }

    advance {
        if @p < #len(@code) {
            @p = @p + 1
        }
    }

    identifier() {
        def start = @p
        def val = ""
        while @letter() or @digit() {
            val = val + @code[@p]
            @p = @p + 1
        }
        def end = @p
        def keyword = Kind.from_str(val)
        if keyword != nil {
            return Token(val, start, end, keyword)
        }
        return Token(val, start, end, Kind.Identifier())
    }

    number() {
        def start = @p
        def val = ""
        def is_float = false
        while @digit() or @code[@p] == "." {
            if @code[@p] == "." {
                is_float = true
            }
            val = val + @code[@p]
            @p = @p + 1
        }
        
        def end = @p
        if is_float {
            return Token(val, start, end, Kind.Float())
        }
        return Token(val, start, end, Kind.Int())
    }


string() {
    def start = @p
    def val = "\""
    @p = @p + 1

    while @p < #len(@code) and @code[@p] != "\"" {
        def test = @code[@p] == "\\"
        if test {
            val = val + @code[@p]
            @p = @p + 1
            if @p < #len(@code) {
                val = val + @code[@p]
                @p = @p + 1
            }
        } 
        if !test {
            val = val + @code[@p]
            @p = @p + 1
        }
    }

    if @p < #len(@code) {
        val = val + "\""
        @p = @p + 1
    }

    def end = @p
    return Token(val, start, end, Kind.String())
}



    single_char()  {
        def a = Kind.from_str(@code[@p])
        if a != nil {
            return Token(@code[@p], @p, @p+1, a)
        }
        return nil
    }

    two_char() {
        if (@p + 1) == #len(@code) {
            return nil
        }
        def c1 = @code[@p]
        def c2 = @code[@p+1]
        if c1 == "!" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.BangEqual())
        }
        if c1 == "=" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.EqualEqual())
        }
        if c1 == ">" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.GreaterEqual())
        }
        if c1 == "<" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.LessEqual())
        }
        return nil
    }

    next() {
        if @is_done() {
            return nil
        }
        @whitespace()

        while !@is_done() {
            def two_char = @two_char()
            if two_char != nil {
                @p = @p + 2
                return two_char
            }
            if @letter() {
                return @identifier()
            }
            if @digit() {
                return @number()
            }
            def single_char = @single_char()
            if single_char != nil {
                @p = @p + 1
                return single_char
            }
            if @code[@p] == "\"" {
                return @string()
            }
            @advance()
        }
        return nil
    }
}


class Peekable(item, peek_item) {
    next {
        if @peek_item != nil {
            def temp = @peek_item
            @peek_item = nil
            return temp
        }
        return @item.next()
    }

    peek {
        if @peek_item == nil {
            @peek_item = @item.next()
        }
        return @peek_item
    }
}












next token: Some(Class)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(Return)
next token: Some(Identifier("i"))
next token: Some(Return)
next token: Some(Class)
next token: Some(Class)
next token: Some(While)
next token: Some(At)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(Return)
next token: Some(Identifier("i"))
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(Return)
next token: Some(Identifier("i"))
next token: Some(Return)
next token: Some(If)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(Identifier("val"))
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(If)
next token: Some(Return)
next token: Some(Return)
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(Identifier("is_float"))
next token: Some(Identifier("val"))
next token: Some(At)
next token: Some(Def)
next token: Some(If)
next token: Some(Return)
next token: Some(Return)
next token: Some(Def)
next token: Some(Def)
next token: Some(At)
next token: Some(While)
next token: Some(Def)
next token: Some(If)
next token: Some(Identifier("val"))
next token: Some(At)
next token: Some(If)
next token: Some(Identifier("val"))
next token: Some(At)
next token: Some(If)
next token: Some(Identifier("val"))
next token: Some(At)
next token: Some(If)
next token: Some(Identifier("val"))
next token: Some(At)
next token: Some(Def)
next token: Some(Return)
next token: Some(Def)
next token: Some(If)
next token: Some(Return)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Def)
next token: Some(Def)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(At)
next token: Some(While)
next token: Some(Def)
next token: Some(If)
next token: Some(At)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Def)
next token: Some(If)
next token: Some(At)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(At)
next token: Some(Return)
next token: Some(Class)
next token: Some(If)
next token: Some(Def)
next token: Some(At)
next token: Some(Return)
next token: Some(Return)
next token: Some(If)
next token: Some(At)
next token: Some(Return)
read conent in rust: class AstRoot(nodes) { accept(visitor) { return visitor.visitAstRoot(@) }}
class AstNeg(expr) { accept(visitor) { return visitor.visitAstNeg(@) } }
class AstNot(expr) { accept(visitor) { return visitor.visitAstNot(@) } }
class AstFloat(value) { accept(visitor) { return visitor.visitAstFloat(@) } }
class AstInt(value) { accept(visitor) { return visitor.visitAstInt(@) } }
class AstString(value) { accept(visitor) { return visitor.visitAstString(@) } }
class AstGetField(value) {
    accept(visitor) { return visitor.visitAstGetField(@) }
    kind { return "GetField" }
}
class AstSetField(name, expr) { accept(visitor) { return visitor.visitAstSetField(@) } }
class AstList(items) { accept(visitor) { return visitor.visitAstList(@) } }
class AstIndex(lhs, indexer) {
    accept(visitor) { return visitor.visitAstIndex(@) }
    kind { return "Index" }
}
class AstIndexSet(lhs, indexer, rhs) {
    accept(visitor) { return visitor.visitAstIndexSet(@) }
    kind { return "IndexSet" }
}
class AstBool(value) { accept(visitor) { return visitor.visitAstBool(@) } }
class AstNil() { accept(visitor) { return visitor.visitAstNil(@) } }
class AstGetVar(value) {
    accept(visitor) { return visitor.visitAstGetVar(@) }
    kind { return "GetVar" }
}
class AstDef(name, expr) { accept(visitor) { return visitor.visitAstDef(@) } }
class AstPlus(lhs, rhs) { accept(visitor) { return visitor.visitAstPlus(@) } }
class AstMinus(lhs, rhs) { accept(visitor) { return visitor.visitAstMinus(@) } }
class AstClass(name, fields, methods) { accept(visitor) { return visitor.visitAstClass(@) } }
class AstBlock(stmts) { accept(visitor) { return visitor.visitAstBlock(@) } }
class AstReassign(name, expr) {
    accept(visitor) { return visitor.visitAstReassign(@) }
    kind { return "Reassign" }
}
class AstInstance(name, args) { accept(visitor) { return visitor.visitAstInstance(@) } }
class AstNative(name, args) { accept(visitor) { return visitor.visitAstNative(@) } }
class AstMethod(name, args, lhs) {
    accept(visitor) { return visitor.visitAstMethod(@) }
    kind { return "Method"}
}
class AstPop(expr) { accept(visitor) { return visitor.visitAstPop(@) } }
class AstEqualEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstEqualEqual(@) } }
class AstIf(condition, block) { accept(visitor) { return visitor.visitAstIf(@) } }
class AstReturn(expr) { accept(visitor) { return visitor.visitAstReturn(@) } }
class AstWhile(condition, block) { accept(visitor) { return visitor.visitAstWhile(@) } }
class AstOr(lhs, rhs) { accept(visitor) { return visitor.visitAstOr(@) } }
class AstAnd(lhs, rhs) { accept(visitor) { return visitor.visitAstAnd(@) } }
class AstBangEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstBangEqual(@) } }
class AstGreater(lhs, rhs) { accept(visitor) { return visitor.visitAstGreater(@) } }
class AstGreaterEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstGreaterEqual(@) } }
class AstLess(lhs, rhs) { accept(visitor) { return visitor.visitAstLess(@) } }
class AstLessEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstLessEqual(@) } }
class AstGet(lhs, field) {
    accept(visitor) { return visitor.visitAstGet(@) }
    kind { return "Get" }
}
class AstImport(imports) { accept (visitor) { return visitor.visitAstImport(@) } }
class AstSet(lhs, field, rhs) {
    accept(visitor) { return visitor.visitAstSet(@) }
    kind { return "Set" }
}
class AstGetSelf() { accept(visitor) { return visitor.visitAstGetSelf(@) } }


class Method(name, params, block) {}

class Parser(lexer, file) {
    consume(kind) {
        def token = @lexer.next()
        if kind != token.kind {
            #print("token", token)
            #err("expected " + #to_string(kind) + " but got " + #to_string(token.kind))
        }
    }

    consume_identifier() {
        def token = @lexer.next()
        if token.kind != Kind.Identifier() {
            #err("expected identifier but got " + #to_string(token.kind))
        }
        return token.value
    }
    infix_prec(token) {
        if token == nil { return 0 }
        if token.kind == Kind.Equal() { return 1 }
        if token.kind == Kind.Or() { return 3 }
        if token.kind == Kind.And() { return 4 }
        if (token.kind == Kind.BangEqual()) or (token.kind == Kind.EqualEqual()) { return 5 }
        if (token.kind == Kind.Greater()) or (token.kind == Kind.GreaterEqual()) or (token.kind == Kind.Less()) or (token.kind == Kind.LessEqual()) { return 6 }
        if (token.kind == Kind.Plus()) or (token.kind == Kind.Minus()) { return 7 }
        if (token.kind == Kind.Star()) or (token.kind == Kind.Slash()) { return 8 }
        if (token.kind == Kind.LeftParen()) or (token.kind == Kind.LeftBracket()) { return 10 }
        if token.kind == Kind.Dot() { return 11 }
        return 0
    }


    field {
        if @lexer.peek().kind == Kind.Identifier() {
            def name = @consume_identifier()
            return AstGetField(name)
        }
        return AstGetSelf()
        #err("field")
    }

    grouping {
        def node = @expr()
        @consume(Kind.RightParen())
        return node
    }


    parse_prefix() {
        def token = @lexer.next()
        if token.kind == Kind.Minus() { return AstNeg(@parse_expr(9)) }
        if token.kind == Kind.Bang() { return AstNot(@parse_expr(9)) }
        if token.kind == Kind.LeftBracket() { return @list() }
        if token.kind == Kind.Identifier() { return AstGetVar(token.value) }
        if token.kind == Kind.Int() { return AstInt(token.value) }
        if token.kind == Kind.Float() { return AstFloat(token.value) }
        if token.kind == Kind.String() { return AstString(token.value) }
        if token.kind == Kind.True() { return AstBool(true) }
        if token.kind == Kind.False() { return AstBool(false) }
        if token.kind == Kind.Nil() { return AstNil }
        if token.kind == Kind.At() {
            return @field()
        }
        if token.kind == Kind.Hash() { return @native() }
        if token.kind == Kind.LeftParen() { return @grouping() }
        #print("token", token)
        #err("parse prefix")
    }

    match_infix_token(lhs, rhs, kind) {
        if kind == Kind.Or() { return AstOr(lhs, rhs) }
        if kind == Kind.And() { return AstAnd(lhs, rhs) }
        if kind == Kind.BangEqual() { return AstBangEqual(lhs, rhs) }
        if kind == Kind.EqualEqual() { return AstEqualEqual(lhs, rhs) }
        if kind == Kind.Greater() { return AstGreater(lhs, rhs) }
        if kind == Kind.GreaterEqual() { return AstGreaterEqual(lhs, rhs) }
        if kind == Kind.Less() { return AstLess(lhs, rhs) }
        if kind == Kind.LessEqual() { return AstLessEqual(lhs, rhs) }
        if kind == Kind.Plus() { return AstPlus(lhs, rhs) }
        if kind == Kind.Minus() { return AstMinus(lhs, rhs) }
        if kind == Kind.Equal() { 
            if lhs.kind() == "GetVar" {
                return AstReassign(lhs.value, rhs)
            }
            if lhs.kind() == "Get" {
                return AstSet(lhs.lhs, lhs.field, rhs)
            }
            if lhs.kind() == "Index" {
                return AstIndexSet(lhs.lhs, lhs.indexer, rhs)
            }
            
        }
        #err("no infix token match")
    }

    call(lhs) {
        def args = []
        while @lexer.peek().kind != Kind.RightParen() {
            #append(args, @expr())
            if @lexer.peek().kind == Kind.Comma() {
                @consume(Kind.Comma())
            }
        }
        @consume(Kind.RightParen())
        if lhs.kind() == "GetVar" { return AstInstance(lhs.value, args) }
        if lhs.kind() == "Get" { return AstMethod(lhs.field, args, lhs.lhs) }
        if lhs.kind() == "GetField" { return AstMethod(lhs.value, args, nil) }
        #err("call err")
    }

    index(lhs) {
        def expr = @expr()
        @consume(Kind.RightBracket())
        return AstIndex(lhs, expr)
    }

    get_or_set(lhs) {
        def name = @consume_identifier()
        return AstGet(lhs, name)
    }


    parse_infix(lhs) {
        def token = @lexer.peek()
        while token != nil {
            if token.kind == Kind.LeftParen() {
                @consume(Kind.LeftParen())
                lhs = @call(lhs)
            }
            if token.kind == Kind.LeftBracket() {
                @consume(Kind.LeftBracket())
                lhs = @index(lhs)
            }
            if token.kind == Kind.Dot() {
                @consume(Kind.Dot())
                lhs = @get_or_set(lhs)
            }
            if (token.kind != Kind.LeftParen()) and (token.kind != Kind.LeftBracket()) and (token.kind != Kind.Dot()) {
                def next_prec = @infix_prec(token)
                if next_prec == 0 {
                    return lhs
                }
                @consume(token.kind)
                def rhs = @parse_expr(next_prec)
                lhs = @match_infix_token(lhs, rhs, token.kind)
            }
            token = @lexer.peek()
        }
        return lhs
    }


    parse_expr(prec) {
        def lhs = @parse_prefix()
        while prec < @infix_prec(@lexer.peek()) {
            lhs = @parse_infix(lhs)
        }
        return lhs
    }

    expr {
        return @parse_expr(0)
    }

    block {
        @consume(Kind.LeftBrace())
        def stmts = []
        def done = false
        while !done {
            def token = @lexer.peek()
            if token.kind == Kind.RightBrace() {
                done = true
            }
            if token.kind != Kind.RightBrace() {
                #append(stmts, @stmt())
            }
        }
        @consume(Kind.RightBrace())
        return AstBlock(stmts)
    }

    param_list {
        if @lexer.peek().kind != Kind.LeftParen() {
            return []
        }
        @consume(Kind.LeftParen())
        def res = []
        while @lexer.peek().kind != Kind.RightParen() {
            def token = @lexer.peek()
            if token.kind == Kind.Identifier() {
                def name = @consume_identifier()
                #append(res, name)
            }
            if token.kind == Kind.Comma() {
                @consume(Kind.Comma())
            }
        }
        @consume(Kind.RightParen())
        return res
    }

    stmt_def {
        @consume(Kind.Def())
        def name = @consume_identifier()
        @consume(Kind.Equal())
        def expr = @expr()
        return AstDef(name, expr)
    }

    stmt_class {
        @consume(Kind.Class())
        def name = @consume_identifier()
        def fields = @param_list()
        @consume(Kind.LeftBrace())

        def methods = []

        while @lexer.peek().kind != Kind.RightBrace() {
            def method_name = @consume_identifier()
            def params = @param_list()
            def block = @block()
            #append(methods, Method(method_name, params, block))
        }
        @consume(Kind.RightBrace())
        return AstClass(name, fields, methods)
    }

    list {
        def items = []
        def token = @lexer.peek()
        def is_first = true
        while token.kind != Kind.RightBracket() {
            if !is_first {
                @consume(Kind.Comma())
            }
            is_first = false
            #append(items, @expr())
            token = @lexer.peek()
        }
        @consume(Kind.RightBracket())
        return AstList(items)
    }
    stmt_if {
        @consume(Kind.If())
        def expr = @expr()
        def block = @block()
        return AstIf(expr, block)
    }

    stmt_while {
        @consume(Kind.While())
        def condition = @expr()
        def block = @block()
        return AstWhile(condition, block)
    }
    stmt_return {
        @consume(Kind.Return())
        return AstReturn(@expr())
    }

    stmt_set_field {
        @consume(Kind.At())
        def name = @consume_identifier()
        def next = @lexer.next()
        if next.kind == Kind.Equal() {
            return AstSetField(name, @expr())
        }
        if next.kind == Kind.LeftParen() {
            return AstPop(@call(AstGetField(name)))
        }
        if next.kind == Kind.LeftBracket() {
            def indexer = @expr()
            @consume(Kind.RightBracket())
            @consume(Kind.Equal())
            def rhs = @expr()
            return AstIndexSet(AstGetField(name), indexer, rhs)
        }
        #print("next ", next)
        #err("todo: stmt_set_field")
    }

    native {
        def name = @consume_identifier()
        @consume(Kind.LeftParen())
        def args = []

        def done = @lexer.peek().kind == Kind.RightParen()
        while !done {
            #append(args, @expr())

            def token = @lexer.peek().kind
            if token == Kind.Comma() {
                @consume(Kind.Comma())
            }
            if token == Kind.RightParen() {
                done = true
            }
        }
        @consume(Kind.RightParen())
        return AstNative(name, args)
    }

    stmt {
        def token = @lexer.peek()
        if token.kind == Kind.LeftBrace() { return @block() }
        if token.kind == Kind.Def() { return @stmt_def() }
        if token.kind == Kind.LeftBracket()  { return @list() }
        if token.kind == Kind.Class() { return @stmt_class() }
        if token.kind == Kind.Identifier() {
            def expr = @expr()
            #print("todo: should pop if method instance or get", expr)
            def kind = expr.kind()
            if kind == "Method" or kind == "Instance" or kind == "Get" {
                return AstPop(expr)
            }
            return expr
        }
        if token.kind == Kind.If() { return @stmt_if() }
        if token.kind == Kind.While() { return @stmt_while() }
        if token.kind == Kind.Return() { return @stmt_return() }
        if token.kind == Kind.At() { return @stmt_set_field() }
        if token.kind == Kind.Hash() { 
            @consume(Kind.Hash())
            return AstPop(@native())
        }
        if token.kind == Kind.Import() { return @stmt_import() }
        #print("token", token)

        #err("stmt")
    }

    parse_root {
        def root_list = []
        while @lexer.peek() != nil {
            def node = @stmt()
            #append(root_list, node)
        }
        return AstRoot(root_list)
    }

    stmt_import {
        @consume(Kind.Import())
        @consume(Kind.LeftBrace())
        def imports = []
        def token = @lexer.next()

        while token.kind != Kind.RightBrace() {
            if token.kind == Kind.String() {
                def buf = ""
                def split = #split(@file, "/")
                def i = 0
                while i < (#len(split) - 1) {
                    buf = buf + split[i] + "/"
                    i = i + 1
                }

                buf = buf + #split(token.value, "\"")[0]
                #append(imports, buf)
            }
            token = @lexer.next()
        }
        return AstImport(imports)
    }
}

next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Return)
next token: Some(Class)
next token: Some(Return)
next token: Some(Class)
next token: Some(Class)
next token: Some(Def)
next token: Some(If)
next token: Some(Hash)
next token: Some(Hash)
next token: Some(Def)
next token: Some(If)
next token: Some(Hash)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Return)
next token: Some(If)
next token: Some(Def)
next token: Some(Return)
next token: Some(Return)
next token: Some(Hash)
next token: Some(Def)
next token: Some(At)
next token: Some(Return)
next token: Some(Def)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Hash)
next token: Some(Hash)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Hash)
next token: Some(Def)
next token: Some(While)
next token: Some(Hash)
next token: Some(If)
next token: Some(At)
next token: Some(At)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Hash)
next token: Some(Def)
next token: Some(At)
next token: Some(Return)
next token: Some(Def)
next token: Some(Return)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(At)
next token: Some(Identifier("lhs"))
next token: Some(If)
next token: Some(At)
next token: Some(Identifier("lhs"))
next token: Some(If)
next token: Some(At)
next token: Some(Identifier("lhs"))
next token: Some(If)
next token: Some(Def)
next token: Some(If)
next token: Some(Return)
next token: Some(At)
next token: Some(Def)
next token: Some(Identifier("lhs"))
next token: Some(Identifier("token"))
next token: Some(Return)
next token: Some(Def)
next token: Some(While)
next token: Some(Identifier("lhs"))
next token: Some(Return)
next token: Some(Return)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(Def)
next token: Some(If)
next token: Some(Identifier("done"))
next token: Some(If)
next token: Some(Hash)
next token: Some(At)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(At)
next token: Some(Def)
next token: Some(While)
next token: Some(Def)
next token: Some(If)
next token: Some(Def)
next token: Some(Hash)
next token: Some(If)
next token: Some(At)
next token: Some(At)
next token: Some(Return)
next token: Some(At)
next token: Some(Def)
next token: Some(At)
next token: Some(Def)
next token: Some(Return)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(At)
next token: Some(Def)
next token: Some(While)
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(Hash)
next token: Some(At)
next token: Some(Return)
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(At)
next token: Some(Identifier("is_first"))
next token: Some(Hash)
next token: Some(Identifier("token"))
next token: Some(At)
next token: Some(Return)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(Return)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(Return)
next token: Some(At)
next token: Some(Return)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Def)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(Return)
next token: Some(Hash)
next token: Some(Hash)
next token: Some(Def)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(Hash)
next token: Some(Def)
next token: Some(If)
next token: Some(At)
next token: Some(If)
next token: Some(Identifier("done"))
next token: Some(At)
next token: Some(Return)
next token: Some(Def)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Def)
next token: Some(Hash)
next token: Some(Def)
next token: Some(If)
next token: Some(Return)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(At)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Hash)
next token: Some(Hash)
next token: Some(Def)
next token: Some(While)
next token: Some(Def)
next token: Some(Hash)
next token: Some(Return)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(Identifier("buf"))
next token: Some(Identifier("i"))
next token: Some(Identifier("buf"))
next token: Some(Hash)
next token: Some(Identifier("token"))
next token: Some(Return)
read conent in rust: class AstPrinter(indent, is_last) {

    print_node(text) {
        def i = 0
        def ind = ""
        while i < #len(@indent) {
            ind = ind + @indent[i]
            i = i + 1
        }
        if @is_last {
            #print(ind + "L--", text)
        }
        if !@is_last {
            #print(ind + "+--", text)
        }
    }

    add_indent {
        if @is_last {
            #append(@indent, "    ")
        }
        if !@is_last {
            #append(@indent, "|   ")
        }
    }

    pop_indent {
        #pop(@indent)
    }

    loop(list) {
        @add_indent()
        def i = 0
        while i < #len(list) {
            @is_last = false
            if i == #len(list) - 1 {
                @is_last = true
            }
            list[i].accept(@)
            i = i + 1
        }
        @pop_indent()
    }
    
    visitAstRoot(self) {
        @print_node("Root")
        @loop(self.nodes)
    }

    visitAstNeg(self) {
        @print_node("Neg")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstNot(self) {
        @print_node("Not")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstGetSelf(self) { @print_node("GetSelf") }
    visitAstFloat(self) { @print_node("Float(" + self.value + ")") }
    visitAstInt(self) {
        @print_node("Int(" + self.value + ")")
    }
    visitAstString(self) { 
        @print_node("String(" + self.value + ")")
    }
    visitAstGetField(self) {
        @print_node("Field(" + self.value + ")")
    }
    visitAstSetField(self) {
        @print_node("SetField(" + self.name + ")")
        @is_last = true
        @add_indent()
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstList(self) {
        @print_node("List")
        @loop(self.items)
    }
    visitAstIndex(self) {
        @print_node("Index")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.indexer.accept(@)
        @pop_indent()
    }
    visitAstIndexSet(self) {
        @print_node("IndexSet")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        self.indexer.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstBool(self) {
        @print_node("Bool(" + #to_string(self.value) + ")")
    }
    visitAstNil(self) { @print_node("Nil") }
    visitAstGetVar(self) {
        @print_node("GetVar(" + self.value + ")")
    }
    visitAstDef(self) {
        @print_node("Def: " + self.name)
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstPlus(self) {
        @print_node("Plus")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }

    visitAstMinus(self) {
        @print_node("Minus")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstClass(self) {
        @print_node("Class: " + self.name)

        @add_indent()
        def i = 0
        while i < #len(self.fields) {
            @is_last = #len(self.methods) == 0 and i == (#len(self.fields) - 1)
            @print_node("Field: " + self.fields[i])
            i = i + 1
        }

        i = 0
        while i < #len(self.methods) {
            if i == #len(self.methods) - 1 {
                @is_last = true
            }
            @print_node("Method: " + self.methods[i].name)
            @add_indent()
            self.methods[i].block.accept(@)
            @pop_indent()
            i = i + 1
        }
        @pop_indent()

    }
    visitAstBlock(self) {
        @print_node("Block")
        @loop(self.stmts)
    }
    visitAstReassign(self) {
        @print_node("Reassign: " + self.name)
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstInstance(self) {
        @print_node(("Instance: " + self.name))
        @loop(self.args)
    }
    visitAstNative(self) {
        @print_node("Native: " + self.name)
        @loop(self.args)
    }
    visitAstMethod(self) {
        @print_node("MethodCall: " + self.name)
        @add_indent()
        @is_last = self.lhs == nil and #len(self.args) == 0
        def i = 0
        if #len(self.args) > 0 {
            @print_node("Args")
            @add_indent()
            @is_last = self.lhs == nil
            while i < #len(self.args) {
                if i == #len(self.args) - 1 {
                    @is_last = true
                }
                self.args[i].accept(@)
                i = i + 1
            }
            @pop_indent()
        }
        if self.lhs != nil {
            @is_last = true
            self.lhs.accept(@)
        }
        @pop_indent()
    }
    visitAstPop(self) { 
        @print_node("Pop")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstEqualEqual(self) {
        @print_node("EqualEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstIf(self) {
        @print_node("If")
        @add_indent()
        @is_last = false
        self.condition.accept(@)
        @is_last = true
        self.block.accept(@)
        @pop_indent()
    }
    visitAstReturn(self) {
        @print_node("Return")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstWhile(self) {
        @print_node("While")
        @add_indent()
        self.condition.accept(@)
        @is_last = true
        self.block.accept(@)
        @pop_indent()
    }

    visitAstOr(self) { 
        @print_node("Or")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }

    visitAstAnd(self) {
        @print_node("And")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }

    visitAstBangEqual(self) {
        @print_node("BangEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstGreater(self) {
        @print_node("Greater")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstGreaterEqual(self) {
        @print_node("GreaterEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstLess(self) {
        @print_node("Less")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstLessEqual(self) {
        @print_node("LessEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstGet(self) {
        @print_node("Get(" + self.field + ")")
        @add_indent()
        self.lhs.accept(@)
        @pop_indent()
    }
    visitAstSet(self) {
        @print_node("Set(" + self.field + ")")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
}

next token: Some(Class)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(Identifier("ind"))
next token: Some(Identifier("i"))
next token: Some(If)
next token: Some(Hash)
next token: Some(If)
next token: Some(Hash)
next token: Some(If)
next token: Some(Hash)
next token: Some(If)
next token: Some(Hash)
next token: Some(Hash)
next token: Some(At)
next token: Some(Def)
next token: Some(While)
next token: Some(At)
next token: Some(If)
next token: Some(At)
next token: Some(Identifier("list"))
next token: Some(Identifier("i"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(While)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("i"))
next token: Some(Identifier("i"))
next token: Some(While)
next token: Some(If)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("i"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(If)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(While)
next token: Some(If)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("i"))
next token: Some(At)
next token: Some(If)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
read conent in rust: class Local(name, depth, stack_pos) {}
class CompilerClass(name, fields, methods) {}
class CompilerMethod(name, code_start) {}


class Compiler(code, strings, variables, depth, classes, current_fields, current_class_name) {
    init {
        #print("init compiler")
        @code = []
        @strings = []
        @variables = [[]]
        @depth = 0
        @classes = []
        @current_fields = nil
        @current_class_name = nil
    }

    find_class(name) {
        def i = 0
        while i < #len(@classes) {
            if name == @classes[i].name {
                return @classes[i]
            }
            i = i + 1
        }
        return nil
    }

    push_code(code) {
        #append(@code, code)
    }

    begin_method {
        #append(@variables, [])
        @depth = @depth + 1
    }

    end_method {
        def w = #pop(@variables)
        @depth = @depth - 1
    }


    begin_scope {
        @depth = @depth + 1
    }


    end_scope {
        def last_vars = #pop(@variables)
        def len = #len(last_vars)
        def i = 0
        def new_vars = []
        while i < len {
            if last_vars[i].depth == @depth {
                @push_code("Pop")
            }
            if last_vars[i].depth != @depth {
                #append(new_vars, last_vars[i])
            }
            i = i + 1
        }
        @depth = @depth - 1
        #append(@variables, new_vars)
    }

    add_local(name) {
        def ll = #len(@variables) - 1
        def vars = @variables[#len(@variables)-1]
        def i = 0
        def res = nil
        while i < #len(vars) {
            if vars[i].name == name {
                #err("var with name: " + name + " already exists")
            }
            i = i + 1
        }
        #print("the wierd ll thing probably should not be here")
        #append(vars, Local(name, @depth, #len(vars) + ll))
    }

    get_local(name) {
        def vars = @variables[#len(@variables)-1]
        def i = 0

        while i < #len(vars) {
            if vars[i].name == name {
                return vars[i].stack_pos
            }
            i = i + 1
        }
        return nil
    }

    compile_list(items) {
        def i = 0
        while i < #len(items) {
            items[i].accept(@)
            i = i + 1
        }
    }

    native(name) {
        if name == "print" { return [0, 1] }
        if name == "to_string" { return [1, 1] }
        if name == "read_file" { return [2, 1] }
        if name == "len" { return [3, 1] }
        if name == "err" { return [4, 1] }
        if name == "append" { return [5, 2] }
        if name == "pop" { return [6, 1] }
        if name == "compile" { return [7, 2] }
        if name == "args" { return [8, 1] }
        if name == "split" { return [9, 2] }
        #err("no native function with name: " + name)
    }

    visitAstRoot(self) {
        @begin_scope()
        @compile_list(self.nodes)
        @end_scope()
    }
    visitAstNeg(self) {
        self.expr.accept(@)
        @push_code("Neg")
    }
    visitAstNot(self) {
        self.expr.accept(@)
        @push_code("Not")
    }
    visitAstFloat(self) { @push_code("PushFloat(" + #to_string(self.value) + ")") }
    visitAstInt(self) { @push_code("PushInt(" + #to_string(self.value) + ")") }

    visitAstString(self) {
        @push_code("PushString(" + #to_string(#len(@strings)) + ")")
        #append(@strings, self.value)
    }

    visitAstGetField(self) { @push_code("GetField(" + self.value + ")") }

    visitAstSetField(self) {
        self.expr.accept(@)
        @push_code("SetField(" + self.name + ")")
    }

    visitAstList(self) {
        @compile_list(self.items)
        @push_code("List(" + #to_string(#len(self.items)) + ")")
    }

    visitAstIndex(self) {
        self.lhs.accept(@)
        self.indexer.accept(@)
        @push_code("IndexGet")
    }

    visitAstIndexSet(self) {
        self.lhs.accept(@)
        self.indexer.accept(@)
        self.rhs.accept(@)
        @push_code("IndexSet")
    }

    visitAstBool(self) { @push_code("PushBool(" + #to_string(self.value) + ")") }
    visitAstNil(self) { @push_code("PushNil") }


    visitAstGetVar(self) {
        def local = @get_local(self.value)
        if local != nil {
            @push_code("GetLocal(" + #to_string(local) + ")")
        }
        if local == nil {
            def klass = @find_class(self.value)
            if klass == nil {
                #err("class should not be nil")
            }
            if #len(klass.fields) != 0 {
                #err("trying to call class without arguments? todo?")
            }
            def method_names = []
            def method_starts = []

            def i = 0
            while i < #len(klass.methods) {
                #append(method_names, klass.methods[i].name)
                #append(method_starts, klass.methods[i].code_start)
                i = i + 1
            }
            @push_code("Instance([], " + #to_string(method_names) + ", " + #to_string(method_starts) + ")")
        }
    }

    visitAstGetSelf(self) { @push_code("PushSelf") }

    visitAstDef(self) {
        self.expr.accept(@)
        @add_local(self.name)
    }
    visitAstPlus(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Plus")
    }

    visitAstMinus(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Minus")
    }
    visitAstClass(self) {
        @current_class_name = self.name
        @current_fields = self.fields
        def jump = #len(@code)
        @push_code("Jump()")


        if @find_class(self.name) != nil {
            #err("Class '" + self.name + "' is already defined")
        }

        def methods = []
        def i = 0
        while i < #len(self.methods) {
            @begin_method()
            def method = self.methods[i]
            def j = 0
            while j < #len(method.params) {
                @add_local(method.params[j])
                j = j + 1
            }
            def code_start = #len(@code)
            method.block.accept(@)
            def cm = CompilerMethod(method.name, code_start)
            #append(methods, cm)
            @push_code("PushNil")
            @push_code("Return")
            i = i + 1
            @end_method()
        }
        def end = #len(@code)
        @code[jump] = "Jump(" + #to_string(end) + ")"
        
        @current_class_name = nil
        @current_fields = nil

        def klass = CompilerClass(self.name, self.fields, methods)
        #append(@classes, klass)
    }
    visitAstBlock(self) {
        @begin_scope()
        @compile_list(self.stmts)
        @end_scope()
    }
    visitAstReassign(self) {
        def local = @get_local(self.name)
        if local == nil {
            #err("Could not find variable: " + self.name)
        }
        self.expr.accept(@)
        @push_code("SetLocal(" + #to_string(local) + ")")
    }
    visitAstInstance(self) {
        def klass = @find_class(self.name)
        if klass == nil {
            #err("Could not find class: " + self.name)
        }
        if #len(klass.fields) != #len(self.args) {
            #err("Arity does not match")
        }

        def fields_rev = []

        def i = #len(klass.fields) - 1
        while i >= 0 {
            #append(fields_rev, klass.fields[i])
            i = i - 1
        }
        def names = []
        def starts = []
        i = 0
        while i < #len(klass.methods) {
            #append(names, klass.methods[i].name)
            #append(starts, klass.methods[i].code_start)
            i = i + 1
        }

        @compile_list(self.args)

        @push_code("Instance(" + #to_string(fields_rev) + ", " + #to_string(names) + ", " + #to_string(starts) + ")")
    }
    visitAstNative(self) {
        def fn_info = @native(self.name)
        if self.name != "print" and #len(self.args) != fn_info[1] {
            #err("arity does not match")
        }
        @compile_list(self.args)
        if self.name == "print" {
            @push_code("Print(" + #to_string(#len(self.args)) + ")")
        }
        if self.name != "print" {
            @push_code("Native(" + #to_string(fn_info[0]) + ")")
        }
    }
    visitAstMethod(self) {
        if self.lhs != nil {
            self.lhs.accept(@)
        }
        if self.lhs == nil {
            @push_code("PushSelf")
        }
        @compile_list(self.args)
        @push_code("Call(" + self.name + ", " + #to_string(#len(self.args) + 1) + ")")
    }
    visitAstPop(self) {
        self.expr.accept(@)
        @push_code("Pop")
    }
    visitAstEqualEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Equals")
    }
    visitAstIf(self) {
        self.condition.accept(@)
        def skip_jump = #len(@code)
        @push_code("TEMP")
        self.block.accept(@)
        def end = #len(@code)
        @code[skip_jump] = "JumpIfFalse(" + #to_string(end) + ")"
    }
    visitAstReturn(self) {
        self.expr.accept(@)
        @push_code("Return")
    }
    visitAstWhile(self) {
        def loop_start = #len(@code)
        self.condition.accept(@)
        def exit_jump = #len(@code)
        @push_code("JumpIfFalse()")
        self.block.accept(@)
        @push_code("Jump(" + #to_string(loop_start) + ")")
        @code[exit_jump] = "JumpIfFalse(" + #to_string(#len(@code)) + ")"
    }
    visitAstOr(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Or")
    }
    visitAstAnd(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("And")
    }
    visitAstBangEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("NotEquals")
    }
    visitAstGreater(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Greater")
    }
    visitAstGreaterEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("GreaterEqual")
    }
    visitAstLess(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Less")
    }
    visitAstLessEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("LessEqual")
    }
    visitAstGet(self) {
        self.lhs.accept(@)
        @push_code("Get(" + self.field + ")")
    }
    visitAstSet(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Set(" + self.field + ")")
    }
}

next token: Some(Class)
next token: Some(Class)
next token: Some(Class)
next token: Some(Class)
next token: Some(Hash)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(Return)
next token: Some(Identifier("i"))
next token: Some(Return)
next token: Some(Hash)
next token: Some(Hash)
next token: Some(At)
next token: Some(Def)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(At)
next token: Some(If)
next token: Some(Hash)
next token: Some(Identifier("i"))
next token: Some(At)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(Hash)
next token: Some(Identifier("i"))
next token: Some(Hash)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(If)
next token: Some(Return)
next token: Some(Identifier("i"))
next token: Some(Return)
next token: Some(Def)
next token: Some(While)
next token: Some(Identifier("items"))
next token: Some(Identifier("i"))
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(If)
next token: Some(Return)
next token: Some(Hash)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Hash)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(If)
next token: Some(At)
next token: Some(If)
next token: Some(Def)
next token: Some(If)
next token: Some(Hash)
next token: Some(If)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(Hash)
next token: Some(Hash)
next token: Some(Identifier("i"))
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(At)
next token: Some(If)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(At)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(At)
next token: Some(Identifier("j"))
next token: Some(Def)
next token: Some(Identifier("method"))
next token: Some(Def)
next token: Some(Hash)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("i"))
next token: Some(At)
next token: Some(Def)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(Hash)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(If)
next token: Some(Hash)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Def)
next token: Some(If)
next token: Some(Hash)
next token: Some(If)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(Hash)
next token: Some(Identifier("i"))
next token: Some(Def)
next token: Some(Def)
next token: Some(Identifier("i"))
next token: Some(While)
next token: Some(Hash)
next token: Some(Hash)
next token: Some(Identifier("i"))
next token: Some(At)
next token: Some(At)
next token: Some(Def)
next token: Some(If)
next token: Some(Hash)
next token: Some(At)
next token: Some(If)
next token: Some(At)
next token: Some(If)
next token: Some(At)
next token: Some(If)
next token: Some(Identifier("self"))
next token: Some(If)
next token: Some(At)
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Def)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Def)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Def)
next token: Some(Identifier("self"))
next token: Some(Def)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(At)
next token: Some(Identifier("self"))
next token: Some(Identifier("self"))
next token: Some(At)
read conent in rust: class ImportResolver() {
    
    visitAstRoot(self) {
        def i = 0

        while i < #len(self.nodes) {
            #print("while loop: ", i)
            #print("node:", self.nodes[i])
            def is_import = self.nodes[i].accept(@)
            if is_import {
                #print("its an import!")
                def imports = []
                def j = 0
                while j < #len(self.nodes[i].imports) {
                    #print("import", self.nodes[i].imports[j])
                    def file = self.nodes[i].imports[j]

                    def input = #read_file(file)
                    #print("input:", input)

                    def lexer = Lexer(input, 0)
                    lexer = Peekable(lexer, nil)

                    def parser = Parser(lexer, file)
                    def root = parser.parse_root()
                    #append(imports, root)

                    j = j + 1
                }
                self.nodes[i] = AstBlock(imports)
            }
            i = i + 1
        }
    }
    visitAstNeg(self) { return false }
    visitAstNot(self) { return false }
    visitAstFloat(self) { return false }
    visitAstInt(self) { return false }
    visitAstString(self) { return false }
    visitAstGetField(self) { return false }
    visitAstSetField(self) { return false }
    visitAstList(self) { return false }
    visitAstIndex(self) { return false }
    visitAstIndexSet(self) { return false }
    visitAstBool(self) { return false }
    visitAstNil(self) { return false }
    visitAstGetVar(self) { return false }
    visitAstDef(self) { return false }
    visitAstPlus(self) { return false }
    visitAstClass(self) { return false }
    visitAstBlock(self) { return false }
    visitAstReassign(self) { return false }
    visitAstInstance(self) { return false }
    visitAstNative(self) { return false }
    visitAstMethod(self) { return false }
    visitAstPop(self) { return false }
    visitAstEqualEqual(self) { return false }
    visitAstIf(self) { return false }
    visitAstReturn(self) { return false }
    visitAstWhile(self) { return false }
    visitAstOr(self) { return false }
    visitAstAnd(self) { return false }
    visitAstBangEqual(self) { return false }
    visitAstGreater(self) { return false }
    visitAstGreaterEqual(self) { return false }
    visitAstLess(self) { return false }
    visitAstLessEqual(self) { return false }
    visitAstGet(self) { return false }
    visitAstSet(self) { return false }
    visitAstImport(self) { 
    #print("visited ast import")
    return true }

}

next token: Some(Class)
next token: Some(Def)
next token: Some(While)
next token: Some(Hash)
next token: Some(Hash)
next token: Some(Def)
next token: Some(If)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Def)
next token: Some(While)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Def)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Identifier("lexer"))
next token: Some(Def)
next token: Some(Def)
next token: Some(Hash)
next token: Some(Identifier("j"))
next token: Some(Identifier("self"))
next token: Some(Identifier("i"))
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Return)
next token: Some(Hash)
next token: Some(Return)
next token: Some(Def)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Hash)
next token: Some(Def)
next token: Some(Identifier("lexer"))
next token: Some(Def)
next token: Some(Def)
next token: Some(Def)
next token: Some(Identifier("root"))
next token: Some(Def)
next token: Some(Identifier("root"))
next token: Some(Def)
next token: Some(Identifier("compiler"))
next token: Some(Identifier("root"))
next token: Some(Def)
next token: Some(While)
next token: Some(Hash)
next token: Some(Identifier("i"))
next token: Some(Hash)
next token: Some(Hash)
└── Root
    ├── Block
    │   ├── Root
    │   │   ├── Class: Kind
    │   │   │   ├── Method: LeftParen
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(0)
    │   │   │   ├── Method: RightParen
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(1)
    │   │   │   ├── Method: LeftBracket
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(2)
    │   │   │   ├── Method: RightBracket
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(3)
    │   │   │   ├── Method: LeftBrace
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(4)
    │   │   │   ├── Method: RightBrace
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(5)
    │   │   │   ├── Method: Less
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(6)
    │   │   │   ├── Method: Greater
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(7)
    │   │   │   ├── Method: Equal
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(8)
    │   │   │   ├── Method: Plus
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(9)
    │   │   │   ├── Method: Minus
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(10)
    │   │   │   ├── Method: Slash
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(11)
    │   │   │   ├── Method: Star
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(12)
    │   │   │   ├── Method: Dot
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(13)
    │   │   │   ├── Method: Comma
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(14)
    │   │   │   ├── Method: Colon
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(15)
    │   │   │   ├── Method: SemiColon
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(16)
    │   │   │   ├── Method: Bang
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(17)
    │   │   │   ├── Method: At
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(18)
    │   │   │   ├── Method: Hash
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(19)
    │   │   │   ├── Method: Class
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(20)
    │   │   │   ├── Method: And
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(21)
    │   │   │   ├── Method: Or
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(22)
    │   │   │   ├── Method: Else
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(23)
    │   │   │   ├── Method: If
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(24)
    │   │   │   ├── Method: For
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(25)
    │   │   │   ├── Method: Nil
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(26)
    │   │   │   ├── Method: Return
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(27)
    │   │   │   ├── Method: While
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(28)
    │   │   │   ├── Method: Import
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(29)
    │   │   │   ├── Method: True
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(30)
    │   │   │   ├── Method: False
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(31)
    │   │   │   ├── Method: Def
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(32)
    │   │   │   ├── Method: Int
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(33)
    │   │   │   ├── Method: Float
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(34)
    │   │   │   ├── Method: Bool
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(35)
    │   │   │   ├── Method: Str
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(36)
    │   │   │   ├── Method: Identifier
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(37)
    │   │   │   ├── Method: String
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(38)
    │   │   │   ├── Method: Float
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(40)
    │   │   │   ├── Method: BangEqual
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(41)
    │   │   │   ├── Method: EqualEqual
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(42)
    │   │   │   ├── Method: GreaterEqual
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(43)
    │   │   │   ├── Method: LessEqual
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Int(44)
    │   │   │   └── Method: from_str
    │   │   │       └── Param: in
    │   │   │       └── Block
    │   │   │           ├── Def: kinds
    │   │   │           │   └── List
    │   │   │           │       ├── String("(")
    │   │   │           │       ├── String(")")
    │   │   │           │       ├── String("[")
    │   │   │           │       ├── String("]")
    │   │   │           │       ├── String("{")
    │   │   │           │       ├── String("}")
    │   │   │           │       ├── String("<")
    │   │   │           │       ├── String(">")
    │   │   │           │       ├── String("=")
    │   │   │           │       ├── String("+")
    │   │   │           │       ├── String("-")
    │   │   │           │       ├── String("/")
    │   │   │           │       ├── String("*")
    │   │   │           │       ├── String(".")
    │   │   │           │       ├── String(",")
    │   │   │           │       ├── String(":")
    │   │   │           │       ├── String(";")
    │   │   │           │       ├── String("!")
    │   │   │           │       ├── String("@")
    │   │   │           │       ├── String("#")
    │   │   │           │       ├── String("class")
    │   │   │           │       ├── String("and")
    │   │   │           │       ├── String("or")
    │   │   │           │       ├── String("else")
    │   │   │           │       ├── String("if")
    │   │   │           │       ├── String("for")
    │   │   │           │       ├── String("nil")
    │   │   │           │       ├── String("return")
    │   │   │           │       ├── String("while")
    │   │   │           │       ├── String("import")
    │   │   │           │       ├── String("true")
    │   │   │           │       ├── String("false")
    │   │   │           │       ├── String("def")
    │   │   │           │       ├── String("int")
    │   │   │           │       ├── String("float")
    │   │   │           │       ├── String("bool")
    │   │   │           │       └── String("str")
    │   │   │           ├── Def: i
    │   │   │           │   └── Int(0)
    │   │   │           ├── While
    │   │   │           │   ├── Less
    │   │   │           │   │   ├── GetVar(i)
    │   │   │           │   │   └── Native: len
    │   │   │           │   │       └── GetVar(kinds)
    │   │   │           │   └── Block
    │   │   │           │       ├── If
    │   │   │           │       │   ├── EqualEqual
    │   │   │           │       │   │   ├── GetVar(in)
    │   │   │           │       │   │   └── Index
    │   │   │           │       │   │       ├── GetVar(kinds)
    │   │   │           │       │   │       └── GetVar(i)
    │   │   │           │       │   └── Block
    │   │   │           │       │       └── Return
    │   │   │           │       │           └── GetVar(i)
    │   │   │           │       └── Reassign: i
    │   │   │           │           └── Plus
    │   │   │           │               ├── GetVar(i)
    │   │   │           │               └── Int(1)
    │   │   │           └── Return
    │   │   │               └── Nil
    │   │   ├── Class: Token
    │   │   │   ├── Field: value
    │   │   │   ├── Field: start
    │   │   │   ├── Field: end
    │   │   │   └── Field: kind
    │   │   ├── Class: Lexer
    │   │   │   ├── Field: code
    │   │   │   ├── Field: p
    │   │   │   ├── Method: whitespace
    │   │   │   │   └── Block
    │   │   │   │       └── While
    │   │   │   │           ├── And
    │   │   │   │           │   ├── Less
    │   │   │   │           │   │   ├── Field("p")
    │   │   │   │           │   │   └── Native: len
    │   │   │   │           │   │       └── Field("code")
    │   │   │   │           │   └── EqualEqual
    │   │   │   │           │       ├── Index
    │   │   │   │           │       │   ├── Field("code")
    │   │   │   │           │       │   └── Field("p")
    │   │   │   │           │       └── String(" ")
    │   │   │   │           └── Block
    │   │   │   │               └── SetField(p)
    │   │   │   │                   └── Plus
    │   │   │   │                       ├── Field("p")
    │   │   │   │                       └── Int(1)
    │   │   │   ├── Method: is_done
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── GreaterEqual
    │   │   │   │               ├── Field("p")
    │   │   │   │               └── Native: len
    │   │   │   │                   └── Field("code")
    │   │   │   ├── Method: letter
    │   │   │   │   └── Block
    │   │   │   │       ├── If
    │   │   │   │       │   ├── Method: is_done
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Bool(false)
    │   │   │   │       ├── Def: letters
    │   │   │   │       │   └── String("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_")
    │   │   │   │       ├── Def: i
    │   │   │   │       │   └── Int(0)
    │   │   │   │       ├── While
    │   │   │   │       │   ├── Less
    │   │   │   │       │   │   ├── GetVar(i)
    │   │   │   │       │   │   └── Native: len
    │   │   │   │       │   │       └── GetVar(letters)
    │   │   │   │       │   └── Block
    │   │   │   │       │       ├── If
    │   │   │   │       │       │   ├── EqualEqual
    │   │   │   │       │       │   │   ├── Index
    │   │   │   │       │       │   │   │   ├── GetVar(letters)
    │   │   │   │       │       │   │   │   └── GetVar(i)
    │   │   │   │       │       │   │   └── Index
    │   │   │   │       │       │   │       ├── Field("code")
    │   │   │   │       │       │   │       └── Field("p")
    │   │   │   │       │       │   └── Block
    │   │   │   │       │       │       └── Return
    │   │   │   │       │       │           └── Bool(true)
    │   │   │   │       │       └── Reassign: i
    │   │   │   │       │           └── Plus
    │   │   │   │       │               ├── GetVar(i)
    │   │   │   │       │               └── Int(1)
    │   │   │   │       └── Return
    │   │   │   │           └── Bool(false)
    │   │   │   ├── Method: digit
    │   │   │   │   └── Block
    │   │   │   │       ├── If
    │   │   │   │       │   ├── Method: is_done
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Bool(false)
    │   │   │   │       ├── Def: digits
    │   │   │   │       │   └── String("0123456789")
    │   │   │   │       ├── Def: i
    │   │   │   │       │   └── Int(0)
    │   │   │   │       ├── While
    │   │   │   │       │   ├── Less
    │   │   │   │       │   │   ├── GetVar(i)
    │   │   │   │       │   │   └── Native: len
    │   │   │   │       │   │       └── GetVar(digits)
    │   │   │   │       │   └── Block
    │   │   │   │       │       ├── If
    │   │   │   │       │       │   ├── EqualEqual
    │   │   │   │       │       │   │   ├── Index
    │   │   │   │       │       │   │   │   ├── GetVar(digits)
    │   │   │   │       │       │   │   │   └── GetVar(i)
    │   │   │   │       │       │   │   └── Index
    │   │   │   │       │       │   │       ├── Field("code")
    │   │   │   │       │       │   │       └── Field("p")
    │   │   │   │       │       │   └── Block
    │   │   │   │       │       │       └── Return
    │   │   │   │       │       │           └── Bool(true)
    │   │   │   │       │       └── Reassign: i
    │   │   │   │       │           └── Plus
    │   │   │   │       │               ├── GetVar(i)
    │   │   │   │       │               └── Int(1)
    │   │   │   │       └── Return
    │   │   │   │           └── Bool(false)
    │   │   │   ├── Method: advance
    │   │   │   │   └── Block
    │   │   │   │       └── If
    │   │   │   │           ├── Less
    │   │   │   │           │   ├── Field("p")
    │   │   │   │           │   └── Native: len
    │   │   │   │           │       └── Field("code")
    │   │   │   │           └── Block
    │   │   │   │               └── SetField(p)
    │   │   │   │                   └── Plus
    │   │   │   │                       ├── Field("p")
    │   │   │   │                       └── Int(1)
    │   │   │   ├── Method: identifier
    │   │   │   │   └── Block
    │   │   │   │       ├── Def: start
    │   │   │   │       │   └── Field("p")
    │   │   │   │       ├── Def: val
    │   │   │   │       │   └── String("")
    │   │   │   │       ├── While
    │   │   │   │       │   ├── Or
    │   │   │   │       │   │   ├── Method: letter
    │   │   │   │       │   │   └── Method: digit
    │   │   │   │       │   └── Block
    │   │   │   │       │       ├── Reassign: val
    │   │   │   │       │       │   └── Plus
    │   │   │   │       │       │       ├── GetVar(val)
    │   │   │   │       │       │       └── Index
    │   │   │   │       │       │           ├── Field("code")
    │   │   │   │       │       │           └── Field("p")
    │   │   │   │       │       └── SetField(p)
    │   │   │   │       │           └── Plus
    │   │   │   │       │               ├── Field("p")
    │   │   │   │       │               └── Int(1)
    │   │   │   │       ├── Def: end
    │   │   │   │       │   └── Field("p")
    │   │   │   │       ├── Def: keyword
    │   │   │   │       │   └── Method: from_str
    │   │   │   │       │       ├── GetVar(val)
    │   │   │   │       │       └── GetVar(Kind)
    │   │   │   │       ├── If
    │   │   │   │       │   ├── BangEqual
    │   │   │   │       │   │   ├── GetVar(keyword)
    │   │   │   │       │   │   └── Nil
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Call: Token
    │   │   │   │       │               ├── GetVar(val)
    │   │   │   │       │               ├── GetVar(start)
    │   │   │   │       │               ├── GetVar(end)
    │   │   │   │       │               └── GetVar(keyword)
    │   │   │   │       └── Return
    │   │   │   │           └── Call: Token
    │   │   │   │               ├── GetVar(val)
    │   │   │   │               ├── GetVar(start)
    │   │   │   │               ├── GetVar(end)
    │   │   │   │               └── Method: Identifier
    │   │   │   │                   └── GetVar(Kind)
    │   │   │   ├── Method: number
    │   │   │   │   └── Block
    │   │   │   │       ├── Def: start
    │   │   │   │       │   └── Field("p")
    │   │   │   │       ├── Def: val
    │   │   │   │       │   └── String("")
    │   │   │   │       ├── Def: is_float
    │   │   │   │       │   └── Bool(false)
    │   │   │   │       ├── While
    │   │   │   │       │   ├── Or
    │   │   │   │       │   │   ├── Method: digit
    │   │   │   │       │   │   └── EqualEqual
    │   │   │   │       │   │       ├── Index
    │   │   │   │       │   │       │   ├── Field("code")
    │   │   │   │       │   │       │   └── Field("p")
    │   │   │   │       │   │       └── String(".")
    │   │   │   │       │   └── Block
    │   │   │   │       │       ├── If
    │   │   │   │       │       │   ├── EqualEqual
    │   │   │   │       │       │   │   ├── Index
    │   │   │   │       │       │   │   │   ├── Field("code")
    │   │   │   │       │       │   │   │   └── Field("p")
    │   │   │   │       │       │   │   └── String(".")
    │   │   │   │       │       │   └── Block
    │   │   │   │       │       │       └── Reassign: is_float
    │   │   │   │       │       │           └── Bool(true)
    │   │   │   │       │       ├── Reassign: val
    │   │   │   │       │       │   └── Plus
    │   │   │   │       │       │       ├── GetVar(val)
    │   │   │   │       │       │       └── Index
    │   │   │   │       │       │           ├── Field("code")
    │   │   │   │       │       │           └── Field("p")
    │   │   │   │       │       └── SetField(p)
    │   │   │   │       │           └── Plus
    │   │   │   │       │               ├── Field("p")
    │   │   │   │       │               └── Int(1)
    │   │   │   │       ├── Def: end
    │   │   │   │       │   └── Field("p")
    │   │   │   │       ├── If
    │   │   │   │       │   ├── GetVar(is_float)
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Call: Token
    │   │   │   │       │               ├── GetVar(val)
    │   │   │   │       │               ├── GetVar(start)
    │   │   │   │       │               ├── GetVar(end)
    │   │   │   │       │               └── Method: Float
    │   │   │   │       │                   └── GetVar(Kind)
    │   │   │   │       └── Return
    │   │   │   │           └── Call: Token
    │   │   │   │               ├── GetVar(val)
    │   │   │   │               ├── GetVar(start)
    │   │   │   │               ├── GetVar(end)
    │   │   │   │               └── Method: Int
    │   │   │   │                   └── GetVar(Kind)
    │   │   │   ├── Method: string
    │   │   │   │   └── Block
    │   │   │   │       ├── Def: start
    │   │   │   │       │   └── Field("p")
    │   │   │   │       ├── Def: val
    │   │   │   │       │   └── String(""")
    │   │   │   │       ├── SetField(p)
    │   │   │   │       │   └── Plus
    │   │   │   │       │       ├── Field("p")
    │   │   │   │       │       └── Int(1)
    │   │   │   │       ├── While
    │   │   │   │       │   ├── And
    │   │   │   │       │   │   ├── Less
    │   │   │   │       │   │   │   ├── Field("p")
    │   │   │   │       │   │   │   └── Native: len
    │   │   │   │       │   │   │       └── Field("code")
    │   │   │   │       │   │   └── BangEqual
    │   │   │   │       │   │       ├── Index
    │   │   │   │       │   │       │   ├── Field("code")
    │   │   │   │       │   │       │   └── Field("p")
    │   │   │   │       │   │       └── String(""")
    │   │   │   │       │   └── Block
    │   │   │   │       │       ├── Def: test
    │   │   │   │       │       │   └── EqualEqual
    │   │   │   │       │       │       ├── Index
    │   │   │   │       │       │       │   ├── Field("code")
    │   │   │   │       │       │       │   └── Field("p")
    │   │   │   │       │       │       └── String("\")
    │   │   │   │       │       ├── If
    │   │   │   │       │       │   ├── GetVar(test)
    │   │   │   │       │       │   └── Block
    │   │   │   │       │       │       ├── Reassign: val
    │   │   │   │       │       │       │   └── Plus
    │   │   │   │       │       │       │       ├── GetVar(val)
    │   │   │   │       │       │       │       └── Index
    │   │   │   │       │       │       │           ├── Field("code")
    │   │   │   │       │       │       │           └── Field("p")
    │   │   │   │       │       │       ├── SetField(p)
    │   │   │   │       │       │       │   └── Plus
    │   │   │   │       │       │       │       ├── Field("p")
    │   │   │   │       │       │       │       └── Int(1)
    │   │   │   │       │       │       └── If
    │   │   │   │       │       │           ├── Less
    │   │   │   │       │       │           │   ├── Field("p")
    │   │   │   │       │       │           │   └── Native: len
    │   │   │   │       │       │           │       └── Field("code")
    │   │   │   │       │       │           └── Block
    │   │   │   │       │       │               ├── Reassign: val
    │   │   │   │       │       │               │   └── Plus
    │   │   │   │       │       │               │       ├── GetVar(val)
    │   │   │   │       │       │               │       └── Index
    │   │   │   │       │       │               │           ├── Field("code")
    │   │   │   │       │       │               │           └── Field("p")
    │   │   │   │       │       │               └── SetField(p)
    │   │   │   │       │       │                   └── Plus
    │   │   │   │       │       │                       ├── Field("p")
    │   │   │   │       │       │                       └── Int(1)
    │   │   │   │       │       └── If
    │   │   │   │       │           ├── Not
    │   │   │   │       │           │   └── GetVar(test)
    │   │   │   │       │           └── Block
    │   │   │   │       │               ├── Reassign: val
    │   │   │   │       │               │   └── Plus
    │   │   │   │       │               │       ├── GetVar(val)
    │   │   │   │       │               │       └── Index
    │   │   │   │       │               │           ├── Field("code")
    │   │   │   │       │               │           └── Field("p")
    │   │   │   │       │               └── SetField(p)
    │   │   │   │       │                   └── Plus
    │   │   │   │       │                       ├── Field("p")
    │   │   │   │       │                       └── Int(1)
    │   │   │   │       ├── If
    │   │   │   │       │   ├── Less
    │   │   │   │       │   │   ├── Field("p")
    │   │   │   │       │   │   └── Native: len
    │   │   │   │       │   │       └── Field("code")
    │   │   │   │       │   └── Block
    │   │   │   │       │       ├── Reassign: val
    │   │   │   │       │       │   └── Plus
    │   │   │   │       │       │       ├── GetVar(val)
    │   │   │   │       │       │       └── String(""")
    │   │   │   │       │       └── SetField(p)
    │   │   │   │       │           └── Plus
    │   │   │   │       │               ├── Field("p")
    │   │   │   │       │               └── Int(1)
    │   │   │   │       ├── Def: end
    │   │   │   │       │   └── Field("p")
    │   │   │   │       └── Return
    │   │   │   │           └── Call: Token
    │   │   │   │               ├── GetVar(val)
    │   │   │   │               ├── GetVar(start)
    │   │   │   │               ├── GetVar(end)
    │   │   │   │               └── Method: String
    │   │   │   │                   └── GetVar(Kind)
    │   │   │   ├── Method: single_char
    │   │   │   │   └── Block
    │   │   │   │       ├── Def: a
    │   │   │   │       │   └── Method: from_str
    │   │   │   │       │       ├── Index
    │   │   │   │       │       │   ├── Field("code")
    │   │   │   │       │       │   └── Field("p")
    │   │   │   │       │       └── GetVar(Kind)
    │   │   │   │       ├── If
    │   │   │   │       │   ├── BangEqual
    │   │   │   │       │   │   ├── GetVar(a)
    │   │   │   │       │   │   └── Nil
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Call: Token
    │   │   │   │       │               ├── Index
    │   │   │   │       │               │   ├── Field("code")
    │   │   │   │       │               │   └── Field("p")
    │   │   │   │       │               ├── Field("p")
    │   │   │   │       │               ├── Plus
    │   │   │   │       │               │   ├── Field("p")
    │   │   │   │       │               │   └── Int(1)
    │   │   │   │       │               └── GetVar(a)
    │   │   │   │       └── Return
    │   │   │   │           └── Nil
    │   │   │   ├── Method: two_char
    │   │   │   │   └── Block
    │   │   │   │       ├── If
    │   │   │   │       │   ├── EqualEqual
    │   │   │   │       │   │   ├── Plus
    │   │   │   │       │   │   │   ├── Field("p")
    │   │   │   │       │   │   │   └── Int(1)
    │   │   │   │       │   │   └── Native: len
    │   │   │   │       │   │       └── Field("code")
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Nil
    │   │   │   │       ├── Def: c1
    │   │   │   │       │   └── Index
    │   │   │   │       │       ├── Field("code")
    │   │   │   │       │       └── Field("p")
    │   │   │   │       ├── Def: c2
    │   │   │   │       │   └── Index
    │   │   │   │       │       ├── Field("code")
    │   │   │   │       │       └── Plus
    │   │   │   │       │           ├── Field("p")
    │   │   │   │       │           └── Int(1)
    │   │   │   │       ├── If
    │   │   │   │       │   ├── And
    │   │   │   │       │   │   ├── EqualEqual
    │   │   │   │       │   │   │   ├── GetVar(c1)
    │   │   │   │       │   │   │   └── String("!")
    │   │   │   │       │   │   └── EqualEqual
    │   │   │   │       │   │       ├── GetVar(c2)
    │   │   │   │       │   │       └── String("=")
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Call: Token
    │   │   │   │       │               ├── Plus
    │   │   │   │       │               │   ├── GetVar(c1)
    │   │   │   │       │               │   └── GetVar(c2)
    │   │   │   │       │               ├── Field("p")
    │   │   │   │       │               ├── Plus
    │   │   │   │       │               │   ├── Field("p")
    │   │   │   │       │               │   └── Int(2)
    │   │   │   │       │               └── Method: BangEqual
    │   │   │   │       │                   └── GetVar(Kind)
    │   │   │   │       ├── If
    │   │   │   │       │   ├── And
    │   │   │   │       │   │   ├── EqualEqual
    │   │   │   │       │   │   │   ├── GetVar(c1)
    │   │   │   │       │   │   │   └── String("=")
    │   │   │   │       │   │   └── EqualEqual
    │   │   │   │       │   │       ├── GetVar(c2)
    │   │   │   │       │   │       └── String("=")
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Call: Token
    │   │   │   │       │               ├── Plus
    │   │   │   │       │               │   ├── GetVar(c1)
    │   │   │   │       │               │   └── GetVar(c2)
    │   │   │   │       │               ├── Field("p")
    │   │   │   │       │               ├── Plus
    │   │   │   │       │               │   ├── Field("p")
    │   │   │   │       │               │   └── Int(2)
    │   │   │   │       │               └── Method: EqualEqual
    │   │   │   │       │                   └── GetVar(Kind)
    │   │   │   │       ├── If
    │   │   │   │       │   ├── And
    │   │   │   │       │   │   ├── EqualEqual
    │   │   │   │       │   │   │   ├── GetVar(c1)
    │   │   │   │       │   │   │   └── String(">")
    │   │   │   │       │   │   └── EqualEqual
    │   │   │   │       │   │       ├── GetVar(c2)
    │   │   │   │       │   │       └── String("=")
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Call: Token
    │   │   │   │       │               ├── Plus
    │   │   │   │       │               │   ├── GetVar(c1)
    │   │   │   │       │               │   └── GetVar(c2)
    │   │   │   │       │               ├── Field("p")
    │   │   │   │       │               ├── Plus
    │   │   │   │       │               │   ├── Field("p")
    │   │   │   │       │               │   └── Int(2)
    │   │   │   │       │               └── Method: GreaterEqual
    │   │   │   │       │                   └── GetVar(Kind)
    │   │   │   │       ├── If
    │   │   │   │       │   ├── And
    │   │   │   │       │   │   ├── EqualEqual
    │   │   │   │       │   │   │   ├── GetVar(c1)
    │   │   │   │       │   │   │   └── String("<")
    │   │   │   │       │   │   └── EqualEqual
    │   │   │   │       │   │       ├── GetVar(c2)
    │   │   │   │       │   │       └── String("=")
    │   │   │   │       │   └── Block
    │   │   │   │       │       └── Return
    │   │   │   │       │           └── Call: Token
    │   │   │   │       │               ├── Plus
    │   │   │   │       │               │   ├── GetVar(c1)
    │   │   │   │       │               │   └── GetVar(c2)
    │   │   │   │       │               ├── Field("p")
    │   │   │   │       │               ├── Plus
    │   │   │   │       │               │   ├── Field("p")
    │   │   │   │       │               │   └── Int(2)
    │   │   │   │       │               └── Method: LessEqual
    │   │   │   │       │                   └── GetVar(Kind)
    │   │   │   │       └── Return
    │   │   │   │           └── Nil
    │   │   │   └── Method: next
    │   │   │       └── Block
    │   │   │           ├── If
    │   │   │           │   ├── Method: is_done
    │   │   │           │   └── Block
    │   │   │           │       └── Return
    │   │   │           │           └── Nil
    │   │   │           ├── Pop
    │   │   │           │   └── Method: whitespace
    │   │   │           ├── While
    │   │   │           │   ├── Not
    │   │   │           │   │   └── Method: is_done
    │   │   │           │   └── Block
    │   │   │           │       ├── Def: two_char
    │   │   │           │       │   └── Method: two_char
    │   │   │           │       ├── If
    │   │   │           │       │   ├── BangEqual
    │   │   │           │       │   │   ├── GetVar(two_char)
    │   │   │           │       │   │   └── Nil
    │   │   │           │       │   └── Block
    │   │   │           │       │       ├── SetField(p)
    │   │   │           │       │       │   └── Plus
    │   │   │           │       │       │       ├── Field("p")
    │   │   │           │       │       │       └── Int(2)
    │   │   │           │       │       └── Return
    │   │   │           │       │           └── GetVar(two_char)
    │   │   │           │       ├── If
    │   │   │           │       │   ├── Method: letter
    │   │   │           │       │   └── Block
    │   │   │           │       │       └── Return
    │   │   │           │       │           └── Method: identifier
    │   │   │           │       ├── If
    │   │   │           │       │   ├── Method: digit
    │   │   │           │       │   └── Block
    │   │   │           │       │       └── Return
    │   │   │           │       │           └── Method: number
    │   │   │           │       ├── Def: single_char
    │   │   │           │       │   └── Method: single_char
    │   │   │           │       ├── If
    │   │   │           │       │   ├── BangEqual
    │   │   │           │       │   │   ├── GetVar(single_char)
    │   │   │           │       │   │   └── Nil
    │   │   │           │       │   └── Block
    │   │   │           │       │       ├── SetField(p)
    │   │   │           │       │       │   └── Plus
    │   │   │           │       │       │       ├── Field("p")
    │   │   │           │       │       │       └── Int(1)
    │   │   │           │       │       └── Return
    │   │   │           │       │           └── GetVar(single_char)
    │   │   │           │       ├── If
    │   │   │           │       │   ├── EqualEqual
    │   │   │           │       │   │   ├── Index
    │   │   │           │       │   │   │   ├── Field("code")
    │   │   │           │       │   │   │   └── Field("p")
    │   │   │           │       │   │   └── String(""")
    │   │   │           │       │   └── Block
    │   │   │           │       │       └── Return
    │   │   │           │       │           └── Method: string
    │   │   │           │       └── Pop
    │   │   │           │           └── Method: advance
    │   │   │           └── Return
    │   │   │               └── Nil
    │   │   └── Class: Peekable
    │   │       ├── Field: item
    │   │       ├── Field: peek_item
    │   │       ├── Method: next
    │   │       │   └── Block
    │   │       │       ├── If
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Field("peek_item")
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       ├── Def: temp
    │   │       │       │       │   └── Field("peek_item")
    │   │       │       │       ├── SetField(peek_item)
    │   │       │       │       │   └── Nil
    │   │       │       │       └── Return
    │   │       │       │           └── GetVar(temp)
    │   │       │       └── Return
    │   │       │           └── Method: next
    │   │       │               └── Field("item")
    │   │       └── Method: peek
    │   │           └── Block
    │   │               ├── If
    │   │               │   ├── EqualEqual
    │   │               │   │   ├── Field("peek_item")
    │   │               │   │   └── Nil
    │   │               │   └── Block
    │   │               │       └── SetField(peek_item)
    │   │               │           └── Method: next
    │   │               │               └── Field("item")
    │   │               └── Return
    │   │                   └── Field("peek_item")
    │   ├── Root
    │   │   ├── Class: AstRoot
    │   │   │   ├── Field: nodes
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstRoot
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstNeg
    │   │   │   ├── Field: expr
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstNeg
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstNot
    │   │   │   ├── Field: expr
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstNot
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstFloat
    │   │   │   ├── Field: value
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstFloat
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstInt
    │   │   │   ├── Field: value
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstInt
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstString
    │   │   │   ├── Field: value
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstString
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstGetField
    │   │   │   ├── Field: value
    │   │   │   ├── Method: accept
    │   │   │   │   └── Param: visitor
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Method: visitAstGetField
    │   │   │   │               ├── GetSelf
    │   │   │   │               └── GetVar(visitor)
    │   │   │   └── Method: kind
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── String("GetField")
    │   │   ├── Class: AstSetField
    │   │   │   ├── Field: name
    │   │   │   ├── Field: expr
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstSetField
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstList
    │   │   │   ├── Field: items
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstList
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstIndex
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: indexer
    │   │   │   ├── Method: accept
    │   │   │   │   └── Param: visitor
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Method: visitAstIndex
    │   │   │   │               ├── GetSelf
    │   │   │   │               └── GetVar(visitor)
    │   │   │   └── Method: kind
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── String("Index")
    │   │   ├── Class: AstIndexSet
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: indexer
    │   │   │   ├── Field: rhs
    │   │   │   ├── Method: accept
    │   │   │   │   └── Param: visitor
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Method: visitAstIndexSet
    │   │   │   │               ├── GetSelf
    │   │   │   │               └── GetVar(visitor)
    │   │   │   └── Method: kind
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── String("IndexSet")
    │   │   ├── Class: AstBool
    │   │   │   ├── Field: value
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstBool
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstNil
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstNil
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstGetVar
    │   │   │   ├── Field: value
    │   │   │   ├── Method: accept
    │   │   │   │   └── Param: visitor
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Method: visitAstGetVar
    │   │   │   │               ├── GetSelf
    │   │   │   │               └── GetVar(visitor)
    │   │   │   └── Method: kind
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── String("GetVar")
    │   │   ├── Class: AstDef
    │   │   │   ├── Field: name
    │   │   │   ├── Field: expr
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstDef
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstPlus
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstPlus
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstMinus
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstMinus
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstClass
    │   │   │   ├── Field: name
    │   │   │   ├── Field: fields
    │   │   │   ├── Field: methods
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstClass
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstBlock
    │   │   │   ├── Field: stmts
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstBlock
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstReassign
    │   │   │   ├── Field: name
    │   │   │   ├── Field: expr
    │   │   │   ├── Method: accept
    │   │   │   │   └── Param: visitor
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Method: visitAstReassign
    │   │   │   │               ├── GetSelf
    │   │   │   │               └── GetVar(visitor)
    │   │   │   └── Method: kind
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── String("Reassign")
    │   │   ├── Class: AstInstance
    │   │   │   ├── Field: name
    │   │   │   ├── Field: args
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstInstance
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstNative
    │   │   │   ├── Field: name
    │   │   │   ├── Field: args
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstNative
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstMethod
    │   │   │   ├── Field: name
    │   │   │   ├── Field: args
    │   │   │   ├── Field: lhs
    │   │   │   ├── Method: accept
    │   │   │   │   └── Param: visitor
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Method: visitAstMethod
    │   │   │   │               ├── GetSelf
    │   │   │   │               └── GetVar(visitor)
    │   │   │   └── Method: kind
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── String("Method")
    │   │   ├── Class: AstPop
    │   │   │   ├── Field: expr
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstPop
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstEqualEqual
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstEqualEqual
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstIf
    │   │   │   ├── Field: condition
    │   │   │   ├── Field: block
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstIf
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstReturn
    │   │   │   ├── Field: expr
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstReturn
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstWhile
    │   │   │   ├── Field: condition
    │   │   │   ├── Field: block
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstWhile
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstOr
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstOr
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstAnd
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstAnd
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstBangEqual
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstBangEqual
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstGreater
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstGreater
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstGreaterEqual
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstGreaterEqual
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstLess
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstLess
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstLessEqual
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: rhs
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstLessEqual
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstGet
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: field
    │   │   │   ├── Method: accept
    │   │   │   │   └── Param: visitor
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Method: visitAstGet
    │   │   │   │               ├── GetSelf
    │   │   │   │               └── GetVar(visitor)
    │   │   │   └── Method: kind
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── String("Get")
    │   │   ├── Class: AstImport
    │   │   │   ├── Field: imports
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstImport
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: AstSet
    │   │   │   ├── Field: lhs
    │   │   │   ├── Field: field
    │   │   │   ├── Field: rhs
    │   │   │   ├── Method: accept
    │   │   │   │   └── Param: visitor
    │   │   │   │   └── Block
    │   │   │   │       └── Return
    │   │   │   │           └── Method: visitAstSet
    │   │   │   │               ├── GetSelf
    │   │   │   │               └── GetVar(visitor)
    │   │   │   └── Method: kind
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── String("Set")
    │   │   ├── Class: AstGetSelf
    │   │   │   └── Method: accept
    │   │   │       └── Param: visitor
    │   │   │       └── Block
    │   │   │           └── Return
    │   │   │               └── Method: visitAstGetSelf
    │   │   │                   ├── GetSelf
    │   │   │                   └── GetVar(visitor)
    │   │   ├── Class: Method
    │   │   │   ├── Field: name
    │   │   │   ├── Field: params
    │   │   │   └── Field: block
    │   │   └── Class: Parser
    │   │       ├── Field: lexer
    │   │       ├── Field: file
    │   │       ├── Method: consume
    │   │       │   └── Param: kind
    │   │       │   └── Block
    │   │       │       ├── Def: token
    │   │       │       │   └── Method: next
    │   │       │       │       └── Field("lexer")
    │   │       │       └── If
    │   │       │           ├── BangEqual
    │   │       │           │   ├── GetVar(kind)
    │   │       │           │   └── Get(kind)
    │   │       │           │       └── GetVar(token)
    │   │       │           └── Block
    │   │       │               ├── Pop
    │   │       │               │   └── Native: print
    │   │       │               │       ├── String("token")
    │   │       │               │       └── GetVar(token)
    │   │       │               └── Pop
    │   │       │                   └── Native: err
    │   │       │                       └── Plus
    │   │       │                           ├── Plus
    │   │       │                           │   ├── Plus
    │   │       │                           │   │   ├── String("expected ")
    │   │       │                           │   │   └── Native: to_string
    │   │       │                           │   │       └── GetVar(kind)
    │   │       │                           │   └── String(" but got ")
    │   │       │                           └── Native: to_string
    │   │       │                               └── Get(kind)
    │   │       │                                   └── GetVar(token)
    │   │       ├── Method: consume_identifier
    │   │       │   └── Block
    │   │       │       ├── Def: token
    │   │       │       │   └── Method: next
    │   │       │       │       └── Field("lexer")
    │   │       │       ├── If
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Identifier
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: err
    │   │       │       │               └── Plus
    │   │       │       │                   ├── String("expected identifier but got ")
    │   │       │       │                   └── Native: to_string
    │   │       │       │                       └── Get(kind)
    │   │       │       │                           └── GetVar(token)
    │   │       │       └── Return
    │   │       │           └── Get(value)
    │   │       │               └── GetVar(token)
    │   │       ├── Method: infix_prec
    │   │       │   └── Param: token
    │   │       │   └── Block
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(token)
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(0)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Equal
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(1)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Or
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(3)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: And
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(4)
    │   │       │       ├── If
    │   │       │       │   ├── Or
    │   │       │       │   │   ├── EqualEqual
    │   │       │       │   │   │   ├── Get(kind)
    │   │       │       │   │   │   │   └── GetVar(token)
    │   │       │       │   │   │   └── Method: BangEqual
    │   │       │       │   │   │       └── GetVar(Kind)
    │   │       │       │   │   └── EqualEqual
    │   │       │       │   │       ├── Get(kind)
    │   │       │       │   │       │   └── GetVar(token)
    │   │       │       │   │       └── Method: EqualEqual
    │   │       │       │   │           └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(5)
    │   │       │       ├── If
    │   │       │       │   ├── Or
    │   │       │       │   │   ├── Or
    │   │       │       │   │   │   ├── Or
    │   │       │       │   │   │   │   ├── EqualEqual
    │   │       │       │   │   │   │   │   ├── Get(kind)
    │   │       │       │   │   │   │   │   │   └── GetVar(token)
    │   │       │       │   │   │   │   │   └── Method: Greater
    │   │       │       │   │   │   │   │       └── GetVar(Kind)
    │   │       │       │   │   │   │   └── EqualEqual
    │   │       │       │   │   │   │       ├── Get(kind)
    │   │       │       │   │   │   │       │   └── GetVar(token)
    │   │       │       │   │   │   │       └── Method: GreaterEqual
    │   │       │       │   │   │   │           └── GetVar(Kind)
    │   │       │       │   │   │   └── EqualEqual
    │   │       │       │   │   │       ├── Get(kind)
    │   │       │       │   │   │       │   └── GetVar(token)
    │   │       │       │   │   │       └── Method: Less
    │   │       │       │   │   │           └── GetVar(Kind)
    │   │       │       │   │   └── EqualEqual
    │   │       │       │   │       ├── Get(kind)
    │   │       │       │   │       │   └── GetVar(token)
    │   │       │       │   │       └── Method: LessEqual
    │   │       │       │   │           └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(6)
    │   │       │       ├── If
    │   │       │       │   ├── Or
    │   │       │       │   │   ├── EqualEqual
    │   │       │       │   │   │   ├── Get(kind)
    │   │       │       │   │   │   │   └── GetVar(token)
    │   │       │       │   │   │   └── Method: Plus
    │   │       │       │   │   │       └── GetVar(Kind)
    │   │       │       │   │   └── EqualEqual
    │   │       │       │   │       ├── Get(kind)
    │   │       │       │   │       │   └── GetVar(token)
    │   │       │       │   │       └── Method: Minus
    │   │       │       │   │           └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(7)
    │   │       │       ├── If
    │   │       │       │   ├── Or
    │   │       │       │   │   ├── EqualEqual
    │   │       │       │   │   │   ├── Get(kind)
    │   │       │       │   │   │   │   └── GetVar(token)
    │   │       │       │   │   │   └── Method: Star
    │   │       │       │   │   │       └── GetVar(Kind)
    │   │       │       │   │   └── EqualEqual
    │   │       │       │   │       ├── Get(kind)
    │   │       │       │   │       │   └── GetVar(token)
    │   │       │       │   │       └── Method: Slash
    │   │       │       │   │           └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(8)
    │   │       │       ├── If
    │   │       │       │   ├── Or
    │   │       │       │   │   ├── EqualEqual
    │   │       │       │   │   │   ├── Get(kind)
    │   │       │       │   │   │   │   └── GetVar(token)
    │   │       │       │   │   │   └── Method: LeftParen
    │   │       │       │   │   │       └── GetVar(Kind)
    │   │       │       │   │   └── EqualEqual
    │   │       │       │   │       ├── Get(kind)
    │   │       │       │   │       │   └── GetVar(token)
    │   │       │       │   │       └── Method: LeftBracket
    │   │       │       │   │           └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(10)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Dot
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Int(11)
    │   │       │       └── Return
    │   │       │           └── Int(0)
    │   │       ├── Method: field
    │   │       │   └── Block
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── Method: peek
    │   │       │       │   │   │       └── Field("lexer")
    │   │       │       │   │   └── Method: Identifier
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       ├── Def: name
    │   │       │       │       │   └── Method: consume_identifier
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstGetField
    │   │       │       │               └── GetVar(name)
    │   │       │       ├── Return
    │   │       │       │   └── Call: AstGetSelf
    │   │       │       └── Pop
    │   │       │           └── Native: err
    │   │       │               └── String("field")
    │   │       ├── Method: grouping
    │   │       │   └── Block
    │   │       │       ├── Def: node
    │   │       │       │   └── Method: expr
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: RightParen
    │   │       │       │           └── GetVar(Kind)
    │   │       │       └── Return
    │   │       │           └── GetVar(node)
    │   │       ├── Method: parse_prefix
    │   │       │   └── Block
    │   │       │       ├── Def: token
    │   │       │       │   └── Method: next
    │   │       │       │       └── Field("lexer")
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Minus
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstNeg
    │   │       │       │               └── Method: parse_expr
    │   │       │       │                   └── Int(9)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Bang
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstNot
    │   │       │       │               └── Method: parse_expr
    │   │       │       │                   └── Int(9)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: LeftBracket
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: list
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Identifier
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstGetVar
    │   │       │       │               └── Get(value)
    │   │       │       │                   └── GetVar(token)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Int
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstInt
    │   │       │       │               └── Get(value)
    │   │       │       │                   └── GetVar(token)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Float
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstFloat
    │   │       │       │               └── Get(value)
    │   │       │       │                   └── GetVar(token)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: String
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstString
    │   │       │       │               └── Get(value)
    │   │       │       │                   └── GetVar(token)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: True
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstBool
    │   │       │       │               └── Bool(true)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: False
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstBool
    │   │       │       │               └── Bool(false)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Nil
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── GetVar(AstNil)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: At
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: field
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Hash
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: native
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: LeftParen
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: grouping
    │   │       │       ├── Pop
    │   │       │       │   └── Native: print
    │   │       │       │       ├── String("token")
    │   │       │       │       └── GetVar(token)
    │   │       │       └── Pop
    │   │       │           └── Native: err
    │   │       │               └── String("parse prefix")
    │   │       ├── Method: match_infix_token
    │   │       │   ├── Param: lhs
    │   │       │   ├── Param: rhs
    │   │       │   └── Param: kind
    │   │       │   └── Block
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: Or
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstOr
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: And
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstAnd
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: BangEqual
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstBangEqual
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: EqualEqual
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstEqualEqual
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: Greater
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstGreater
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: GreaterEqual
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstGreaterEqual
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: Less
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstLess
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: LessEqual
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstLessEqual
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: Plus
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstPlus
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: Minus
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstMinus
    │   │       │       │               ├── GetVar(lhs)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(kind)
    │   │       │       │   │   └── Method: Equal
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Method: kind
    │   │       │       │       │   │   │   └── GetVar(lhs)
    │   │       │       │       │   │   └── String("GetVar")
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Return
    │   │       │       │       │           └── Call: AstReassign
    │   │       │       │       │               ├── Get(value)
    │   │       │       │       │               │   └── GetVar(lhs)
    │   │       │       │       │               └── GetVar(rhs)
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Method: kind
    │   │       │       │       │   │   │   └── GetVar(lhs)
    │   │       │       │       │   │   └── String("Get")
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Return
    │   │       │       │       │           └── Call: AstSet
    │   │       │       │       │               ├── Get(lhs)
    │   │       │       │       │               │   └── GetVar(lhs)
    │   │       │       │       │               ├── Get(field)
    │   │       │       │       │               │   └── GetVar(lhs)
    │   │       │       │       │               └── GetVar(rhs)
    │   │       │       │       └── If
    │   │       │       │           ├── EqualEqual
    │   │       │       │           │   ├── Method: kind
    │   │       │       │           │   │   └── GetVar(lhs)
    │   │       │       │           │   └── String("Index")
    │   │       │       │           └── Block
    │   │       │       │               └── Return
    │   │       │       │                   └── Call: AstIndexSet
    │   │       │       │                       ├── Get(lhs)
    │   │       │       │                       │   └── GetVar(lhs)
    │   │       │       │                       ├── Get(indexer)
    │   │       │       │                       │   └── GetVar(lhs)
    │   │       │       │                       └── GetVar(rhs)
    │   │       │       └── Pop
    │   │       │           └── Native: err
    │   │       │               └── String("no infix token match")
    │   │       ├── Method: call
    │   │       │   └── Param: lhs
    │   │       │   └── Block
    │   │       │       ├── Def: args
    │   │       │       │   └── List
    │   │       │       ├── While
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── Method: peek
    │   │       │       │   │   │       └── Field("lexer")
    │   │       │       │   │   └── Method: RightParen
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Native: append
    │   │       │       │       │       ├── GetVar(args)
    │   │       │       │       │       └── Method: expr
    │   │       │       │       └── If
    │   │       │       │           ├── EqualEqual
    │   │       │       │           │   ├── Get(kind)
    │   │       │       │           │   │   └── Method: peek
    │   │       │       │           │   │       └── Field("lexer")
    │   │       │       │           │   └── Method: Comma
    │   │       │       │           │       └── GetVar(Kind)
    │   │       │       │           └── Block
    │   │       │       │               └── Pop
    │   │       │       │                   └── Method: consume
    │   │       │       │                       └── Method: Comma
    │   │       │       │                           └── GetVar(Kind)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: RightParen
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Method: kind
    │   │       │       │   │   │   └── GetVar(lhs)
    │   │       │       │   │   └── String("GetVar")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstInstance
    │   │       │       │               ├── Get(value)
    │   │       │       │               │   └── GetVar(lhs)
    │   │       │       │               └── GetVar(args)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Method: kind
    │   │       │       │   │   │   └── GetVar(lhs)
    │   │       │       │   │   └── String("Get")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstMethod
    │   │       │       │               ├── Get(field)
    │   │       │       │               │   └── GetVar(lhs)
    │   │       │       │               ├── GetVar(args)
    │   │       │       │               └── Get(lhs)
    │   │       │       │                   └── GetVar(lhs)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Method: kind
    │   │       │       │   │   │   └── GetVar(lhs)
    │   │       │       │   │   └── String("GetField")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstMethod
    │   │       │       │               ├── Get(value)
    │   │       │       │               │   └── GetVar(lhs)
    │   │       │       │               ├── GetVar(args)
    │   │       │       │               └── Nil
    │   │       │       └── Pop
    │   │       │           └── Native: err
    │   │       │               └── String("call err")
    │   │       ├── Method: index
    │   │       │   └── Param: lhs
    │   │       │   └── Block
    │   │       │       ├── Def: expr
    │   │       │       │   └── Method: expr
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: RightBracket
    │   │       │       │           └── GetVar(Kind)
    │   │       │       └── Return
    │   │       │           └── Call: AstIndex
    │   │       │               ├── GetVar(lhs)
    │   │       │               └── GetVar(expr)
    │   │       ├── Method: get_or_set
    │   │       │   └── Param: lhs
    │   │       │   └── Block
    │   │       │       ├── Def: name
    │   │       │       │   └── Method: consume_identifier
    │   │       │       └── Return
    │   │       │           └── Call: AstGet
    │   │       │               ├── GetVar(lhs)
    │   │       │               └── GetVar(name)
    │   │       ├── Method: parse_infix
    │   │       │   └── Param: lhs
    │   │       │   └── Block
    │   │       │       ├── Def: token
    │   │       │       │   └── Method: peek
    │   │       │       │       └── Field("lexer")
    │   │       │       ├── While
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── GetVar(token)
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Get(kind)
    │   │       │       │       │   │   │   └── GetVar(token)
    │   │       │       │       │   │   └── Method: LeftParen
    │   │       │       │       │   │       └── GetVar(Kind)
    │   │       │       │       │   └── Block
    │   │       │       │       │       ├── Pop
    │   │       │       │       │       │   └── Method: consume
    │   │       │       │       │       │       └── Method: LeftParen
    │   │       │       │       │       │           └── GetVar(Kind)
    │   │       │       │       │       └── Reassign: lhs
    │   │       │       │       │           └── Method: call
    │   │       │       │       │               └── GetVar(lhs)
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Get(kind)
    │   │       │       │       │   │   │   └── GetVar(token)
    │   │       │       │       │   │   └── Method: LeftBracket
    │   │       │       │       │   │       └── GetVar(Kind)
    │   │       │       │       │   └── Block
    │   │       │       │       │       ├── Pop
    │   │       │       │       │       │   └── Method: consume
    │   │       │       │       │       │       └── Method: LeftBracket
    │   │       │       │       │       │           └── GetVar(Kind)
    │   │       │       │       │       └── Reassign: lhs
    │   │       │       │       │           └── Method: index
    │   │       │       │       │               └── GetVar(lhs)
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Get(kind)
    │   │       │       │       │   │   │   └── GetVar(token)
    │   │       │       │       │   │   └── Method: Dot
    │   │       │       │       │   │       └── GetVar(Kind)
    │   │       │       │       │   └── Block
    │   │       │       │       │       ├── Pop
    │   │       │       │       │       │   └── Method: consume
    │   │       │       │       │       │       └── Method: Dot
    │   │       │       │       │       │           └── GetVar(Kind)
    │   │       │       │       │       └── Reassign: lhs
    │   │       │       │       │           └── Method: get_or_set
    │   │       │       │       │               └── GetVar(lhs)
    │   │       │       │       ├── If
    │   │       │       │       │   ├── And
    │   │       │       │       │   │   ├── And
    │   │       │       │       │   │   │   ├── BangEqual
    │   │       │       │       │   │   │   │   ├── Get(kind)
    │   │       │       │       │   │   │   │   │   └── GetVar(token)
    │   │       │       │       │   │   │   │   └── Method: LeftParen
    │   │       │       │       │   │   │   │       └── GetVar(Kind)
    │   │       │       │       │   │   │   └── BangEqual
    │   │       │       │       │   │   │       ├── Get(kind)
    │   │       │       │       │   │   │       │   └── GetVar(token)
    │   │       │       │       │   │   │       └── Method: LeftBracket
    │   │       │       │       │   │   │           └── GetVar(Kind)
    │   │       │       │       │   │   └── BangEqual
    │   │       │       │       │   │       ├── Get(kind)
    │   │       │       │       │   │       │   └── GetVar(token)
    │   │       │       │       │   │       └── Method: Dot
    │   │       │       │       │   │           └── GetVar(Kind)
    │   │       │       │       │   └── Block
    │   │       │       │       │       ├── Def: next_prec
    │   │       │       │       │       │   └── Method: infix_prec
    │   │       │       │       │       │       └── GetVar(token)
    │   │       │       │       │       ├── If
    │   │       │       │       │       │   ├── EqualEqual
    │   │       │       │       │       │   │   ├── GetVar(next_prec)
    │   │       │       │       │       │   │   └── Int(0)
    │   │       │       │       │       │   └── Block
    │   │       │       │       │       │       └── Return
    │   │       │       │       │       │           └── GetVar(lhs)
    │   │       │       │       │       ├── Pop
    │   │       │       │       │       │   └── Method: consume
    │   │       │       │       │       │       └── Get(kind)
    │   │       │       │       │       │           └── GetVar(token)
    │   │       │       │       │       ├── Def: rhs
    │   │       │       │       │       │   └── Method: parse_expr
    │   │       │       │       │       │       └── GetVar(next_prec)
    │   │       │       │       │       └── Reassign: lhs
    │   │       │       │       │           └── Method: match_infix_token
    │   │       │       │       │               ├── GetVar(lhs)
    │   │       │       │       │               ├── GetVar(rhs)
    │   │       │       │       │               └── Get(kind)
    │   │       │       │       │                   └── GetVar(token)
    │   │       │       │       └── Reassign: token
    │   │       │       │           └── Method: peek
    │   │       │       │               └── Field("lexer")
    │   │       │       └── Return
    │   │       │           └── GetVar(lhs)
    │   │       ├── Method: parse_expr
    │   │       │   └── Param: prec
    │   │       │   └── Block
    │   │       │       ├── Def: lhs
    │   │       │       │   └── Method: parse_prefix
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(prec)
    │   │       │       │   │   └── Method: infix_prec
    │   │       │       │   │       └── Method: peek
    │   │       │       │   │           └── Field("lexer")
    │   │       │       │   └── Block
    │   │       │       │       └── Reassign: lhs
    │   │       │       │           └── Method: parse_infix
    │   │       │       │               └── GetVar(lhs)
    │   │       │       └── Return
    │   │       │           └── GetVar(lhs)
    │   │       ├── Method: expr
    │   │       │   └── Block
    │   │       │       └── Return
    │   │       │           └── Method: parse_expr
    │   │       │               └── Int(0)
    │   │       ├── Method: block
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: LeftBrace
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: stmts
    │   │       │       │   └── List
    │   │       │       ├── Def: done
    │   │       │       │   └── Bool(false)
    │   │       │       ├── While
    │   │       │       │   ├── Not
    │   │       │       │   │   └── GetVar(done)
    │   │       │       │   └── Block
    │   │       │       │       ├── Def: token
    │   │       │       │       │   └── Method: peek
    │   │       │       │       │       └── Field("lexer")
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Get(kind)
    │   │       │       │       │   │   │   └── GetVar(token)
    │   │       │       │       │   │   └── Method: RightBrace
    │   │       │       │       │   │       └── GetVar(Kind)
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Reassign: done
    │   │       │       │       │           └── Bool(true)
    │   │       │       │       └── If
    │   │       │       │           ├── BangEqual
    │   │       │       │           │   ├── Get(kind)
    │   │       │       │           │   │   └── GetVar(token)
    │   │       │       │           │   └── Method: RightBrace
    │   │       │       │           │       └── GetVar(Kind)
    │   │       │       │           └── Block
    │   │       │       │               └── Pop
    │   │       │       │                   └── Native: append
    │   │       │       │                       ├── GetVar(stmts)
    │   │       │       │                       └── Method: stmt
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: RightBrace
    │   │       │       │           └── GetVar(Kind)
    │   │       │       └── Return
    │   │       │           └── Call: AstBlock
    │   │       │               └── GetVar(stmts)
    │   │       ├── Method: param_list
    │   │       │   └── Block
    │   │       │       ├── If
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── Method: peek
    │   │       │       │   │   │       └── Field("lexer")
    │   │       │       │   │   └── Method: LeftParen
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: LeftParen
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: res
    │   │       │       │   └── List
    │   │       │       ├── While
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── Method: peek
    │   │       │       │   │   │       └── Field("lexer")
    │   │       │       │   │   └── Method: RightParen
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       ├── Def: token
    │   │       │       │       │   └── Method: peek
    │   │       │       │       │       └── Field("lexer")
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Get(kind)
    │   │       │       │       │   │   │   └── GetVar(token)
    │   │       │       │       │   │   └── Method: Identifier
    │   │       │       │       │   │       └── GetVar(Kind)
    │   │       │       │       │   └── Block
    │   │       │       │       │       ├── Def: name
    │   │       │       │       │       │   └── Method: consume_identifier
    │   │       │       │       │       └── Pop
    │   │       │       │       │           └── Native: append
    │   │       │       │       │               ├── GetVar(res)
    │   │       │       │       │               └── GetVar(name)
    │   │       │       │       └── If
    │   │       │       │           ├── EqualEqual
    │   │       │       │           │   ├── Get(kind)
    │   │       │       │           │   │   └── GetVar(token)
    │   │       │       │           │   └── Method: Comma
    │   │       │       │           │       └── GetVar(Kind)
    │   │       │       │           └── Block
    │   │       │       │               └── Pop
    │   │       │       │                   └── Method: consume
    │   │       │       │                       └── Method: Comma
    │   │       │       │                           └── GetVar(Kind)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: RightParen
    │   │       │       │           └── GetVar(Kind)
    │   │       │       └── Return
    │   │       │           └── GetVar(res)
    │   │       ├── Method: stmt_def
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: Def
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: name
    │   │       │       │   └── Method: consume_identifier
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: Equal
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: expr
    │   │       │       │   └── Method: expr
    │   │       │       └── Return
    │   │       │           └── Call: AstDef
    │   │       │               ├── GetVar(name)
    │   │       │               └── GetVar(expr)
    │   │       ├── Method: stmt_class
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: Class
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: name
    │   │       │       │   └── Method: consume_identifier
    │   │       │       ├── Def: fields
    │   │       │       │   └── Method: param_list
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: LeftBrace
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: methods
    │   │       │       │   └── List
    │   │       │       ├── While
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── Method: peek
    │   │       │       │   │   │       └── Field("lexer")
    │   │       │       │   │   └── Method: RightBrace
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       ├── Def: method_name
    │   │       │       │       │   └── Method: consume_identifier
    │   │       │       │       ├── Def: params
    │   │       │       │       │   └── Method: param_list
    │   │       │       │       ├── Def: block
    │   │       │       │       │   └── Method: block
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: append
    │   │       │       │               ├── GetVar(methods)
    │   │       │       │               └── Call: Method
    │   │       │       │                   ├── GetVar(method_name)
    │   │       │       │                   ├── GetVar(params)
    │   │       │       │                   └── GetVar(block)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: RightBrace
    │   │       │       │           └── GetVar(Kind)
    │   │       │       └── Return
    │   │       │           └── Call: AstClass
    │   │       │               ├── GetVar(name)
    │   │       │               ├── GetVar(fields)
    │   │       │               └── GetVar(methods)
    │   │       ├── Method: list
    │   │       │   └── Block
    │   │       │       ├── Def: items
    │   │       │       │   └── List
    │   │       │       ├── Def: token
    │   │       │       │   └── Method: peek
    │   │       │       │       └── Field("lexer")
    │   │       │       ├── Def: is_first
    │   │       │       │   └── Bool(true)
    │   │       │       ├── While
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: RightBracket
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       ├── If
    │   │       │       │       │   ├── Not
    │   │       │       │       │   │   └── GetVar(is_first)
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Pop
    │   │       │       │       │           └── Method: consume
    │   │       │       │       │               └── Method: Comma
    │   │       │       │       │                   └── GetVar(Kind)
    │   │       │       │       ├── Reassign: is_first
    │   │       │       │       │   └── Bool(false)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Native: append
    │   │       │       │       │       ├── GetVar(items)
    │   │       │       │       │       └── Method: expr
    │   │       │       │       └── Reassign: token
    │   │       │       │           └── Method: peek
    │   │       │       │               └── Field("lexer")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: RightBracket
    │   │       │       │           └── GetVar(Kind)
    │   │       │       └── Return
    │   │       │           └── Call: AstList
    │   │       │               └── GetVar(items)
    │   │       ├── Method: stmt_if
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: If
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: expr
    │   │       │       │   └── Method: expr
    │   │       │       ├── Def: block
    │   │       │       │   └── Method: block
    │   │       │       └── Return
    │   │       │           └── Call: AstIf
    │   │       │               ├── GetVar(expr)
    │   │       │               └── GetVar(block)
    │   │       ├── Method: stmt_while
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: While
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: condition
    │   │       │       │   └── Method: expr
    │   │       │       ├── Def: block
    │   │       │       │   └── Method: block
    │   │       │       └── Return
    │   │       │           └── Call: AstWhile
    │   │       │               ├── GetVar(condition)
    │   │       │               └── GetVar(block)
    │   │       ├── Method: stmt_return
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: Return
    │   │       │       │           └── GetVar(Kind)
    │   │       │       └── Return
    │   │       │           └── Call: AstReturn
    │   │       │               └── Method: expr
    │   │       ├── Method: stmt_set_field
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: At
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: name
    │   │       │       │   └── Method: consume_identifier
    │   │       │       ├── Def: next
    │   │       │       │   └── Method: next
    │   │       │       │       └── Field("lexer")
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(next)
    │   │       │       │   │   └── Method: Equal
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstSetField
    │   │       │       │               ├── GetVar(name)
    │   │       │       │               └── Method: expr
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(next)
    │   │       │       │   │   └── Method: LeftParen
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstPop
    │   │       │       │               └── Method: call
    │   │       │       │                   └── Call: AstGetField
    │   │       │       │                       └── GetVar(name)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(next)
    │   │       │       │   │   └── Method: LeftBracket
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       ├── Def: indexer
    │   │       │       │       │   └── Method: expr
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: consume
    │   │       │       │       │       └── Method: RightBracket
    │   │       │       │       │           └── GetVar(Kind)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: consume
    │   │       │       │       │       └── Method: Equal
    │   │       │       │       │           └── GetVar(Kind)
    │   │       │       │       ├── Def: rhs
    │   │       │       │       │   └── Method: expr
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstIndexSet
    │   │       │       │               ├── Call: AstGetField
    │   │       │       │               │   └── GetVar(name)
    │   │       │       │               ├── GetVar(indexer)
    │   │       │       │               └── GetVar(rhs)
    │   │       │       ├── Pop
    │   │       │       │   └── Native: print
    │   │       │       │       ├── String("next ")
    │   │       │       │       └── GetVar(next)
    │   │       │       └── Pop
    │   │       │           └── Native: err
    │   │       │               └── String("todo: stmt_set_field")
    │   │       ├── Method: native
    │   │       │   └── Block
    │   │       │       ├── Def: name
    │   │       │       │   └── Method: consume_identifier
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: LeftParen
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── Def: args
    │   │       │       │   └── List
    │   │       │       ├── Def: done
    │   │       │       │   └── EqualEqual
    │   │       │       │       ├── Get(kind)
    │   │       │       │       │   └── Method: peek
    │   │       │       │       │       └── Field("lexer")
    │   │       │       │       └── Method: RightParen
    │   │       │       │           └── GetVar(Kind)
    │   │       │       ├── While
    │   │       │       │   ├── Not
    │   │       │       │   │   └── GetVar(done)
    │   │       │       │   └── Block
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Native: append
    │   │       │       │       │       ├── GetVar(args)
    │   │       │       │       │       └── Method: expr
    │   │       │       │       ├── Def: token
    │   │       │       │       │   └── Get(kind)
    │   │       │       │       │       └── Method: peek
    │   │       │       │       │           └── Field("lexer")
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── GetVar(token)
    │   │       │       │       │   │   └── Method: Comma
    │   │       │       │       │   │       └── GetVar(Kind)
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Pop
    │   │       │       │       │           └── Method: consume
    │   │       │       │       │               └── Method: Comma
    │   │       │       │       │                   └── GetVar(Kind)
    │   │       │       │       └── If
    │   │       │       │           ├── EqualEqual
    │   │       │       │           │   ├── GetVar(token)
    │   │       │       │           │   └── Method: RightParen
    │   │       │       │           │       └── GetVar(Kind)
    │   │       │       │           └── Block
    │   │       │       │               └── Reassign: done
    │   │       │       │                   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: consume
    │   │       │       │       └── Method: RightParen
    │   │       │       │           └── GetVar(Kind)
    │   │       │       └── Return
    │   │       │           └── Call: AstNative
    │   │       │               ├── GetVar(name)
    │   │       │               └── GetVar(args)
    │   │       ├── Method: stmt
    │   │       │   └── Block
    │   │       │       ├── Def: token
    │   │       │       │   └── Method: peek
    │   │       │       │       └── Field("lexer")
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: LeftBrace
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: block
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Def
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: stmt_def
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: LeftBracket
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: list
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Class
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: stmt_class
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Identifier
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       ├── Def: expr
    │   │       │       │       │   └── Method: expr
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Native: print
    │   │       │       │       │       ├── String("todo: should pop if method instance or get")
    │   │       │       │       │       └── GetVar(expr)
    │   │       │       │       ├── Def: kind
    │   │       │       │       │   └── Method: kind
    │   │       │       │       │       └── GetVar(expr)
    │   │       │       │       ├── If
    │   │       │       │       │   ├── Or
    │   │       │       │       │   │   ├── EqualEqual
    │   │       │       │       │   │   │   ├── GetVar(kind)
    │   │       │       │       │   │   │   └── String("Method")
    │   │       │       │       │   │   └── Or
    │   │       │       │       │   │       ├── EqualEqual
    │   │       │       │       │   │       │   ├── GetVar(kind)
    │   │       │       │       │   │       │   └── String("Instance")
    │   │       │       │       │   │       └── EqualEqual
    │   │       │       │       │   │           ├── GetVar(kind)
    │   │       │       │       │   │           └── String("Get")
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Return
    │   │       │       │       │           └── Call: AstPop
    │   │       │       │       │               └── GetVar(expr)
    │   │       │       │       └── Return
    │   │       │       │           └── GetVar(expr)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: If
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: stmt_if
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: While
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: stmt_while
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Return
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: stmt_return
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: At
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: stmt_set_field
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Hash
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: consume
    │   │       │       │       │       └── Method: Hash
    │   │       │       │       │           └── GetVar(Kind)
    │   │       │       │       └── Return
    │   │       │       │           └── Call: AstPop
    │   │       │       │               └── Method: native
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(kind)
    │   │       │       │   │   │   └── GetVar(token)
    │   │       │       │   │   └── Method: Import
    │   │       │       │   │       └── GetVar(Kind)
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── Method: stmt_import
    │   │       │       ├── Pop
    │   │       │       │   └── Native: print
    │   │       │       │       ├── String("token")
    │   │       │       │       └── GetVar(token)
    │   │       │       └── Pop
    │   │       │           └── Native: err
    │   │       │               └── String("stmt")
    │   │       ├── Method: parse_root
    │   │       │   └── Block
    │   │       │       ├── Def: root_list
    │   │       │       │   └── List
    │   │       │       ├── While
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Method: peek
    │   │       │       │   │   │   └── Field("lexer")
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       ├── Def: node
    │   │       │       │       │   └── Method: stmt
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: append
    │   │       │       │               ├── GetVar(root_list)
    │   │       │       │               └── GetVar(node)
    │   │       │       └── Return
    │   │       │           └── Call: AstRoot
    │   │       │               └── GetVar(root_list)
    │   │       └── Method: stmt_import
    │   │           └── Block
    │   │               ├── Pop
    │   │               │   └── Method: consume
    │   │               │       └── Method: Import
    │   │               │           └── GetVar(Kind)
    │   │               ├── Pop
    │   │               │   └── Method: consume
    │   │               │       └── Method: LeftBrace
    │   │               │           └── GetVar(Kind)
    │   │               ├── Def: imports
    │   │               │   └── List
    │   │               ├── Def: token
    │   │               │   └── Method: next
    │   │               │       └── Field("lexer")
    │   │               ├── While
    │   │               │   ├── BangEqual
    │   │               │   │   ├── Get(kind)
    │   │               │   │   │   └── GetVar(token)
    │   │               │   │   └── Method: RightBrace
    │   │               │   │       └── GetVar(Kind)
    │   │               │   └── Block
    │   │               │       ├── If
    │   │               │       │   ├── EqualEqual
    │   │               │       │   │   ├── Get(kind)
    │   │               │       │   │   │   └── GetVar(token)
    │   │               │       │   │   └── Method: String
    │   │               │       │   │       └── GetVar(Kind)
    │   │               │       │   └── Block
    │   │               │       │       ├── Def: buf
    │   │               │       │       │   └── String("")
    │   │               │       │       ├── Def: split
    │   │               │       │       │   └── Native: split
    │   │               │       │       │       ├── Field("file")
    │   │               │       │       │       └── String("/")
    │   │               │       │       ├── Def: i
    │   │               │       │       │   └── Int(0)
    │   │               │       │       ├── While
    │   │               │       │       │   ├── Less
    │   │               │       │       │   │   ├── GetVar(i)
    │   │               │       │       │   │   └── Minus
    │   │               │       │       │   │       ├── Native: len
    │   │               │       │       │   │       │   └── GetVar(split)
    │   │               │       │       │   │       └── Int(1)
    │   │               │       │       │   └── Block
    │   │               │       │       │       ├── Reassign: buf
    │   │               │       │       │       │   └── Plus
    │   │               │       │       │       │       ├── GetVar(buf)
    │   │               │       │       │       │       └── Plus
    │   │               │       │       │       │           ├── Index
    │   │               │       │       │       │           │   ├── GetVar(split)
    │   │               │       │       │       │           │   └── GetVar(i)
    │   │               │       │       │       │           └── String("/")
    │   │               │       │       │       └── Reassign: i
    │   │               │       │       │           └── Plus
    │   │               │       │       │               ├── GetVar(i)
    │   │               │       │       │               └── Int(1)
    │   │               │       │       ├── Reassign: buf
    │   │               │       │       │   └── Plus
    │   │               │       │       │       ├── GetVar(buf)
    │   │               │       │       │       └── Index
    │   │               │       │       │           ├── Native: split
    │   │               │       │       │           │   ├── Get(value)
    │   │               │       │       │           │   │   └── GetVar(token)
    │   │               │       │       │           │   └── String(""")
    │   │               │       │       │           └── Int(0)
    │   │               │       │       └── Pop
    │   │               │       │           └── Native: append
    │   │               │       │               ├── GetVar(imports)
    │   │               │       │               └── GetVar(buf)
    │   │               │       └── Reassign: token
    │   │               │           └── Method: next
    │   │               │               └── Field("lexer")
    │   │               └── Return
    │   │                   └── Call: AstImport
    │   │                       └── GetVar(imports)
    │   ├── Root
    │   │   └── Class: AstPrinter
    │   │       ├── Field: indent
    │   │       ├── Field: is_last
    │   │       ├── Method: print_node
    │   │       │   └── Param: text
    │   │       │   └── Block
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── Def: ind
    │   │       │       │   └── String("")
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── Field("indent")
    │   │       │       │   └── Block
    │   │       │       │       ├── Reassign: ind
    │   │       │       │       │   └── Plus
    │   │       │       │       │       ├── GetVar(ind)
    │   │       │       │       │       └── Index
    │   │       │       │       │           ├── Field("indent")
    │   │       │       │       │           └── GetVar(i)
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Plus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       ├── If
    │   │       │       │   ├── Field("is_last")
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: print
    │   │       │       │               ├── Plus
    │   │       │       │               │   ├── GetVar(ind)
    │   │       │       │               │   └── String("L--")
    │   │       │       │               └── GetVar(text)
    │   │       │       └── If
    │   │       │           ├── Not
    │   │       │           │   └── Field("is_last")
    │   │       │           └── Block
    │   │       │               └── Pop
    │   │       │                   └── Native: print
    │   │       │                       ├── Plus
    │   │       │                       │   ├── GetVar(ind)
    │   │       │                       │   └── String("+--")
    │   │       │                       └── GetVar(text)
    │   │       ├── Method: add_indent
    │   │       │   └── Block
    │   │       │       ├── If
    │   │       │       │   ├── Field("is_last")
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: append
    │   │       │       │               ├── Field("indent")
    │   │       │       │               └── String("    ")
    │   │       │       └── If
    │   │       │           ├── Not
    │   │       │           │   └── Field("is_last")
    │   │       │           └── Block
    │   │       │               └── Pop
    │   │       │                   └── Native: append
    │   │       │                       ├── Field("indent")
    │   │       │                       └── String("|   ")
    │   │       ├── Method: pop_indent
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Native: pop
    │   │       │               └── Field("indent")
    │   │       ├── Method: loop
    │   │       │   └── Param: list
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── GetVar(list)
    │   │       │       │   └── Block
    │   │       │       │       ├── SetField(is_last)
    │   │       │       │       │   └── Bool(false)
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── GetVar(i)
    │   │       │       │       │   │   └── Minus
    │   │       │       │       │   │       ├── Native: len
    │   │       │       │       │   │       │   └── GetVar(list)
    │   │       │       │       │   │       └── Int(1)
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── SetField(is_last)
    │   │       │       │       │           └── Bool(true)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: accept
    │   │       │       │       │       ├── GetSelf
    │   │       │       │       │       └── Index
    │   │       │       │       │           ├── GetVar(list)
    │   │       │       │       │           └── GetVar(i)
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Plus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstRoot
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Root")
    │   │       │       └── Pop
    │   │       │           └── Method: loop
    │   │       │               └── Get(nodes)
    │   │       │                   └── GetVar(self)
    │   │       ├── Method: visitAstNeg
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Neg")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstNot
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Not")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstGetSelf
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: print_node
    │   │       │               └── String("GetSelf")
    │   │       ├── Method: visitAstFloat
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: print_node
    │   │       │               └── Plus
    │   │       │                   ├── String("Float(")
    │   │       │                   └── Plus
    │   │       │                       ├── Get(value)
    │   │       │                       │   └── GetVar(self)
    │   │       │                       └── String(")")
    │   │       ├── Method: visitAstInt
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: print_node
    │   │       │               └── Plus
    │   │       │                   ├── String("Int(")
    │   │       │                   └── Plus
    │   │       │                       ├── Get(value)
    │   │       │                       │   └── GetVar(self)
    │   │       │                       └── String(")")
    │   │       ├── Method: visitAstString
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: print_node
    │   │       │               └── Plus
    │   │       │                   ├── String("String(")
    │   │       │                   └── Plus
    │   │       │                       ├── Get(value)
    │   │       │                       │   └── GetVar(self)
    │   │       │                       └── String(")")
    │   │       ├── Method: visitAstGetField
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: print_node
    │   │       │               └── Plus
    │   │       │                   ├── String("Field(")
    │   │       │                   └── Plus
    │   │       │                       ├── Get(value)
    │   │       │                       │   └── GetVar(self)
    │   │       │                       └── String(")")
    │   │       ├── Method: visitAstSetField
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── Plus
    │   │       │       │           ├── String("SetField(")
    │   │       │       │           └── Plus
    │   │       │       │               ├── Get(name)
    │   │       │       │               │   └── GetVar(self)
    │   │       │       │               └── String(")")
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstList
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("List")
    │   │       │       └── Pop
    │   │       │           └── Method: loop
    │   │       │               └── Get(items)
    │   │       │                   └── GetVar(self)
    │   │       ├── Method: visitAstIndex
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Index")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(indexer)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstIndexSet
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("IndexSet")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(indexer)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstBool
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: print_node
    │   │       │               └── Plus
    │   │       │                   ├── Plus
    │   │       │                   │   ├── String("Bool(")
    │   │       │                   │   └── Native: to_string
    │   │       │                   │       └── Get(value)
    │   │       │                   │           └── GetVar(self)
    │   │       │                   └── String(")")
    │   │       ├── Method: visitAstNil
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: print_node
    │   │       │               └── String("Nil")
    │   │       ├── Method: visitAstGetVar
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: print_node
    │   │       │               └── Plus
    │   │       │                   ├── String("GetVar(")
    │   │       │                   └── Plus
    │   │       │                       ├── Get(value)
    │   │       │                       │   └── GetVar(self)
    │   │       │                       └── String(")")
    │   │       ├── Method: visitAstDef
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── Plus
    │   │       │       │           ├── String("Def: ")
    │   │       │       │           └── Get(name)
    │   │       │       │               └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstPlus
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Plus")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstMinus
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Minus")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstClass
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── Plus
    │   │       │       │           ├── String("Class: ")
    │   │       │       │           └── Get(name)
    │   │       │       │               └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── Get(fields)
    │   │       │       │   │           └── GetVar(self)
    │   │       │       │   └── Block
    │   │       │       │       ├── SetField(is_last)
    │   │       │       │       │   └── And
    │   │       │       │       │       ├── EqualEqual
    │   │       │       │       │       │   ├── Native: len
    │   │       │       │       │       │   │   └── Get(methods)
    │   │       │       │       │       │   │       └── GetVar(self)
    │   │       │       │       │       │   └── Int(0)
    │   │       │       │       │       └── EqualEqual
    │   │       │       │       │           ├── GetVar(i)
    │   │       │       │       │           └── Minus
    │   │       │       │       │               ├── Native: len
    │   │       │       │       │               │   └── Get(fields)
    │   │       │       │       │               │       └── GetVar(self)
    │   │       │       │       │               └── Int(1)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: print_node
    │   │       │       │       │       └── Plus
    │   │       │       │       │           ├── String("Field: ")
    │   │       │       │       │           └── Index
    │   │       │       │       │               ├── Get(fields)
    │   │       │       │       │               │   └── GetVar(self)
    │   │       │       │       │               └── GetVar(i)
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Plus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       ├── Reassign: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── Get(methods)
    │   │       │       │   │           └── GetVar(self)
    │   │       │       │   └── Block
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── GetVar(i)
    │   │       │       │       │   │   └── Minus
    │   │       │       │       │   │       ├── Native: len
    │   │       │       │       │   │       │   └── Get(methods)
    │   │       │       │       │   │       │       └── GetVar(self)
    │   │       │       │       │   │       └── Int(1)
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── SetField(is_last)
    │   │       │       │       │           └── Bool(true)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: print_node
    │   │       │       │       │       └── Plus
    │   │       │       │       │           ├── String("Method: ")
    │   │       │       │       │           └── Get(name)
    │   │       │       │       │               └── Index
    │   │       │       │       │                   ├── Get(methods)
    │   │       │       │       │                   │   └── GetVar(self)
    │   │       │       │       │                   └── GetVar(i)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: add_indent
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: accept
    │   │       │       │       │       ├── GetSelf
    │   │       │       │       │       └── Get(block)
    │   │       │       │       │           └── Index
    │   │       │       │       │               ├── Get(methods)
    │   │       │       │       │               │   └── GetVar(self)
    │   │       │       │       │               └── GetVar(i)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: pop_indent
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Plus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstBlock
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Block")
    │   │       │       └── Pop
    │   │       │           └── Method: loop
    │   │       │               └── Get(stmts)
    │   │       │                   └── GetVar(self)
    │   │       ├── Method: visitAstReassign
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── Plus
    │   │       │       │           ├── String("Reassign: ")
    │   │       │       │           └── Get(name)
    │   │       │       │               └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstInstance
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── Plus
    │   │       │       │           ├── String("Instance: ")
    │   │       │       │           └── Get(name)
    │   │       │       │               └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: loop
    │   │       │               └── Get(args)
    │   │       │                   └── GetVar(self)
    │   │       ├── Method: visitAstNative
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── Plus
    │   │       │       │           ├── String("Native: ")
    │   │       │       │           └── Get(name)
    │   │       │       │               └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: loop
    │   │       │               └── Get(args)
    │   │       │                   └── GetVar(self)
    │   │       ├── Method: visitAstMethod
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── Plus
    │   │       │       │           ├── String("MethodCall: ")
    │   │       │       │           └── Get(name)
    │   │       │       │               └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── And
    │   │       │       │       ├── EqualEqual
    │   │       │       │       │   ├── Get(lhs)
    │   │       │       │       │   │   └── GetVar(self)
    │   │       │       │       │   └── Nil
    │   │       │       │       └── EqualEqual
    │   │       │       │           ├── Native: len
    │   │       │       │           │   └── Get(args)
    │   │       │       │           │       └── GetVar(self)
    │   │       │       │           └── Int(0)
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── If
    │   │       │       │   ├── Greater
    │   │       │       │   │   ├── Native: len
    │   │       │       │   │   │   └── Get(args)
    │   │       │       │   │   │       └── GetVar(self)
    │   │       │       │   │   └── Int(0)
    │   │       │       │   └── Block
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: print_node
    │   │       │       │       │       └── String("Args")
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: add_indent
    │   │       │       │       ├── SetField(is_last)
    │   │       │       │       │   └── EqualEqual
    │   │       │       │       │       ├── Get(lhs)
    │   │       │       │       │       │   └── GetVar(self)
    │   │       │       │       │       └── Nil
    │   │       │       │       ├── While
    │   │       │       │       │   ├── Less
    │   │       │       │       │   │   ├── GetVar(i)
    │   │       │       │       │   │   └── Native: len
    │   │       │       │       │   │       └── Get(args)
    │   │       │       │       │   │           └── GetVar(self)
    │   │       │       │       │   └── Block
    │   │       │       │       │       ├── If
    │   │       │       │       │       │   ├── EqualEqual
    │   │       │       │       │       │   │   ├── GetVar(i)
    │   │       │       │       │       │   │   └── Minus
    │   │       │       │       │       │   │       ├── Native: len
    │   │       │       │       │       │   │       │   └── Get(args)
    │   │       │       │       │       │   │       │       └── GetVar(self)
    │   │       │       │       │       │   │       └── Int(1)
    │   │       │       │       │       │   └── Block
    │   │       │       │       │       │       └── SetField(is_last)
    │   │       │       │       │       │           └── Bool(true)
    │   │       │       │       │       ├── Pop
    │   │       │       │       │       │   └── Method: accept
    │   │       │       │       │       │       ├── GetSelf
    │   │       │       │       │       │       └── Index
    │   │       │       │       │       │           ├── Get(args)
    │   │       │       │       │       │           │   └── GetVar(self)
    │   │       │       │       │       │           └── GetVar(i)
    │   │       │       │       │       └── Reassign: i
    │   │       │       │       │           └── Plus
    │   │       │       │       │               ├── GetVar(i)
    │   │       │       │       │               └── Int(1)
    │   │       │       │       └── Pop
    │   │       │       │           └── Method: pop_indent
    │   │       │       ├── If
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Get(lhs)
    │   │       │       │   │   │   └── GetVar(self)
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       ├── SetField(is_last)
    │   │       │       │       │   └── Bool(true)
    │   │       │       │       └── Pop
    │   │       │       │           └── Method: accept
    │   │       │       │               ├── GetSelf
    │   │       │       │               └── Get(lhs)
    │   │       │       │                   └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstPop
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Pop")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstEqualEqual
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("EqualEqual")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstIf
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("If")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(condition)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(block)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstReturn
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Return")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstWhile
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("While")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(condition)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(block)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstOr
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Or")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstAnd
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("And")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstBangEqual
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("BangEqual")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstGreater
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Greater")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstGreaterEqual
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("GreaterEqual")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstLess
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("Less")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstLessEqual
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── String("LessEqual")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(false)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── SetField(is_last)
    │   │       │       │   └── Bool(true)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       ├── Method: visitAstGet
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: print_node
    │   │       │       │       └── Plus
    │   │       │       │           ├── String("Get(")
    │   │       │       │           └── Plus
    │   │       │       │               ├── Get(field)
    │   │       │       │               │   └── GetVar(self)
    │   │       │       │               └── String(")")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: add_indent
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: pop_indent
    │   │       └── Method: visitAstSet
    │   │           └── Param: self
    │   │           └── Block
    │   │               ├── Pop
    │   │               │   └── Method: print_node
    │   │               │       └── Plus
    │   │               │           ├── String("Set(")
    │   │               │           └── Plus
    │   │               │               ├── Get(field)
    │   │               │               │   └── GetVar(self)
    │   │               │               └── String(")")
    │   │               ├── Pop
    │   │               │   └── Method: add_indent
    │   │               ├── SetField(is_last)
    │   │               │   └── Bool(false)
    │   │               ├── Pop
    │   │               │   └── Method: accept
    │   │               │       ├── GetSelf
    │   │               │       └── Get(lhs)
    │   │               │           └── GetVar(self)
    │   │               ├── SetField(is_last)
    │   │               │   └── Bool(true)
    │   │               ├── Pop
    │   │               │   └── Method: accept
    │   │               │       ├── GetSelf
    │   │               │       └── Get(rhs)
    │   │               │           └── GetVar(self)
    │   │               └── Pop
    │   │                   └── Method: pop_indent
    │   ├── Root
    │   │   ├── Class: Local
    │   │   │   ├── Field: name
    │   │   │   ├── Field: depth
    │   │   │   └── Field: stack_pos
    │   │   ├── Class: CompilerClass
    │   │   │   ├── Field: name
    │   │   │   ├── Field: fields
    │   │   │   └── Field: methods
    │   │   ├── Class: CompilerMethod
    │   │   │   ├── Field: name
    │   │   │   └── Field: code_start
    │   │   └── Class: Compiler
    │   │       ├── Field: code
    │   │       ├── Field: strings
    │   │       ├── Field: variables
    │   │       ├── Field: depth
    │   │       ├── Field: classes
    │   │       ├── Field: current_fields
    │   │       ├── Field: current_class_name
    │   │       ├── Method: init
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Native: print
    │   │       │       │       └── String("init compiler")
    │   │       │       ├── SetField(code)
    │   │       │       │   └── List
    │   │       │       ├── SetField(strings)
    │   │       │       │   └── List
    │   │       │       ├── SetField(variables)
    │   │       │       │   └── List
    │   │       │       │       └── List
    │   │       │       ├── SetField(depth)
    │   │       │       │   └── Int(0)
    │   │       │       ├── SetField(classes)
    │   │       │       │   └── List
    │   │       │       ├── SetField(current_fields)
    │   │       │       │   └── Nil
    │   │       │       └── SetField(current_class_name)
    │   │       │           └── Nil
    │   │       ├── Method: find_class
    │   │       │   └── Param: name
    │   │       │   └── Block
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── Field("classes")
    │   │       │       │   └── Block
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── GetVar(name)
    │   │       │       │       │   │   └── Get(name)
    │   │       │       │       │   │       └── Index
    │   │       │       │       │   │           ├── Field("classes")
    │   │       │       │       │   │           └── GetVar(i)
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Return
    │   │       │       │       │           └── Index
    │   │       │       │       │               ├── Field("classes")
    │   │       │       │       │               └── GetVar(i)
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Plus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       └── Return
    │   │       │           └── Nil
    │   │       ├── Method: push_code
    │   │       │   └── Param: code
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Native: append
    │   │       │               ├── Field("code")
    │   │       │               └── GetVar(code)
    │   │       ├── Method: begin_method
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Native: append
    │   │       │       │       ├── Field("variables")
    │   │       │       │       └── List
    │   │       │       └── SetField(depth)
    │   │       │           └── Plus
    │   │       │               ├── Field("depth")
    │   │       │               └── Int(1)
    │   │       ├── Method: end_method
    │   │       │   └── Block
    │   │       │       ├── Def: w
    │   │       │       │   └── Native: pop
    │   │       │       │       └── Field("variables")
    │   │       │       └── SetField(depth)
    │   │       │           └── Minus
    │   │       │               ├── Field("depth")
    │   │       │               └── Int(1)
    │   │       ├── Method: begin_scope
    │   │       │   └── Block
    │   │       │       └── SetField(depth)
    │   │       │           └── Plus
    │   │       │               ├── Field("depth")
    │   │       │               └── Int(1)
    │   │       ├── Method: end_scope
    │   │       │   └── Block
    │   │       │       ├── Def: last_vars
    │   │       │       │   └── Native: pop
    │   │       │       │       └── Field("variables")
    │   │       │       ├── Def: len
    │   │       │       │   └── Native: len
    │   │       │       │       └── GetVar(last_vars)
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── Def: new_vars
    │   │       │       │   └── List
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── GetVar(len)
    │   │       │       │   └── Block
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Get(depth)
    │   │       │       │       │   │   │   └── Index
    │   │       │       │       │   │   │       ├── GetVar(last_vars)
    │   │       │       │       │   │   │       └── GetVar(i)
    │   │       │       │       │   │   └── Field("depth")
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Pop
    │   │       │       │       │           └── Method: push_code
    │   │       │       │       │               └── String("Pop")
    │   │       │       │       ├── If
    │   │       │       │       │   ├── BangEqual
    │   │       │       │       │   │   ├── Get(depth)
    │   │       │       │       │   │   │   └── Index
    │   │       │       │       │   │   │       ├── GetVar(last_vars)
    │   │       │       │       │   │   │       └── GetVar(i)
    │   │       │       │       │   │   └── Field("depth")
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Pop
    │   │       │       │       │           └── Native: append
    │   │       │       │       │               ├── GetVar(new_vars)
    │   │       │       │       │               └── Index
    │   │       │       │       │                   ├── GetVar(last_vars)
    │   │       │       │       │                   └── GetVar(i)
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Plus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       ├── SetField(depth)
    │   │       │       │   └── Minus
    │   │       │       │       ├── Field("depth")
    │   │       │       │       └── Int(1)
    │   │       │       └── Pop
    │   │       │           └── Native: append
    │   │       │               ├── Field("variables")
    │   │       │               └── GetVar(new_vars)
    │   │       ├── Method: add_local
    │   │       │   └── Param: name
    │   │       │   └── Block
    │   │       │       ├── Def: ll
    │   │       │       │   └── Minus
    │   │       │       │       ├── Native: len
    │   │       │       │       │   └── Field("variables")
    │   │       │       │       └── Int(1)
    │   │       │       ├── Def: vars
    │   │       │       │   └── Index
    │   │       │       │       ├── Field("variables")
    │   │       │       │       └── Minus
    │   │       │       │           ├── Native: len
    │   │       │       │           │   └── Field("variables")
    │   │       │       │           └── Int(1)
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── Def: res
    │   │       │       │   └── Nil
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── GetVar(vars)
    │   │       │       │   └── Block
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Get(name)
    │   │       │       │       │   │   │   └── Index
    │   │       │       │       │   │   │       ├── GetVar(vars)
    │   │       │       │       │   │   │       └── GetVar(i)
    │   │       │       │       │   │   └── GetVar(name)
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Pop
    │   │       │       │       │           └── Native: err
    │   │       │       │       │               └── Plus
    │   │       │       │       │                   ├── Plus
    │   │       │       │       │                   │   ├── String("var with name: ")
    │   │       │       │       │                   │   └── GetVar(name)
    │   │       │       │       │                   └── String(" already exists")
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Plus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       ├── Pop
    │   │       │       │   └── Native: print
    │   │       │       │       └── String("the wierd ll thing probably should not be here")
    │   │       │       └── Pop
    │   │       │           └── Native: append
    │   │       │               ├── GetVar(vars)
    │   │       │               └── Call: Local
    │   │       │                   ├── GetVar(name)
    │   │       │                   ├── Field("depth")
    │   │       │                   └── Plus
    │   │       │                       ├── Native: len
    │   │       │                       │   └── GetVar(vars)
    │   │       │                       └── GetVar(ll)
    │   │       ├── Method: get_local
    │   │       │   └── Param: name
    │   │       │   └── Block
    │   │       │       ├── Def: vars
    │   │       │       │   └── Index
    │   │       │       │       ├── Field("variables")
    │   │       │       │       └── Minus
    │   │       │       │           ├── Native: len
    │   │       │       │           │   └── Field("variables")
    │   │       │       │           └── Int(1)
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── GetVar(vars)
    │   │       │       │   └── Block
    │   │       │       │       ├── If
    │   │       │       │       │   ├── EqualEqual
    │   │       │       │       │   │   ├── Get(name)
    │   │       │       │       │   │   │   └── Index
    │   │       │       │       │   │   │       ├── GetVar(vars)
    │   │       │       │       │   │   │       └── GetVar(i)
    │   │       │       │       │   │   └── GetVar(name)
    │   │       │       │       │   └── Block
    │   │       │       │       │       └── Return
    │   │       │       │       │           └── Get(stack_pos)
    │   │       │       │       │               └── Index
    │   │       │       │       │                   ├── GetVar(vars)
    │   │       │       │       │                   └── GetVar(i)
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Plus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       └── Return
    │   │       │           └── Nil
    │   │       ├── Method: compile_list
    │   │       │   └── Param: items
    │   │       │   └── Block
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       └── While
    │   │       │           ├── Less
    │   │       │           │   ├── GetVar(i)
    │   │       │           │   └── Native: len
    │   │       │           │       └── GetVar(items)
    │   │       │           └── Block
    │   │       │               ├── Pop
    │   │       │               │   └── Method: accept
    │   │       │               │       ├── GetSelf
    │   │       │               │       └── Index
    │   │       │               │           ├── GetVar(items)
    │   │       │               │           └── GetVar(i)
    │   │       │               └── Reassign: i
    │   │       │                   └── Plus
    │   │       │                       ├── GetVar(i)
    │   │       │                       └── Int(1)
    │   │       ├── Method: native
    │   │       │   └── Param: name
    │   │       │   └── Block
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("print")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(0)
    │   │       │       │               └── Int(1)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("to_string")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(1)
    │   │       │       │               └── Int(1)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("read_file")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(2)
    │   │       │       │               └── Int(1)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("len")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(3)
    │   │       │       │               └── Int(1)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("err")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(4)
    │   │       │       │               └── Int(1)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("append")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(5)
    │   │       │       │               └── Int(2)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("pop")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(6)
    │   │       │       │               └── Int(1)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("compile")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(7)
    │   │       │       │               └── Int(2)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("args")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(8)
    │   │       │       │               └── Int(1)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(name)
    │   │       │       │   │   └── String("split")
    │   │       │       │   └── Block
    │   │       │       │       └── Return
    │   │       │       │           └── List
    │   │       │       │               ├── Int(9)
    │   │       │       │               └── Int(2)
    │   │       │       └── Pop
    │   │       │           └── Native: err
    │   │       │               └── Plus
    │   │       │                   ├── String("no native function with name: ")
    │   │       │                   └── GetVar(name)
    │   │       ├── Method: visitAstRoot
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: begin_scope
    │   │       │       ├── Pop
    │   │       │       │   └── Method: compile_list
    │   │       │       │       └── Get(nodes)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: end_scope
    │   │       ├── Method: visitAstNeg
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Neg")
    │   │       ├── Method: visitAstNot
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Not")
    │   │       ├── Method: visitAstFloat
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── Plus
    │   │       │                   │   ├── String("PushFloat(")
    │   │       │                   │   └── Native: to_string
    │   │       │                   │       └── Get(value)
    │   │       │                   │           └── GetVar(self)
    │   │       │                   └── String(")")
    │   │       ├── Method: visitAstInt
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── Plus
    │   │       │                   │   ├── String("PushInt(")
    │   │       │                   │   └── Native: to_string
    │   │       │                   │       └── Get(value)
    │   │       │                   │           └── GetVar(self)
    │   │       │                   └── String(")")
    │   │       ├── Method: visitAstString
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: push_code
    │   │       │       │       └── Plus
    │   │       │       │           ├── Plus
    │   │       │       │           │   ├── String("PushString(")
    │   │       │       │           │   └── Native: to_string
    │   │       │       │           │       └── Native: len
    │   │       │       │           │           └── Field("strings")
    │   │       │       │           └── String(")")
    │   │       │       └── Pop
    │   │       │           └── Native: append
    │   │       │               ├── Field("strings")
    │   │       │               └── Get(value)
    │   │       │                   └── GetVar(self)
    │   │       ├── Method: visitAstGetField
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── String("GetField(")
    │   │       │                   └── Plus
    │   │       │                       ├── Get(value)
    │   │       │                       │   └── GetVar(self)
    │   │       │                       └── String(")")
    │   │       ├── Method: visitAstSetField
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── String("SetField(")
    │   │       │                   └── Plus
    │   │       │                       ├── Get(name)
    │   │       │                       │   └── GetVar(self)
    │   │       │                       └── String(")")
    │   │       ├── Method: visitAstList
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: compile_list
    │   │       │       │       └── Get(items)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── Plus
    │   │       │                   │   ├── String("List(")
    │   │       │                   │   └── Native: to_string
    │   │       │                   │       └── Native: len
    │   │       │                   │           └── Get(items)
    │   │       │                   │               └── GetVar(self)
    │   │       │                   └── String(")")
    │   │       ├── Method: visitAstIndex
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(indexer)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("IndexGet")
    │   │       ├── Method: visitAstIndexSet
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(indexer)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("IndexSet")
    │   │       ├── Method: visitAstBool
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── Plus
    │   │       │                   │   ├── String("PushBool(")
    │   │       │                   │   └── Native: to_string
    │   │       │                   │       └── Get(value)
    │   │       │                   │           └── GetVar(self)
    │   │       │                   └── String(")")
    │   │       ├── Method: visitAstNil
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("PushNil")
    │   │       ├── Method: visitAstGetVar
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Def: local
    │   │       │       │   └── Method: get_local
    │   │       │       │       └── Get(value)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── If
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── GetVar(local)
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Method: push_code
    │   │       │       │               └── Plus
    │   │       │       │                   ├── Plus
    │   │       │       │                   │   ├── String("GetLocal(")
    │   │       │       │                   │   └── Native: to_string
    │   │       │       │                   │       └── GetVar(local)
    │   │       │       │                   └── String(")")
    │   │       │       └── If
    │   │       │           ├── EqualEqual
    │   │       │           │   ├── GetVar(local)
    │   │       │           │   └── Nil
    │   │       │           └── Block
    │   │       │               ├── Def: klass
    │   │       │               │   └── Method: find_class
    │   │       │               │       └── Get(value)
    │   │       │               │           └── GetVar(self)
    │   │       │               ├── If
    │   │       │               │   ├── EqualEqual
    │   │       │               │   │   ├── GetVar(klass)
    │   │       │               │   │   └── Nil
    │   │       │               │   └── Block
    │   │       │               │       └── Pop
    │   │       │               │           └── Native: err
    │   │       │               │               └── String("class should not be nil")
    │   │       │               ├── If
    │   │       │               │   ├── BangEqual
    │   │       │               │   │   ├── Native: len
    │   │       │               │   │   │   └── Get(fields)
    │   │       │               │   │   │       └── GetVar(klass)
    │   │       │               │   │   └── Int(0)
    │   │       │               │   └── Block
    │   │       │               │       └── Pop
    │   │       │               │           └── Native: err
    │   │       │               │               └── String("trying to call class without arguments? todo?")
    │   │       │               ├── Def: method_names
    │   │       │               │   └── List
    │   │       │               ├── Def: method_starts
    │   │       │               │   └── List
    │   │       │               ├── Def: i
    │   │       │               │   └── Int(0)
    │   │       │               ├── While
    │   │       │               │   ├── Less
    │   │       │               │   │   ├── GetVar(i)
    │   │       │               │   │   └── Native: len
    │   │       │               │   │       └── Get(methods)
    │   │       │               │   │           └── GetVar(klass)
    │   │       │               │   └── Block
    │   │       │               │       ├── Pop
    │   │       │               │       │   └── Native: append
    │   │       │               │       │       ├── GetVar(method_names)
    │   │       │               │       │       └── Get(name)
    │   │       │               │       │           └── Index
    │   │       │               │       │               ├── Get(methods)
    │   │       │               │       │               │   └── GetVar(klass)
    │   │       │               │       │               └── GetVar(i)
    │   │       │               │       ├── Pop
    │   │       │               │       │   └── Native: append
    │   │       │               │       │       ├── GetVar(method_starts)
    │   │       │               │       │       └── Get(code_start)
    │   │       │               │       │           └── Index
    │   │       │               │       │               ├── Get(methods)
    │   │       │               │       │               │   └── GetVar(klass)
    │   │       │               │       │               └── GetVar(i)
    │   │       │               │       └── Reassign: i
    │   │       │               │           └── Plus
    │   │       │               │               ├── GetVar(i)
    │   │       │               │               └── Int(1)
    │   │       │               └── Pop
    │   │       │                   └── Method: push_code
    │   │       │                       └── Plus
    │   │       │                           ├── Plus
    │   │       │                           │   ├── Plus
    │   │       │                           │   │   ├── Plus
    │   │       │                           │   │   │   ├── String("Instance([], ")
    │   │       │                           │   │   │   └── Native: to_string
    │   │       │                           │   │   │       └── GetVar(method_names)
    │   │       │                           │   │   └── String(", ")
    │   │       │                           │   └── Native: to_string
    │   │       │                           │       └── GetVar(method_starts)
    │   │       │                           └── String(")")
    │   │       ├── Method: visitAstGetSelf
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("PushSelf")
    │   │       ├── Method: visitAstDef
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: add_local
    │   │       │               └── Get(name)
    │   │       │                   └── GetVar(self)
    │   │       ├── Method: visitAstPlus
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Plus")
    │   │       ├── Method: visitAstMinus
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Minus")
    │   │       ├── Method: visitAstClass
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── SetField(current_class_name)
    │   │       │       │   └── Get(name)
    │   │       │       │       └── GetVar(self)
    │   │       │       ├── SetField(current_fields)
    │   │       │       │   └── Get(fields)
    │   │       │       │       └── GetVar(self)
    │   │       │       ├── Def: jump
    │   │       │       │   └── Native: len
    │   │       │       │       └── Field("code")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: push_code
    │   │       │       │       └── String("Jump()")
    │   │       │       ├── If
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Method: find_class
    │   │       │       │   │   │   └── Get(name)
    │   │       │       │   │   │       └── GetVar(self)
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: err
    │   │       │       │               └── Plus
    │   │       │       │                   ├── String("Class '")
    │   │       │       │                   └── Plus
    │   │       │       │                       ├── Get(name)
    │   │       │       │                       │   └── GetVar(self)
    │   │       │       │                       └── String("' is already defined")
    │   │       │       ├── Def: methods
    │   │       │       │   └── List
    │   │       │       ├── Def: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── Get(methods)
    │   │       │       │   │           └── GetVar(self)
    │   │       │       │   └── Block
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: begin_method
    │   │       │       │       ├── Def: method
    │   │       │       │       │   └── Index
    │   │       │       │       │       ├── Get(methods)
    │   │       │       │       │       │   └── GetVar(self)
    │   │       │       │       │       └── GetVar(i)
    │   │       │       │       ├── Def: j
    │   │       │       │       │   └── Int(0)
    │   │       │       │       ├── While
    │   │       │       │       │   ├── Less
    │   │       │       │       │   │   ├── GetVar(j)
    │   │       │       │       │   │   └── Native: len
    │   │       │       │       │   │       └── Get(params)
    │   │       │       │       │   │           └── GetVar(method)
    │   │       │       │       │   └── Block
    │   │       │       │       │       ├── Pop
    │   │       │       │       │       │   └── Method: add_local
    │   │       │       │       │       │       └── Index
    │   │       │       │       │       │           ├── Get(params)
    │   │       │       │       │       │           │   └── GetVar(method)
    │   │       │       │       │       │           └── GetVar(j)
    │   │       │       │       │       └── Reassign: j
    │   │       │       │       │           └── Plus
    │   │       │       │       │               ├── GetVar(j)
    │   │       │       │       │               └── Int(1)
    │   │       │       │       ├── Def: code_start
    │   │       │       │       │   └── Native: len
    │   │       │       │       │       └── Field("code")
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: accept
    │   │       │       │       │       ├── GetSelf
    │   │       │       │       │       └── Get(block)
    │   │       │       │       │           └── GetVar(method)
    │   │       │       │       ├── Def: cm
    │   │       │       │       │   └── Call: CompilerMethod
    │   │       │       │       │       ├── Get(name)
    │   │       │       │       │       │   └── GetVar(method)
    │   │       │       │       │       └── GetVar(code_start)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Native: append
    │   │       │       │       │       ├── GetVar(methods)
    │   │       │       │       │       └── GetVar(cm)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: push_code
    │   │       │       │       │       └── String("PushNil")
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Method: push_code
    │   │       │       │       │       └── String("Return")
    │   │       │       │       ├── Reassign: i
    │   │       │       │       │   └── Plus
    │   │       │       │       │       ├── GetVar(i)
    │   │       │       │       │       └── Int(1)
    │   │       │       │       └── Pop
    │   │       │       │           └── Method: end_method
    │   │       │       ├── Def: end
    │   │       │       │   └── Native: len
    │   │       │       │       └── Field("code")
    │   │       │       ├── IndexSet
    │   │       │       │   ├── Field("code")
    │   │       │       │   ├── GetVar(jump)
    │   │       │       │   └── Plus
    │   │       │       │       ├── Plus
    │   │       │       │       │   ├── String("Jump(")
    │   │       │       │       │   └── Native: to_string
    │   │       │       │       │       └── GetVar(end)
    │   │       │       │       └── String(")")
    │   │       │       ├── SetField(current_class_name)
    │   │       │       │   └── Nil
    │   │       │       ├── SetField(current_fields)
    │   │       │       │   └── Nil
    │   │       │       ├── Def: klass
    │   │       │       │   └── Call: CompilerClass
    │   │       │       │       ├── Get(name)
    │   │       │       │       │   └── GetVar(self)
    │   │       │       │       ├── Get(fields)
    │   │       │       │       │   └── GetVar(self)
    │   │       │       │       └── GetVar(methods)
    │   │       │       └── Pop
    │   │       │           └── Native: append
    │   │       │               ├── Field("classes")
    │   │       │               └── GetVar(klass)
    │   │       ├── Method: visitAstBlock
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: begin_scope
    │   │       │       ├── Pop
    │   │       │       │   └── Method: compile_list
    │   │       │       │       └── Get(stmts)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: end_scope
    │   │       ├── Method: visitAstReassign
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Def: local
    │   │       │       │   └── Method: get_local
    │   │       │       │       └── Get(name)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(local)
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: err
    │   │       │       │               └── Plus
    │   │       │       │                   ├── String("Could not find variable: ")
    │   │       │       │                   └── Get(name)
    │   │       │       │                       └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── Plus
    │   │       │                   │   ├── String("SetLocal(")
    │   │       │                   │   └── Native: to_string
    │   │       │                   │       └── GetVar(local)
    │   │       │                   └── String(")")
    │   │       ├── Method: visitAstInstance
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Def: klass
    │   │       │       │   └── Method: find_class
    │   │       │       │       └── Get(name)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── GetVar(klass)
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: err
    │   │       │       │               └── Plus
    │   │       │       │                   ├── String("Could not find class: ")
    │   │       │       │                   └── Get(name)
    │   │       │       │                       └── GetVar(self)
    │   │       │       ├── If
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Native: len
    │   │       │       │   │   │   └── Get(fields)
    │   │       │       │   │   │       └── GetVar(klass)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── Get(args)
    │   │       │       │   │           └── GetVar(self)
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: err
    │   │       │       │               └── String("Arity does not match")
    │   │       │       ├── Def: fields_rev
    │   │       │       │   └── List
    │   │       │       ├── Def: i
    │   │       │       │   └── Minus
    │   │       │       │       ├── Native: len
    │   │       │       │       │   └── Get(fields)
    │   │       │       │       │       └── GetVar(klass)
    │   │       │       │       └── Int(1)
    │   │       │       ├── While
    │   │       │       │   ├── GreaterEqual
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Int(0)
    │   │       │       │   └── Block
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Native: append
    │   │       │       │       │       ├── GetVar(fields_rev)
    │   │       │       │       │       └── Index
    │   │       │       │       │           ├── Get(fields)
    │   │       │       │       │           │   └── GetVar(klass)
    │   │       │       │       │           └── GetVar(i)
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Minus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       ├── Def: names
    │   │       │       │   └── List
    │   │       │       ├── Def: starts
    │   │       │       │   └── List
    │   │       │       ├── Reassign: i
    │   │       │       │   └── Int(0)
    │   │       │       ├── While
    │   │       │       │   ├── Less
    │   │       │       │   │   ├── GetVar(i)
    │   │       │       │   │   └── Native: len
    │   │       │       │   │       └── Get(methods)
    │   │       │       │   │           └── GetVar(klass)
    │   │       │       │   └── Block
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Native: append
    │   │       │       │       │       ├── GetVar(names)
    │   │       │       │       │       └── Get(name)
    │   │       │       │       │           └── Index
    │   │       │       │       │               ├── Get(methods)
    │   │       │       │       │               │   └── GetVar(klass)
    │   │       │       │       │               └── GetVar(i)
    │   │       │       │       ├── Pop
    │   │       │       │       │   └── Native: append
    │   │       │       │       │       ├── GetVar(starts)
    │   │       │       │       │       └── Get(code_start)
    │   │       │       │       │           └── Index
    │   │       │       │       │               ├── Get(methods)
    │   │       │       │       │               │   └── GetVar(klass)
    │   │       │       │       │               └── GetVar(i)
    │   │       │       │       └── Reassign: i
    │   │       │       │           └── Plus
    │   │       │       │               ├── GetVar(i)
    │   │       │       │               └── Int(1)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: compile_list
    │   │       │       │       └── Get(args)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── Plus
    │   │       │                   │   ├── Plus
    │   │       │                   │   │   ├── Plus
    │   │       │                   │   │   │   ├── Plus
    │   │       │                   │   │   │   │   ├── Plus
    │   │       │                   │   │   │   │   │   ├── String("Instance(")
    │   │       │                   │   │   │   │   │   └── Native: to_string
    │   │       │                   │   │   │   │   │       └── GetVar(fields_rev)
    │   │       │                   │   │   │   │   └── String(", ")
    │   │       │                   │   │   │   └── Native: to_string
    │   │       │                   │   │   │       └── GetVar(names)
    │   │       │                   │   │   └── String(", ")
    │   │       │                   │   └── Native: to_string
    │   │       │                   │       └── GetVar(starts)
    │   │       │                   └── String(")")
    │   │       ├── Method: visitAstNative
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Def: fn_info
    │   │       │       │   └── Method: native
    │   │       │       │       └── Get(name)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── If
    │   │       │       │   ├── And
    │   │       │       │   │   ├── BangEqual
    │   │       │       │   │   │   ├── Get(name)
    │   │       │       │   │   │   │   └── GetVar(self)
    │   │       │       │   │   │   └── String("print")
    │   │       │       │   │   └── BangEqual
    │   │       │       │   │       ├── Native: len
    │   │       │       │   │       │   └── Get(args)
    │   │       │       │   │       │       └── GetVar(self)
    │   │       │       │   │       └── Index
    │   │       │       │   │           ├── GetVar(fn_info)
    │   │       │       │   │           └── Int(1)
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Native: err
    │   │       │       │               └── String("arity does not match")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: compile_list
    │   │       │       │       └── Get(args)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(name)
    │   │       │       │   │   │   └── GetVar(self)
    │   │       │       │   │   └── String("print")
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Method: push_code
    │   │       │       │               └── Plus
    │   │       │       │                   ├── Plus
    │   │       │       │                   │   ├── String("Print(")
    │   │       │       │                   │   └── Native: to_string
    │   │       │       │                   │       └── Native: len
    │   │       │       │                   │           └── Get(args)
    │   │       │       │                   │               └── GetVar(self)
    │   │       │       │                   └── String(")")
    │   │       │       └── If
    │   │       │           ├── BangEqual
    │   │       │           │   ├── Get(name)
    │   │       │           │   │   └── GetVar(self)
    │   │       │           │   └── String("print")
    │   │       │           └── Block
    │   │       │               └── Pop
    │   │       │                   └── Method: push_code
    │   │       │                       └── Plus
    │   │       │                           ├── Plus
    │   │       │                           │   ├── String("Native(")
    │   │       │                           │   └── Native: to_string
    │   │       │                           │       └── Index
    │   │       │                           │           ├── GetVar(fn_info)
    │   │       │                           │           └── Int(0)
    │   │       │                           └── String(")")
    │   │       ├── Method: visitAstMethod
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── If
    │   │       │       │   ├── BangEqual
    │   │       │       │   │   ├── Get(lhs)
    │   │       │       │   │   │   └── GetVar(self)
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Method: accept
    │   │       │       │               ├── GetSelf
    │   │       │       │               └── Get(lhs)
    │   │       │       │                   └── GetVar(self)
    │   │       │       ├── If
    │   │       │       │   ├── EqualEqual
    │   │       │       │   │   ├── Get(lhs)
    │   │       │       │   │   │   └── GetVar(self)
    │   │       │       │   │   └── Nil
    │   │       │       │   └── Block
    │   │       │       │       └── Pop
    │   │       │       │           └── Method: push_code
    │   │       │       │               └── String("PushSelf")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: compile_list
    │   │       │       │       └── Get(args)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── String("Call(")
    │   │       │                   └── Plus
    │   │       │                       ├── Plus
    │   │       │                       │   ├── Plus
    │   │       │                       │   │   ├── Get(name)
    │   │       │                       │   │   │   └── GetVar(self)
    │   │       │                       │   │   └── String(", ")
    │   │       │                       │   └── Native: to_string
    │   │       │                       │       └── Plus
    │   │       │                       │           ├── Native: len
    │   │       │                       │           │   └── Get(args)
    │   │       │                       │           │       └── GetVar(self)
    │   │       │                       │           └── Int(1)
    │   │       │                       └── String(")")
    │   │       ├── Method: visitAstPop
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Pop")
    │   │       ├── Method: visitAstEqualEqual
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Equals")
    │   │       ├── Method: visitAstIf
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(condition)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Def: skip_jump
    │   │       │       │   └── Native: len
    │   │       │       │       └── Field("code")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: push_code
    │   │       │       │       └── String("TEMP")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(block)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Def: end
    │   │       │       │   └── Native: len
    │   │       │       │       └── Field("code")
    │   │       │       └── IndexSet
    │   │       │           ├── Field("code")
    │   │       │           ├── GetVar(skip_jump)
    │   │       │           └── Plus
    │   │       │               ├── Plus
    │   │       │               │   ├── String("JumpIfFalse(")
    │   │       │               │   └── Native: to_string
    │   │       │               │       └── GetVar(end)
    │   │       │               └── String(")")
    │   │       ├── Method: visitAstReturn
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(expr)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Return")
    │   │       ├── Method: visitAstWhile
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Def: loop_start
    │   │       │       │   └── Native: len
    │   │       │       │       └── Field("code")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(condition)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Def: exit_jump
    │   │       │       │   └── Native: len
    │   │       │       │       └── Field("code")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: push_code
    │   │       │       │       └── String("JumpIfFalse()")
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(block)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: push_code
    │   │       │       │       └── Plus
    │   │       │       │           ├── Plus
    │   │       │       │           │   ├── String("Jump(")
    │   │       │       │           │   └── Native: to_string
    │   │       │       │           │       └── GetVar(loop_start)
    │   │       │       │           └── String(")")
    │   │       │       └── IndexSet
    │   │       │           ├── Field("code")
    │   │       │           ├── GetVar(exit_jump)
    │   │       │           └── Plus
    │   │       │               ├── Plus
    │   │       │               │   ├── String("JumpIfFalse(")
    │   │       │               │   └── Native: to_string
    │   │       │               │       └── Native: len
    │   │       │               │           └── Field("code")
    │   │       │               └── String(")")
    │   │       ├── Method: visitAstOr
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Or")
    │   │       ├── Method: visitAstAnd
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("And")
    │   │       ├── Method: visitAstBangEqual
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("NotEquals")
    │   │       ├── Method: visitAstGreater
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Greater")
    │   │       ├── Method: visitAstGreaterEqual
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("GreaterEqual")
    │   │       ├── Method: visitAstLess
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("Less")
    │   │       ├── Method: visitAstLessEqual
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(rhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── String("LessEqual")
    │   │       ├── Method: visitAstGet
    │   │       │   └── Param: self
    │   │       │   └── Block
    │   │       │       ├── Pop
    │   │       │       │   └── Method: accept
    │   │       │       │       ├── GetSelf
    │   │       │       │       └── Get(lhs)
    │   │       │       │           └── GetVar(self)
    │   │       │       └── Pop
    │   │       │           └── Method: push_code
    │   │       │               └── Plus
    │   │       │                   ├── String("Get(")
    │   │       │                   └── Plus
    │   │       │                       ├── Get(field)
    │   │       │                       │   └── GetVar(self)
    │   │       │                       └── String(")")
    │   │       └── Method: visitAstSet
    │   │           └── Param: self
    │   │           └── Block
    │   │               ├── Pop
    │   │               │   └── Method: accept
    │   │               │       ├── GetSelf
    │   │               │       └── Get(lhs)
    │   │               │           └── GetVar(self)
    │   │               ├── Pop
    │   │               │   └── Method: accept
    │   │               │       ├── GetSelf
    │   │               │       └── Get(rhs)
    │   │               │           └── GetVar(self)
    │   │               └── Pop
    │   │                   └── Method: push_code
    │   │                       └── Plus
    │   │                           ├── String("Set(")
    │   │                           └── Plus
    │   │                               ├── Get(field)
    │   │                               │   └── GetVar(self)
    │   │                               └── String(")")
    │   └── Root
    │       └── Class: ImportResolver
    │           ├── Method: visitAstRoot
    │           │   └── Param: self
    │           │   └── Block
    │           │       ├── Def: i
    │           │       │   └── Int(0)
    │           │       └── While
    │           │           ├── Less
    │           │           │   ├── GetVar(i)
    │           │           │   └── Native: len
    │           │           │       └── Get(nodes)
    │           │           │           └── GetVar(self)
    │           │           └── Block
    │           │               ├── Pop
    │           │               │   └── Native: print
    │           │               │       ├── String("while loop: ")
    │           │               │       └── GetVar(i)
    │           │               ├── Pop
    │           │               │   └── Native: print
    │           │               │       ├── String("node:")
    │           │               │       └── Index
    │           │               │           ├── Get(nodes)
    │           │               │           │   └── GetVar(self)
    │           │               │           └── GetVar(i)
    │           │               ├── Def: is_import
    │           │               │   └── Method: accept
    │           │               │       ├── GetSelf
    │           │               │       └── Index
    │           │               │           ├── Get(nodes)
    │           │               │           │   └── GetVar(self)
    │           │               │           └── GetVar(i)
    │           │               ├── If
    │           │               │   ├── GetVar(is_import)
    │           │               │   └── Block
    │           │               │       ├── Pop
    │           │               │       │   └── Native: print
    │           │               │       │       └── String("its an import!")
    │           │               │       ├── Def: imports
    │           │               │       │   └── List
    │           │               │       ├── Def: j
    │           │               │       │   └── Int(0)
    │           │               │       ├── While
    │           │               │       │   ├── Less
    │           │               │       │   │   ├── GetVar(j)
    │           │               │       │   │   └── Native: len
    │           │               │       │   │       └── Get(imports)
    │           │               │       │   │           └── Index
    │           │               │       │   │               ├── Get(nodes)
    │           │               │       │   │               │   └── GetVar(self)
    │           │               │       │   │               └── GetVar(i)
    │           │               │       │   └── Block
    │           │               │       │       ├── Pop
    │           │               │       │       │   └── Native: print
    │           │               │       │       │       ├── String("import")
    │           │               │       │       │       └── Index
    │           │               │       │       │           ├── Get(imports)
    │           │               │       │       │           │   └── Index
    │           │               │       │       │           │       ├── Get(nodes)
    │           │               │       │       │           │       │   └── GetVar(self)
    │           │               │       │       │           │       └── GetVar(i)
    │           │               │       │       │           └── GetVar(j)
    │           │               │       │       ├── Def: file
    │           │               │       │       │   └── Index
    │           │               │       │       │       ├── Get(imports)
    │           │               │       │       │       │   └── Index
    │           │               │       │       │       │       ├── Get(nodes)
    │           │               │       │       │       │       │   └── GetVar(self)
    │           │               │       │       │       │       └── GetVar(i)
    │           │               │       │       │       └── GetVar(j)
    │           │               │       │       ├── Def: input
    │           │               │       │       │   └── Native: read_file
    │           │               │       │       │       └── GetVar(file)
    │           │               │       │       ├── Pop
    │           │               │       │       │   └── Native: print
    │           │               │       │       │       ├── String("input:")
    │           │               │       │       │       └── GetVar(input)
    │           │               │       │       ├── Def: lexer
    │           │               │       │       │   └── Call: Lexer
    │           │               │       │       │       ├── GetVar(input)
    │           │               │       │       │       └── Int(0)
    │           │               │       │       ├── Reassign: lexer
    │           │               │       │       │   └── Call: Peekable
    │           │               │       │       │       ├── GetVar(lexer)
    │           │               │       │       │       └── Nil
    │           │               │       │       ├── Def: parser
    │           │               │       │       │   └── Call: Parser
    │           │               │       │       │       ├── GetVar(lexer)
    │           │               │       │       │       └── GetVar(file)
    │           │               │       │       ├── Def: root
    │           │               │       │       │   └── Method: parse_root
    │           │               │       │       │       └── GetVar(parser)
    │           │               │       │       ├── Pop
    │           │               │       │       │   └── Native: append
    │           │               │       │       │       ├── GetVar(imports)
    │           │               │       │       │       └── GetVar(root)
    │           │               │       │       └── Reassign: j
    │           │               │       │           └── Plus
    │           │               │       │               ├── GetVar(j)
    │           │               │       │               └── Int(1)
    │           │               │       └── IndexSet
    │           │               │           ├── Get(nodes)
    │           │               │           │   └── GetVar(self)
    │           │               │           ├── GetVar(i)
    │           │               │           └── Call: AstBlock
    │           │               │               └── GetVar(imports)
    │           │               └── Reassign: i
    │           │                   └── Plus
    │           │                       ├── GetVar(i)
    │           │                       └── Int(1)
    │           ├── Method: visitAstNeg
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstNot
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstFloat
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstInt
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstString
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstGetField
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstSetField
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstList
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstIndex
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstIndexSet
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstBool
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstNil
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstGetVar
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstDef
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstPlus
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstClass
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstBlock
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstReassign
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstInstance
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstNative
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstMethod
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstPop
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstEqualEqual
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstIf
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstReturn
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstWhile
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstOr
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstAnd
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstBangEqual
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstGreater
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstGreaterEqual
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstLess
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstLessEqual
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstGet
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           ├── Method: visitAstSet
    │           │   └── Param: self
    │           │   └── Block
    │           │       └── Return
    │           │           └── Bool(false)
    │           └── Method: visitAstImport
    │               └── Param: self
    │               └── Block
    │                   ├── Pop
    │                   │   └── Native: print
    │                   │       └── String("visited ast import")
    │                   └── Return
    │                       └── Bool(true)
    ├── Def: file
    │   └── Native: args
    │       └── Int(0)
    ├── Pop
    │   └── Native: print
    │       ├── String("compiling file: ")
    │       └── GetVar(file)
    ├── Def: input
    │   └── Native: read_file
    │       └── GetVar(file)
    ├── Pop
    │   └── Native: print
    │       ├── String("input:")
    │       └── GetVar(input)
    ├── Def: lexer
    │   └── Call: Lexer
    │       ├── GetVar(input)
    │       └── Int(0)
    ├── Reassign: lexer
    │   └── Call: Peekable
    │       ├── GetVar(lexer)
    │       └── Nil
    ├── Def: parser
    │   └── Call: Parser
    │       ├── GetVar(lexer)
    │       └── GetVar(file)
    ├── Def: root
    │   └── Method: parse_root
    │       └── GetVar(parser)
    ├── Def: import_resolver
    │   └── Call: ImportResolver
    ├── Pop
    │   └── Method: accept
    │       ├── GetVar(import_resolver)
    │       └── GetVar(root)
    ├── Def: printer
    │   └── Call: AstPrinter
    │       ├── List
    │       └── Bool(true)
    ├── Pop
    │   └── Method: accept
    │       ├── GetVar(printer)
    │       └── GetVar(root)
    ├── Def: compiler
    │   └── Call: Compiler
    │       ├── Nil
    │       ├── Nil
    │       ├── Nil
    │       ├── Nil
    │       ├── Nil
    │       ├── Nil
    │       └── Nil
    ├── Pop
    │   └── Method: init
    │       └── GetVar(compiler)
    ├── Pop
    │   └── Method: accept
    │       ├── GetVar(compiler)
    │       └── GetVar(root)
    ├── Def: i
    │   └── Int(0)
    ├── While
    │   ├── Less
    │   │   ├── GetVar(i)
    │   │   └── Native: len
    │   │       └── Get(code)
    │   │           └── GetVar(compiler)
    │   └── Block
    │       ├── Pop
    │       │   └── Native: print
    │       │       └── Index
    │       │           ├── Get(code)
    │       │           │   └── GetVar(compiler)
    │       │           └── GetVar(i)
    │       └── Reassign: i
    │           └── Plus
    │               ├── GetVar(i)
    │               └── Int(1)
    ├── Pop
    │   └── Native: print
    │       ├── String("Bytecode:")
    │       └── Get(code)
    │           └── GetVar(compiler)
    └── Pop
        └── Native: print
            ├── String("strings:")
            └── Get(strings)
                └── GetVar(compiler)

Bytecode: [Jump(240), PushInt(0), Return, PushNil, Return, PushInt(1), Return, PushNil, Return, PushInt(2), Return, PushNil, Return, PushInt(3), Return, PushNil, Return, PushInt(4), Return, PushNil, Return, PushInt(5), Return, PushNil, Return, PushInt(6), Return, PushNil, Return, PushInt(7), Return, PushNil, Return, PushInt(8), Return, PushNil, Return, PushInt(9), Return, PushNil, Return, PushInt(10), Return, PushNil, Return, PushInt(11), Return, PushNil, Return, PushInt(12), Return, PushNil, Return, PushInt(13), Return, PushNil, Return, PushInt(14), Return, PushNil, Return, PushInt(15), Return, PushNil, Return, PushInt(16), Return, PushNil, Return, PushInt(17), Return, PushNil, Return, PushInt(18), Return, PushNil, Return, PushInt(19), Return, PushNil, Return, PushInt(20), Return, PushNil, Return, PushInt(21), Return, PushNil, Return, PushInt(22), Return, PushNil, Return, PushInt(23), Return, PushNil, Return, PushInt(24), Return, PushNil, Return, PushInt(25), Return, PushNil, Return, PushInt(26), Return, PushNil, Return, PushInt(27), Return, PushNil, Return, PushInt(28), Return, PushNil, Return, PushInt(29), Return, PushNil, Return, PushInt(30), Return, PushNil, Return, PushInt(31), Return, PushNil, Return, PushInt(32), Return, PushNil, Return, PushInt(33), Return, PushNil, Return, PushInt(34), Return, PushNil, Return, PushInt(35), Return, PushNil, Return, PushInt(36), Return, PushNil, Return, PushInt(37), Return, PushNil, Return, PushInt(38), Return, PushNil, Return, PushInt(40), Return, PushNil, Return, PushInt(41), Return, PushNil, Return, PushInt(42), Return, PushNil, Return, PushInt(43), Return, PushNil, Return, PushInt(44), Return, PushNil, Return, PushString(0), PushString(1), PushString(2), PushString(3), PushString(4), PushString(5), PushString(6), PushString(7), PushString(8), PushString(9), PushString(10), PushString(11), PushString(12), PushString(13), PushString(14), PushString(15), PushString(16), PushString(17), PushString(18), PushString(19), PushString(20), PushString(21), PushString(22), PushString(23), PushString(24), PushString(25), PushString(26), PushString(27), PushString(28), PushString(29), PushString(30), PushString(31), PushString(32), PushString(33), PushString(34), PushString(35), PushString(36), List(37), PushInt(0), GetLocal(3), GetLocal(2), Native(3), Less, JumpIfFalse(234), GetLocal(1), GetLocal(2), GetLocal(3), IndexGet, Equals, JumpIfFalse(229), GetLocal(3), Return, GetLocal(3), PushInt(1), Plus, SetLocal(3), Jump(216), PushNil, Return, Pop, Pop, PushNil, Return, Jump(241), Jump(724), GetField("p"), GetField("code"), Native(3), Less, GetField("code"), GetField("p"), IndexGet, PushString(37), Equals, And, JumpIfFalse(258), GetField("p"), PushInt(1), Plus, SetField("p"), Jump(242), PushNil, Return, GetField("p"), GetField("code"), Native(3), GreaterEqual, Return, PushNil, Return, PushSelf, Call("is_done", 1), JumpIfFalse(272), PushBool(false), Return, PushString(38), PushInt(0), GetLocal(2), GetLocal(1), Native(3), Less, JumpIfFalse(294), GetLocal(1), GetLocal(2), IndexGet, GetField("code"), GetField("p"), IndexGet, Equals, JumpIfFalse(289), PushBool(true), Return, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(274), PushBool(false), Return, Pop, Pop, PushNil, Return, PushSelf, Call("is_done", 1), JumpIfFalse(305), PushBool(false), Return, PushString(39), PushInt(0), GetLocal(2), GetLocal(1), Native(3), Less, JumpIfFalse(327), GetLocal(1), GetLocal(2), IndexGet, GetField("code"), GetField("p"), IndexGet, Equals, JumpIfFalse(322), PushBool(true), Return, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(307), PushBool(false), Return, Pop, Pop, PushNil, Return, GetField("p"), GetField("code"), Native(3), Less, JumpIfFalse(342), GetField("p"), PushInt(1), Plus, SetField("p"), PushNil, Return, GetField("p"), PushString(40), PushSelf, Call("letter", 1), PushSelf, Call("digit", 1), Or, JumpIfFalse(363), GetLocal(2), GetField("code"), GetField("p"), IndexGet, Plus, SetLocal(2), GetField("p"), PushInt(1), Plus, SetField("p"), Jump(346), GetField("p"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), GetLocal(2), Call("from_str", 2), GetLocal(4), PushNil, NotEquals, JumpIfFalse(377), GetLocal(2), GetLocal(1), GetLocal(3), GetLocal(4), Instance(["kind", "end", "start", "value"], [], []), Return, GetLocal(2), GetLocal(1), GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Identifier", 1), Instance(["kind", "end", "start", "value"], [], []), Return, Pop, Pop, Pop, Pop, PushNil, Return, GetField("p"), PushString(41), PushBool(false), PushSelf, Call("digit", 1), GetField("code"), GetField("p"), IndexGet, PushString(42), Equals, Or, JumpIfFalse(421), GetField("code"), GetField("p"), IndexGet, PushString(43), Equals, JumpIfFalse(410), PushBool(true), SetLocal(3), GetLocal(2), GetField("code"), GetField("p"), IndexGet, Plus, SetLocal(2), GetField("p"), PushInt(1), Plus, SetField("p"), Jump(393), GetField("p"), GetLocal(3), JumpIfFalse(431), GetLocal(2), GetLocal(1), GetLocal(4), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Float", 1), Instance(["kind", "end", "start", "value"], [], []), Return, GetLocal(2), GetLocal(1), GetLocal(4), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Int", 1), Instance(["kind", "end", "start", "value"], [], []), Return, Pop, Pop, Pop, Pop, PushNil, Return, GetField("p"), PushString(44), GetField("p"), PushInt(1), Plus, SetField("p"), GetField("p"), GetField("code"), Native(3), Less, GetField("code"), GetField("p"), IndexGet, PushString(45), NotEquals, And, JumpIfFalse(508), GetField("code"), GetField("p"), IndexGet, PushString(46), Equals, GetLocal(3), JumpIfFalse(493), GetLocal(2), GetField("code"), GetField("p"), IndexGet, Plus, SetLocal(2), GetField("p"), PushInt(1), Plus, SetField("p"), GetField("p"), GetField("code"), Native(3), Less, JumpIfFalse(493), GetLocal(2), GetField("code"), GetField("p"), IndexGet, Plus, SetLocal(2), GetField("p"), PushInt(1), Plus, SetField("p"), GetLocal(3), Not, JumpIfFalse(506), GetLocal(2), GetField("code"), GetField("p"), IndexGet, Plus, SetLocal(2), GetField("p"), PushInt(1), Plus, SetField("p"), Pop, Jump(450), GetField("p"), GetField("code"), Native(3), Less, JumpIfFalse(521), GetLocal(2), PushString(47), Plus, SetLocal(2), GetField("p"), PushInt(1), Plus, SetField("p"), GetField("p"), GetLocal(2), GetLocal(1), GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("String", 1), Instance(["kind", "end", "start", "value"], [], []), Return, Pop, Pop, Pop, PushNil, Return, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), GetField("code"), GetField("p"), IndexGet, Call("from_str", 2), GetLocal(1), PushNil, NotEquals, JumpIfFalse(553), GetField("code"), GetField("p"), IndexGet, GetField("p"), GetField("p"), PushInt(1), Plus, GetLocal(1), Instance(["kind", "end", "start", "value"], [], []), Return, PushNil, Return, Pop, PushNil, Return, GetField("p"), PushInt(1), Plus, GetField("code"), Native(3), Equals, JumpIfFalse(567), PushNil, Return, GetField("code"), GetField("p"), IndexGet, GetField("code"), GetField("p"), PushInt(1), Plus, IndexGet, GetLocal(1), PushString(48), Equals, GetLocal(2), PushString(49), Equals, And, JumpIfFalse(594), GetLocal(1), GetLocal(2), Plus, GetField("p"), GetField("p"), PushInt(2), Plus, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("BangEqual", 1), Instance(["kind", "end", "start", "value"], [], []), Return, GetLocal(1), PushString(50), Equals, GetLocal(2), PushString(51), Equals, And, JumpIfFalse(613), GetLocal(1), GetLocal(2), Plus, GetField("p"), GetField("p"), PushInt(2), Plus, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("EqualEqual", 1), Instance(["kind", "end", "start", "value"], [], []), Return, GetLocal(1), PushString(52), Equals, GetLocal(2), PushString(53), Equals, And, JumpIfFalse(632), GetLocal(1), GetLocal(2), Plus, GetField("p"), GetField("p"), PushInt(2), Plus, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("GreaterEqual", 1), Instance(["kind", "end", "start", "value"], [], []), Return, GetLocal(1), PushString(54), Equals, GetLocal(2), PushString(55), Equals, And, JumpIfFalse(651), GetLocal(1), GetLocal(2), Plus, GetField("p"), GetField("p"), PushInt(2), Plus, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LessEqual", 1), Instance(["kind", "end", "start", "value"], [], []), Return, PushNil, Return, Pop, Pop, PushNil, Return, PushSelf, Call("is_done", 1), JumpIfFalse(662), PushNil, Return, PushSelf, Call("whitespace", 1), Pop, PushSelf, Call("is_done", 1), Not, JumpIfFalse(720), PushSelf, Call("two_char", 1), GetLocal(1), PushNil, NotEquals, JumpIfFalse(681), GetField("p"), PushInt(2), Plus, SetField("p"), GetLocal(1), Return, PushSelf, Call("letter", 1), JumpIfFalse(687), PushSelf, Call("identifier", 1), Return, PushSelf, Call("digit", 1), JumpIfFalse(693), PushSelf, Call("number", 1), Return, PushSelf, Call("single_char", 1), GetLocal(2), PushNil, NotEquals, JumpIfFalse(705), GetField("p"), PushInt(1), Plus, SetField("p"), GetLocal(2), Return, GetField("code"), GetField("p"), IndexGet, PushString(56), Equals, JumpIfFalse(714), PushSelf, Call("string", 1), Return, PushSelf, Call("advance", 1), Pop, Pop, Pop, Jump(665), PushNil, Return, PushNil, Return, Jump(751), GetField("peek_item"), PushNil, NotEquals, JumpIfFalse(735), GetField("peek_item"), PushNil, SetField("peek_item"), GetLocal(1), Return, Pop, GetField("item"), Call("next", 1), Return, PushNil, Return, GetField("peek_item"), PushNil, Equals, JumpIfFalse(747), GetField("item"), Call("next", 1), SetField("peek_item"), GetField("peek_item"), Return, PushNil, Return, Jump(758), GetLocal(1), PushSelf, Call("visitAstRoot", 2), Return, PushNil, Return, Jump(765), GetLocal(1), PushSelf, Call("visitAstNeg", 2), Return, PushNil, Return, Jump(772), GetLocal(1), PushSelf, Call("visitAstNot", 2), Return, PushNil, Return, Jump(779), GetLocal(1), PushSelf, Call("visitAstFloat", 2), Return, PushNil, Return, Jump(786), GetLocal(1), PushSelf, Call("visitAstInt", 2), Return, PushNil, Return, Jump(793), GetLocal(1), PushSelf, Call("visitAstString", 2), Return, PushNil, Return, Jump(804), GetLocal(1), PushSelf, Call("visitAstGetField", 2), Return, PushNil, Return, PushString(57), Return, PushNil, Return, Jump(811), GetLocal(1), PushSelf, Call("visitAstSetField", 2), Return, PushNil, Return, Jump(818), GetLocal(1), PushSelf, Call("visitAstList", 2), Return, PushNil, Return, Jump(829), GetLocal(1), PushSelf, Call("visitAstIndex", 2), Return, PushNil, Return, PushString(58), Return, PushNil, Return, Jump(840), GetLocal(1), PushSelf, Call("visitAstIndexSet", 2), Return, PushNil, Return, PushString(59), Return, PushNil, Return, Jump(847), GetLocal(1), PushSelf, Call("visitAstBool", 2), Return, PushNil, Return, Jump(854), GetLocal(1), PushSelf, Call("visitAstNil", 2), Return, PushNil, Return, Jump(865), GetLocal(1), PushSelf, Call("visitAstGetVar", 2), Return, PushNil, Return, PushString(60), Return, PushNil, Return, Jump(872), GetLocal(1), PushSelf, Call("visitAstDef", 2), Return, PushNil, Return, Jump(879), GetLocal(1), PushSelf, Call("visitAstPlus", 2), Return, PushNil, Return, Jump(886), GetLocal(1), PushSelf, Call("visitAstMinus", 2), Return, PushNil, Return, Jump(893), GetLocal(1), PushSelf, Call("visitAstClass", 2), Return, PushNil, Return, Jump(900), GetLocal(1), PushSelf, Call("visitAstBlock", 2), Return, PushNil, Return, Jump(911), GetLocal(1), PushSelf, Call("visitAstReassign", 2), Return, PushNil, Return, PushString(61), Return, PushNil, Return, Jump(918), GetLocal(1), PushSelf, Call("visitAstInstance", 2), Return, PushNil, Return, Jump(925), GetLocal(1), PushSelf, Call("visitAstNative", 2), Return, PushNil, Return, Jump(936), GetLocal(1), PushSelf, Call("visitAstMethod", 2), Return, PushNil, Return, PushString(62), Return, PushNil, Return, Jump(943), GetLocal(1), PushSelf, Call("visitAstPop", 2), Return, PushNil, Return, Jump(950), GetLocal(1), PushSelf, Call("visitAstEqualEqual", 2), Return, PushNil, Return, Jump(957), GetLocal(1), PushSelf, Call("visitAstIf", 2), Return, PushNil, Return, Jump(964), GetLocal(1), PushSelf, Call("visitAstReturn", 2), Return, PushNil, Return, Jump(971), GetLocal(1), PushSelf, Call("visitAstWhile", 2), Return, PushNil, Return, Jump(978), GetLocal(1), PushSelf, Call("visitAstOr", 2), Return, PushNil, Return, Jump(985), GetLocal(1), PushSelf, Call("visitAstAnd", 2), Return, PushNil, Return, Jump(992), GetLocal(1), PushSelf, Call("visitAstBangEqual", 2), Return, PushNil, Return, Jump(999), GetLocal(1), PushSelf, Call("visitAstGreater", 2), Return, PushNil, Return, Jump(1006), GetLocal(1), PushSelf, Call("visitAstGreaterEqual", 2), Return, PushNil, Return, Jump(1013), GetLocal(1), PushSelf, Call("visitAstLess", 2), Return, PushNil, Return, Jump(1020), GetLocal(1), PushSelf, Call("visitAstLessEqual", 2), Return, PushNil, Return, Jump(1031), GetLocal(1), PushSelf, Call("visitAstGet", 2), Return, PushNil, Return, PushString(63), Return, PushNil, Return, Jump(1038), GetLocal(1), PushSelf, Call("visitAstImport", 2), Return, PushNil, Return, Jump(1049), GetLocal(1), PushSelf, Call("visitAstSet", 2), Return, PushNil, Return, PushString(64), Return, PushNil, Return, Jump(1056), GetLocal(1), PushSelf, Call("visitAstGetSelf", 2), Return, PushNil, Return, Jump(1057), Jump(2388), GetField("lexer"), Call("next", 1), GetLocal(1), GetLocal(2), Get("kind"), NotEquals, JumpIfFalse(1081), PushString(65), GetLocal(2), Print(2), Pop, PushString(66), GetLocal(1), Native(1), Plus, PushString(67), Plus, GetLocal(2), Get("kind"), Native(1), Plus, Native(4), Pop, Pop, PushNil, Return, GetField("lexer"), Call("next", 1), GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Identifier", 1), NotEquals, JumpIfFalse(1099), PushString(68), GetLocal(1), Get("kind"), Native(1), Plus, Native(4), Pop, GetLocal(1), Get("value"), Return, Pop, PushNil, Return, GetLocal(1), PushNil, Equals, JumpIfFalse(1111), PushInt(0), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Equal", 1), Equals, JumpIfFalse(1119), PushInt(1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Or", 1), Equals, JumpIfFalse(1127), PushInt(3), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("And", 1), Equals, JumpIfFalse(1135), PushInt(4), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("BangEqual", 1), Equals, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("EqualEqual", 1), Equals, Or, JumpIfFalse(1149), PushInt(5), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Greater", 1), Equals, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("GreaterEqual", 1), Equals, Or, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Less", 1), Equals, Or, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LessEqual", 1), Equals, Or, JumpIfFalse(1175), PushInt(6), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Plus", 1), Equals, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Minus", 1), Equals, Or, JumpIfFalse(1189), PushInt(7), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Star", 1), Equals, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Slash", 1), Equals, Or, JumpIfFalse(1203), PushInt(8), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftParen", 1), Equals, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBracket", 1), Equals, Or, JumpIfFalse(1217), PushInt(10), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Dot", 1), Equals, JumpIfFalse(1225), PushInt(11), Return, PushInt(0), Return, PushNil, Return, GetField("lexer"), Call("peek", 1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Identifier", 1), Equals, JumpIfFalse(1242), PushSelf, Call("consume_identifier", 1), GetLocal(1), Instance(["value"], ["accept", "kind"], [794, 800]), Return, Pop, Instance([], ["accept"], [1050]), Return, PushString(69), Native(4), Pop, PushNil, Return, PushSelf, Call("expr", 1), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightParen", 1), Call("consume", 2), Pop, GetLocal(1), Return, Pop, PushNil, Return, GetField("lexer"), Call("next", 1), GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Minus", 1), Equals, JumpIfFalse(1274), PushSelf, PushInt(9), Call("parse_expr", 2), Instance(["expr"], ["accept"], [759]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Bang", 1), Equals, JumpIfFalse(1285), PushSelf, PushInt(9), Call("parse_expr", 2), Instance(["expr"], ["accept"], [766]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBracket", 1), Equals, JumpIfFalse(1294), PushSelf, Call("list", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Identifier", 1), Equals, JumpIfFalse(1304), GetLocal(1), Get("value"), Instance(["value"], ["accept", "kind"], [855, 861]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Int", 1), Equals, JumpIfFalse(1314), GetLocal(1), Get("value"), Instance(["value"], ["accept"], [780]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Float", 1), Equals, JumpIfFalse(1324), GetLocal(1), Get("value"), Instance(["value"], ["accept"], [773]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("String", 1), Equals, JumpIfFalse(1334), GetLocal(1), Get("value"), Instance(["value"], ["accept"], [787]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("True", 1), Equals, JumpIfFalse(1343), PushBool(true), Instance(["value"], ["accept"], [841]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("False", 1), Equals, JumpIfFalse(1352), PushBool(false), Instance(["value"], ["accept"], [841]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Nil", 1), Equals, JumpIfFalse(1360), Instance([], ["accept"], [848]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("At", 1), Equals, JumpIfFalse(1369), PushSelf, Call("field", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Hash", 1), Equals, JumpIfFalse(1378), PushSelf, Call("native", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftParen", 1), Equals, JumpIfFalse(1387), PushSelf, Call("grouping", 1), Return, PushString(70), GetLocal(1), Print(2), Pop, PushString(71), Native(4), Pop, Pop, PushNil, Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Or", 1), Equals, JumpIfFalse(1406), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [972]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("And", 1), Equals, JumpIfFalse(1415), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [979]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("BangEqual", 1), Equals, JumpIfFalse(1424), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [986]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("EqualEqual", 1), Equals, JumpIfFalse(1433), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [944]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Greater", 1), Equals, JumpIfFalse(1442), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [993]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("GreaterEqual", 1), Equals, JumpIfFalse(1451), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [1000]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Less", 1), Equals, JumpIfFalse(1460), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [1007]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LessEqual", 1), Equals, JumpIfFalse(1469), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [1014]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Plus", 1), Equals, JumpIfFalse(1478), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [873]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Minus", 1), Equals, JumpIfFalse(1487), GetLocal(1), GetLocal(2), Instance(["rhs", "lhs"], ["accept"], [880]), Return, GetLocal(3), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Equal", 1), Equals, JumpIfFalse(1526), GetLocal(1), Call("kind", 1), PushString(72), Equals, JumpIfFalse(1502), GetLocal(1), Get("value"), GetLocal(2), Instance(["expr", "name"], ["accept", "kind"], [901, 907]), Return, GetLocal(1), Call("kind", 1), PushString(73), Equals, JumpIfFalse(1514), GetLocal(1), Get("lhs"), GetLocal(1), Get("field"), GetLocal(2), Instance(["rhs", "field", "lhs"], ["accept", "kind"], [1039, 1045]), Return, GetLocal(1), Call("kind", 1), PushString(74), Equals, JumpIfFalse(1526), GetLocal(1), Get("lhs"), GetLocal(1), Get("indexer"), GetLocal(2), Instance(["rhs", "indexer", "lhs"], ["accept", "kind"], [830, 836]), Return, PushString(75), Native(4), Pop, PushNil, Return, List(0), GetField("lexer"), Call("peek", 1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightParen", 1), NotEquals, JumpIfFalse(1557), GetLocal(2), PushSelf, Call("expr", 1), Native(5), Pop, GetField("lexer"), Call("peek", 1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Comma", 1), Equals, JumpIfFalse(1556), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Comma", 1), Call("consume", 2), Pop, Jump(1532), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightParen", 1), Call("consume", 2), Pop, GetLocal(1), Call("kind", 1), PushString(76), Equals, JumpIfFalse(1572), GetLocal(1), Get("value"), GetLocal(2), Instance(["args", "name"], ["accept"], [912]), Return, GetLocal(1), Call("kind", 1), PushString(77), Equals, JumpIfFalse(1584), GetLocal(1), Get("field"), GetLocal(2), GetLocal(1), Get("lhs"), Instance(["lhs", "args", "name"], ["accept", "kind"], [926, 932]), Return, GetLocal(1), Call("kind", 1), PushString(78), Equals, JumpIfFalse(1595), GetLocal(1), Get("value"), GetLocal(2), PushNil, Instance(["lhs", "args", "name"], ["accept", "kind"], [926, 932]), Return, PushString(79), Native(4), Pop, Pop, PushNil, Return, PushSelf, Call("expr", 1), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBracket", 1), Call("consume", 2), Pop, GetLocal(1), GetLocal(2), Instance(["indexer", "lhs"], ["accept", "kind"], [819, 825]), Return, Pop, PushNil, Return, PushSelf, Call("consume_identifier", 1), GetLocal(1), GetLocal(2), Instance(["field", "lhs"], ["accept", "kind"], [1021, 1027]), Return, Pop, PushNil, Return, GetField("lexer"), Call("peek", 1), GetLocal(2), PushNil, NotEquals, JumpIfFalse(1723), GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftParen", 1), Equals, JumpIfFalse(1645), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftParen", 1), Call("consume", 2), Pop, PushSelf, GetLocal(1), Call("call", 2), SetLocal(1), GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBracket", 1), Equals, JumpIfFalse(1660), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBracket", 1), Call("consume", 2), Pop, PushSelf, GetLocal(1), Call("index", 2), SetLocal(1), GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Dot", 1), Equals, JumpIfFalse(1675), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Dot", 1), Call("consume", 2), Pop, PushSelf, GetLocal(1), Call("get_or_set", 2), SetLocal(1), GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftParen", 1), NotEquals, GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBracket", 1), NotEquals, And, GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Dot", 1), NotEquals, And, JumpIfFalse(1719), PushSelf, GetLocal(2), Call("infix_prec", 2), GetLocal(3), PushInt(0), Equals, JumpIfFalse(1702), GetLocal(1), Return, PushSelf, GetLocal(2), Get("kind"), Call("consume", 2), Pop, PushSelf, GetLocal(3), Call("parse_expr", 2), PushSelf, GetLocal(1), GetLocal(4), GetLocal(2), Get("kind"), Call("match_infix_token", 4), SetLocal(1), Pop, Pop, GetField("lexer"), Call("peek", 1), SetLocal(2), Jump(1626), GetLocal(1), Return, Pop, PushNil, Return, PushSelf, Call("parse_prefix", 1), GetLocal(1), PushSelf, GetField("lexer"), Call("peek", 1), Call("infix_prec", 2), Less, JumpIfFalse(1742), PushSelf, GetLocal(2), Call("parse_infix", 2), SetLocal(2), Jump(1730), GetLocal(2), Return, Pop, PushNil, Return, PushSelf, PushInt(0), Call("parse_expr", 2), Return, PushNil, Return, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBrace", 1), Call("consume", 2), Pop, List(0), PushBool(false), GetLocal(2), Not, JumpIfFalse(1786), GetField("lexer"), Call("peek", 1), GetLocal(3), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBrace", 1), Equals, JumpIfFalse(1773), PushBool(true), SetLocal(2), GetLocal(3), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBrace", 1), NotEquals, JumpIfFalse(1784), GetLocal(1), PushSelf, Call("stmt", 1), Native(5), Pop, Pop, Jump(1760), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBrace", 1), Call("consume", 2), Pop, GetLocal(1), Instance(["stmts"], ["accept"], [894]), Return, Pop, Pop, PushNil, Return, GetField("lexer"), Call("peek", 1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftParen", 1), NotEquals, JumpIfFalse(1807), List(0), Return, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftParen", 1), Call("consume", 2), Pop, List(0), GetField("lexer"), Call("peek", 1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightParen", 1), NotEquals, JumpIfFalse(1848), GetField("lexer"), Call("peek", 1), GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Identifier", 1), Equals, JumpIfFalse(1835), PushSelf, Call("consume_identifier", 1), GetLocal(1), GetLocal(3), Native(5), Pop, Pop, GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Comma", 1), Equals, JumpIfFalse(1846), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Comma", 1), Call("consume", 2), Pop, Pop, Jump(1813), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightParen", 1), Call("consume", 2), Pop, GetLocal(1), Return, Pop, PushNil, Return, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Def", 1), Call("consume", 2), Pop, PushSelf, Call("consume_identifier", 1), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Equal", 1), Call("consume", 2), Pop, PushSelf, Call("expr", 1), GetLocal(1), GetLocal(2), Instance(["expr", "name"], ["accept"], [866]), Return, Pop, Pop, PushNil, Return, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Class", 1), Call("consume", 2), Pop, PushSelf, Call("consume_identifier", 1), PushSelf, Call("param_list", 1), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBrace", 1), Call("consume", 2), Pop, List(0), GetField("lexer"), Call("peek", 1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBrace", 1), NotEquals, JumpIfFalse(1919), PushSelf, Call("consume_identifier", 1), PushSelf, Call("param_list", 1), PushSelf, Call("block", 1), GetLocal(3), GetLocal(4), GetLocal(5), GetLocal(6), Instance(["block", "params", "name"], [], []), Native(5), Pop, Pop, Pop, Pop, Jump(1895), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBrace", 1), Call("consume", 2), Pop, GetLocal(1), GetLocal(2), GetLocal(3), Instance(["methods", "fields", "name"], ["accept"], [887]), Return, Pop, Pop, Pop, PushNil, Return, List(0), GetField("lexer"), Call("peek", 1), PushBool(true), GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBracket", 1), NotEquals, JumpIfFalse(1963), GetLocal(3), Not, JumpIfFalse(1952), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Comma", 1), Call("consume", 2), Pop, PushBool(false), SetLocal(3), GetLocal(1), PushSelf, Call("expr", 1), Native(5), Pop, GetField("lexer"), Call("peek", 1), SetLocal(2), Jump(1938), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBracket", 1), Call("consume", 2), Pop, GetLocal(1), Instance(["items"], ["accept"], [812]), Return, Pop, Pop, Pop, PushNil, Return, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("If", 1), Call("consume", 2), Pop, PushSelf, Call("expr", 1), PushSelf, Call("block", 1), GetLocal(1), GetLocal(2), Instance(["block", "condition"], ["accept"], [951]), Return, Pop, Pop, PushNil, Return, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("While", 1), Call("consume", 2), Pop, PushSelf, Call("expr", 1), PushSelf, Call("block", 1), GetLocal(1), GetLocal(2), Instance(["block", "condition"], ["accept"], [965]), Return, Pop, Pop, PushNil, Return, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Return", 1), Call("consume", 2), Pop, PushSelf, Call("expr", 1), Instance(["expr"], ["accept"], [958]), Return, PushNil, Return, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("At", 1), Call("consume", 2), Pop, PushSelf, Call("consume_identifier", 1), GetField("lexer"), Call("next", 1), GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Equal", 1), Equals, JumpIfFalse(2041), GetLocal(1), PushSelf, Call("expr", 1), Instance(["expr", "name"], ["accept"], [805]), Return, GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftParen", 1), Equals, JumpIfFalse(2053), PushSelf, GetLocal(1), Instance(["value"], ["accept", "kind"], [794, 800]), Call("call", 2), Instance(["expr"], ["accept"], [937]), Return, GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBracket", 1), Equals, JumpIfFalse(2081), PushSelf, Call("expr", 1), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBracket", 1), Call("consume", 2), Pop, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Equal", 1), Call("consume", 2), Pop, PushSelf, Call("expr", 1), GetLocal(1), Instance(["value"], ["accept", "kind"], [794, 800]), GetLocal(3), GetLocal(4), Instance(["rhs", "indexer", "lhs"], ["accept", "kind"], [830, 836]), Return, Pop, Pop, PushString(80), GetLocal(2), Print(2), Pop, PushString(81), Native(4), Pop, Pop, Pop, PushNil, Return, PushSelf, Call("consume_identifier", 1), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftParen", 1), Call("consume", 2), Pop, List(0), GetField("lexer"), Call("peek", 1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightParen", 1), Equals, GetLocal(3), Not, JumpIfFalse(2136), GetLocal(2), PushSelf, Call("expr", 1), Native(5), Pop, GetField("lexer"), Call("peek", 1), Get("kind"), GetLocal(4), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Comma", 1), Equals, JumpIfFalse(2127), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Comma", 1), Call("consume", 2), Pop, GetLocal(4), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightParen", 1), Equals, JumpIfFalse(2134), PushBool(true), SetLocal(3), Pop, Jump(2106), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightParen", 1), Call("consume", 2), Pop, GetLocal(1), GetLocal(2), Instance(["args", "name"], ["accept"], [919]), Return, Pop, Pop, Pop, PushNil, Return, GetField("lexer"), Call("peek", 1), GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBrace", 1), Equals, JumpIfFalse(2161), PushSelf, Call("block", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Def", 1), Equals, JumpIfFalse(2170), PushSelf, Call("stmt_def", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBracket", 1), Equals, JumpIfFalse(2179), PushSelf, Call("list", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Class", 1), Equals, JumpIfFalse(2188), PushSelf, Call("stmt_class", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Identifier", 1), Equals, JumpIfFalse(2221), PushSelf, Call("expr", 1), PushString(82), GetLocal(2), Print(2), Pop, GetLocal(2), Call("kind", 1), GetLocal(3), PushString(83), Equals, GetLocal(3), PushString(84), Equals, GetLocal(3), PushString(85), Equals, Or, Or, JumpIfFalse(2217), GetLocal(2), Instance(["expr"], ["accept"], [937]), Return, GetLocal(2), Return, Pop, Pop, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("If", 1), Equals, JumpIfFalse(2230), PushSelf, Call("stmt_if", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("While", 1), Equals, JumpIfFalse(2239), PushSelf, Call("stmt_while", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Return", 1), Equals, JumpIfFalse(2248), PushSelf, Call("stmt_return", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("At", 1), Equals, JumpIfFalse(2257), PushSelf, Call("stmt_set_field", 1), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Hash", 1), Equals, JumpIfFalse(2272), PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Hash", 1), Call("consume", 2), Pop, PushSelf, Call("native", 1), Instance(["expr"], ["accept"], [937]), Return, GetLocal(1), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Import", 1), Equals, JumpIfFalse(2281), PushSelf, Call("stmt_import", 1), Return, PushString(86), GetLocal(1), Print(2), Pop, PushString(87), Native(4), Pop, Pop, PushNil, Return, List(0), GetField("lexer"), Call("peek", 1), PushNil, NotEquals, JumpIfFalse(2305), PushSelf, Call("stmt", 1), GetLocal(1), GetLocal(2), Native(5), Pop, Pop, Jump(2292), GetLocal(1), Instance(["nodes"], ["accept"], [752]), Return, Pop, PushNil, Return, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("Import", 1), Call("consume", 2), Pop, PushSelf, Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("LeftBrace", 1), Call("consume", 2), Pop, List(0), GetField("lexer"), Call("next", 1), GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("RightBrace", 1), NotEquals, JumpIfFalse(2381), GetLocal(2), Get("kind"), Instance([], ["LeftParen", "RightParen", "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Less", "Greater", "Equal", "Plus", "Minus", "Slash", "Star", "Dot", "Comma", "Colon", "SemiColon", "Bang", "At", "Hash", "Class", "And", "Or", "Else", "If", "For", "Nil", "Return", "While", "Import", "True", "False", "Def", "Int", "Float", "Bool", "Str", "Identifier", "String", "Float", "BangEqual", "EqualEqual", "GreaterEqual", "LessEqual", "from_str"], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call("String", 1), Equals, JumpIfFalse(2377), PushString(88), GetField("file"), PushString(89), Native(9), PushInt(0), GetLocal(5), GetLocal(4), Native(3), PushInt(1), Minus, Less, JumpIfFalse(2361), GetLocal(3), GetLocal(4), GetLocal(5), IndexGet, PushString(90), Plus, Plus, SetLocal(3), GetLocal(5), PushInt(1), Plus, SetLocal(5), Jump(2341), GetLocal(3), GetLocal(2), Get("value"), PushString(91), Native(9), PushInt(0), IndexGet, Plus, SetLocal(3), GetLocal(1), GetLocal(3), Native(5), Pop, Pop, Pop, Pop, GetField("lexer"), Call("next", 1), SetLocal(2), Jump(2324), GetLocal(1), Instance(["imports"], ["accept"], [1032]), Return, Pop, Pop, PushNil, Return, Jump(3376), PushInt(0), PushString(92), GetLocal(2), GetField("indent"), Native(3), Less, JumpIfFalse(2407), GetLocal(3), GetField("indent"), GetLocal(2), IndexGet, Plus, SetLocal(3), GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2391), GetField("is_last"), JumpIfFalse(2415), GetLocal(3), PushString(93), Plus, GetLocal(1), Print(2), Pop, GetField("is_last"), Not, JumpIfFalse(2424), GetLocal(3), PushString(94), Plus, GetLocal(1), Print(2), Pop, Pop, Pop, PushNil, Return, GetField("is_last"), JumpIfFalse(2434), GetField("indent"), PushString(95), Native(5), Pop, GetField("is_last"), Not, JumpIfFalse(2441), GetField("indent"), PushString(96), Native(5), Pop, PushNil, Return, GetField("indent"), Native(6), Pop, PushNil, Return, PushSelf, Call("add_indent", 1), Pop, PushInt(0), GetLocal(2), GetLocal(1), Native(3), Less, JumpIfFalse(2479), PushBool(false), SetField("is_last"), GetLocal(2), GetLocal(1), Native(3), PushInt(1), Minus, Equals, JumpIfFalse(2468), PushBool(true), SetField("is_last"), GetLocal(1), GetLocal(2), IndexGet, PushSelf, Call("accept", 2), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2452), PushSelf, Call("pop_indent", 1), Pop, Pop, PushNil, Return, PushSelf, PushString(97), Call("print_node", 2), Pop, PushSelf, GetLocal(1), Get("nodes"), Call("loop", 2), Pop, PushNil, Return, PushSelf, PushString(98), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(99), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(100), Call("print_node", 2), Pop, PushNil, Return, PushSelf, PushString(101), GetLocal(1), Get("value"), PushString(102), Plus, Plus, Call("print_node", 2), Pop, PushNil, Return, PushSelf, PushString(103), GetLocal(1), Get("value"), PushString(104), Plus, Plus, Call("print_node", 2), Pop, PushNil, Return, PushSelf, PushString(105), GetLocal(1), Get("value"), PushString(106), Plus, Plus, Call("print_node", 2), Pop, PushNil, Return, PushSelf, PushString(107), GetLocal(1), Get("value"), PushString(108), Plus, Plus, Call("print_node", 2), Pop, PushNil, Return, PushSelf, PushString(109), GetLocal(1), Get("name"), PushString(110), Plus, Plus, Call("print_node", 2), Pop, PushBool(true), SetField("is_last"), PushSelf, Call("add_indent", 1), Pop, GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(111), Call("print_node", 2), Pop, PushSelf, GetLocal(1), Get("items"), Call("loop", 2), Pop, PushNil, Return, PushSelf, PushString(112), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("indexer"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(113), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("indexer"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(114), GetLocal(1), Get("value"), Native(1), Plus, PushString(115), Plus, Call("print_node", 2), Pop, PushNil, Return, PushSelf, PushString(116), Call("print_node", 2), Pop, PushNil, Return, PushSelf, PushString(117), GetLocal(1), Get("value"), PushString(118), Plus, Plus, Call("print_node", 2), Pop, PushNil, Return, PushSelf, PushString(119), GetLocal(1), Get("name"), Plus, Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(120), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(121), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(122), GetLocal(1), Get("name"), Plus, Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushInt(0), GetLocal(2), GetLocal(1), Get("fields"), Native(3), Less, JumpIfFalse(2824), GetLocal(1), Get("methods"), Native(3), PushInt(0), Equals, GetLocal(2), GetLocal(1), Get("fields"), Native(3), PushInt(1), Minus, Equals, And, SetField("is_last"), PushSelf, PushString(123), GetLocal(1), Get("fields"), GetLocal(2), IndexGet, Plus, Call("print_node", 2), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2790), PushInt(0), SetLocal(2), GetLocal(2), GetLocal(1), Get("methods"), Native(3), Less, JumpIfFalse(2871), GetLocal(2), GetLocal(1), Get("methods"), Native(3), PushInt(1), Minus, Equals, JumpIfFalse(2842), PushBool(true), SetField("is_last"), PushSelf, PushString(124), GetLocal(1), Get("methods"), GetLocal(2), IndexGet, Get("name"), Plus, Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, GetLocal(1), Get("methods"), GetLocal(2), IndexGet, Get("block"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2826), PushSelf, Call("pop_indent", 1), Pop, Pop, PushNil, Return, PushSelf, PushString(125), Call("print_node", 2), Pop, PushSelf, GetLocal(1), Get("stmts"), Call("loop", 2), Pop, PushNil, Return, PushSelf, PushString(126), GetLocal(1), Get("name"), Plus, Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(127), GetLocal(1), Get("name"), Plus, Call("print_node", 2), Pop, PushSelf, GetLocal(1), Get("args"), Call("loop", 2), Pop, PushNil, Return, PushSelf, PushString(128), GetLocal(1), Get("name"), Plus, Call("print_node", 2), Pop, PushSelf, GetLocal(1), Get("args"), Call("loop", 2), Pop, PushNil, Return, PushSelf, PushString(129), GetLocal(1), Get("name"), Plus, Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, GetLocal(1), Get("lhs"), PushNil, Equals, GetLocal(1), Get("args"), Native(3), PushInt(0), Equals, And, SetField("is_last"), PushInt(0), GetLocal(1), Get("args"), Native(3), PushInt(0), Greater, JumpIfFalse(3009), PushSelf, PushString(130), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, GetLocal(1), Get("lhs"), PushNil, Equals, SetField("is_last"), GetLocal(2), GetLocal(1), Get("args"), Native(3), Less, JumpIfFalse(3006), GetLocal(2), GetLocal(1), Get("args"), Native(3), PushInt(1), Minus, Equals, JumpIfFalse(2994), PushBool(true), SetField("is_last"), GetLocal(1), Get("args"), GetLocal(2), IndexGet, PushSelf, Call("accept", 2), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2978), PushSelf, Call("pop_indent", 1), Pop, GetLocal(1), Get("lhs"), PushNil, NotEquals, JumpIfFalse(3021), PushBool(true), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, Pop, PushNil, Return, PushSelf, PushString(131), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(132), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(133), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("condition"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("block"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(134), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(135), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, GetLocal(1), Get("condition"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("block"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(136), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(137), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(138), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(139), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(140), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(141), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(142), Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(143), GetLocal(1), Get("field"), PushString(144), Plus, Plus, Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, PushSelf, PushString(145), GetLocal(1), Get("field"), PushString(146), Plus, Plus, Call("print_node", 2), Pop, PushSelf, Call("add_indent", 1), Pop, PushBool(false), SetField("is_last"), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushBool(true), SetField("is_last"), GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, Call("pop_indent", 1), Pop, PushNil, Return, Jump(3377), Jump(3378), Jump(3379), Jump(4670), PushString(147), Print(1), Pop, List(0), SetField("code"), List(0), SetField("strings"), List(0), List(1), SetField("variables"), PushInt(0), SetField("depth"), List(0), SetField("classes"), PushNil, SetField("current_fields"), PushNil, SetField("current_class_name"), PushNil, Return, PushInt(0), GetLocal(2), GetField("classes"), Native(3), Less, JumpIfFalse(3422), GetLocal(1), GetField("classes"), GetLocal(2), IndexGet, Get("name"), Equals, JumpIfFalse(3417), GetField("classes"), GetLocal(2), IndexGet, Return, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(3401), PushNil, Return, Pop, PushNil, Return, GetField("code"), GetLocal(1), Native(5), Pop, PushNil, Return, GetField("variables"), List(0), Native(5), Pop, GetField("depth"), PushInt(1), Plus, SetField("depth"), PushNil, Return, GetField("variables"), Native(6), GetField("depth"), PushInt(1), Minus, SetField("depth"), Pop, PushNil, Return, GetField("depth"), PushInt(1), Plus, SetField("depth"), PushNil, Return, GetField("variables"), Native(6), GetLocal(1), Native(3), PushInt(0), List(0), GetLocal(3), GetLocal(2), Less, JumpIfFalse(3497), GetLocal(1), GetLocal(3), IndexGet, Get("depth"), GetField("depth"), Equals, JumpIfFalse(3479), PushSelf, PushString(148), Call("push_code", 2), Pop, GetLocal(1), GetLocal(3), IndexGet, Get("depth"), GetField("depth"), NotEquals, JumpIfFalse(3492), GetLocal(4), GetLocal(1), GetLocal(3), IndexGet, Native(5), Pop, GetLocal(3), PushInt(1), Plus, SetLocal(3), Jump(3464), GetField("depth"), PushInt(1), Minus, SetField("depth"), GetField("variables"), GetLocal(4), Native(5), Pop, Pop, Pop, Pop, Pop, PushNil, Return, GetField("variables"), Native(3), PushInt(1), Minus, GetField("variables"), GetField("variables"), Native(3), PushInt(1), Minus, IndexGet, PushInt(0), PushNil, GetLocal(4), GetLocal(3), Native(3), Less, JumpIfFalse(3547), GetLocal(3), GetLocal(4), IndexGet, Get("name"), GetLocal(1), Equals, JumpIfFalse(3542), PushString(149), GetLocal(1), Plus, PushString(150), Plus, Native(4), Pop, GetLocal(4), PushInt(1), Plus, SetLocal(4), Jump(3523), PushString(151), Print(1), Pop, GetLocal(3), GetLocal(1), GetField("depth"), GetLocal(3), Native(3), GetLocal(2), Plus, Instance(["stack_pos", "depth", "name"], [], []), Native(5), Pop, Pop, Pop, Pop, Pop, PushNil, Return, GetField("variables"), GetField("variables"), Native(3), PushInt(1), Minus, IndexGet, PushInt(0), GetLocal(3), GetLocal(2), Native(3), Less, JumpIfFalse(3595), GetLocal(2), GetLocal(3), IndexGet, Get("name"), GetLocal(1), Equals, JumpIfFalse(3590), GetLocal(2), GetLocal(3), IndexGet, Get("stack_pos"), Return, GetLocal(3), PushInt(1), Plus, SetLocal(3), Jump(3573), PushNil, Return, Pop, Pop, PushNil, Return, PushInt(0), GetLocal(2), GetLocal(1), Native(3), Less, JumpIfFalse(3618), GetLocal(1), GetLocal(2), IndexGet, PushSelf, Call("accept", 2), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(3602), Pop, PushNil, Return, GetLocal(1), PushString(152), Equals, JumpIfFalse(3629), PushInt(0), PushInt(1), List(2), Return, GetLocal(1), PushString(153), Equals, JumpIfFalse(3637), PushInt(1), PushInt(1), List(2), Return, GetLocal(1), PushString(154), Equals, JumpIfFalse(3645), PushInt(2), PushInt(1), List(2), Return, GetLocal(1), PushString(155), Equals, JumpIfFalse(3653), PushInt(3), PushInt(1), List(2), Return, GetLocal(1), PushString(156), Equals, JumpIfFalse(3661), PushInt(4), PushInt(1), List(2), Return, GetLocal(1), PushString(157), Equals, JumpIfFalse(3669), PushInt(5), PushInt(2), List(2), Return, GetLocal(1), PushString(158), Equals, JumpIfFalse(3677), PushInt(6), PushInt(1), List(2), Return, GetLocal(1), PushString(159), Equals, JumpIfFalse(3685), PushInt(7), PushInt(2), List(2), Return, GetLocal(1), PushString(160), Equals, JumpIfFalse(3693), PushInt(8), PushInt(1), List(2), Return, GetLocal(1), PushString(161), Equals, JumpIfFalse(3701), PushInt(9), PushInt(2), List(2), Return, PushString(162), GetLocal(1), Plus, Native(4), Pop, PushNil, Return, PushSelf, Call("begin_scope", 1), Pop, PushSelf, GetLocal(1), Get("nodes"), Call("compile_list", 2), Pop, PushSelf, Call("end_scope", 1), Pop, PushNil, Return, GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(163), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(164), Call("push_code", 2), Pop, PushNil, Return, PushSelf, PushString(165), GetLocal(1), Get("value"), Native(1), Plus, PushString(166), Plus, Call("push_code", 2), Pop, PushNil, Return, PushSelf, PushString(167), GetLocal(1), Get("value"), Native(1), Plus, PushString(168), Plus, Call("push_code", 2), Pop, PushNil, Return, PushSelf, PushString(169), GetField("strings"), Native(3), Native(1), Plus, PushString(170), Plus, Call("push_code", 2), Pop, GetField("strings"), GetLocal(1), Get("value"), Native(5), Pop, PushNil, Return, PushSelf, PushString(171), GetLocal(1), Get("value"), PushString(172), Plus, Plus, Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(173), GetLocal(1), Get("name"), PushString(174), Plus, Plus, Call("push_code", 2), Pop, PushNil, Return, PushSelf, GetLocal(1), Get("items"), Call("compile_list", 2), Pop, PushSelf, PushString(175), GetLocal(1), Get("items"), Native(3), Native(1), Plus, PushString(176), Plus, Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("indexer"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(177), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("indexer"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(178), Call("push_code", 2), Pop, PushNil, Return, PushSelf, PushString(179), GetLocal(1), Get("value"), Native(1), Plus, PushString(180), Plus, Call("push_code", 2), Pop, PushNil, Return, PushSelf, PushString(181), Call("push_code", 2), Pop, PushNil, Return, PushSelf, GetLocal(1), Get("value"), Call("get_local", 2), GetLocal(2), PushNil, NotEquals, JumpIfFalse(3901), PushSelf, PushString(182), GetLocal(2), Native(1), Plus, PushString(183), Plus, Call("push_code", 2), Pop, GetLocal(2), PushNil, Equals, JumpIfFalse(3973), PushSelf, GetLocal(1), Get("value"), Call("find_class", 2), GetLocal(3), PushNil, Equals, JumpIfFalse(3916), PushString(184), Native(4), Pop, GetLocal(3), Get("fields"), Native(3), PushInt(0), NotEquals, JumpIfFalse(3925), PushString(185), Native(4), Pop, List(0), List(0), PushInt(0), GetLocal(6), GetLocal(3), Get("methods"), Native(3), Less, JumpIfFalse(3955), GetLocal(4), GetLocal(3), Get("methods"), GetLocal(6), IndexGet, Get("name"), Native(5), Pop, GetLocal(5), GetLocal(3), Get("methods"), GetLocal(6), IndexGet, Get("code_start"), Native(5), Pop, GetLocal(6), PushInt(1), Plus, SetLocal(6), Jump(3928), PushSelf, PushString(186), GetLocal(4), Native(1), Plus, PushString(187), Plus, GetLocal(5), Native(1), Plus, PushString(188), Plus, Call("push_code", 2), Pop, Pop, Pop, Pop, Pop, Pop, PushNil, Return, PushSelf, PushString(189), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, GetLocal(1), Get("name"), Call("add_local", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(190), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(191), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("name"), SetField("current_class_name"), GetLocal(1), Get("fields"), SetField("current_fields"), GetField("code"), Native(3), PushSelf, PushString(192), Call("push_code", 2), Pop, PushSelf, GetLocal(1), Get("name"), Call("find_class", 2), PushNil, NotEquals, JumpIfFalse(4053), PushString(193), GetLocal(1), Get("name"), PushString(194), Plus, Plus, Native(4), Pop, List(0), PushInt(0), GetLocal(4), GetLocal(1), Get("methods"), Native(3), Less, JumpIfFalse(4122), PushSelf, Call("begin_method", 1), Pop, GetLocal(1), Get("methods"), GetLocal(4), IndexGet, PushInt(0), GetLocal(6), GetLocal(5), Get("params"), Native(3), Less, JumpIfFalse(4087), PushSelf, GetLocal(5), Get("params"), GetLocal(6), IndexGet, Call("add_local", 2), Pop, GetLocal(6), PushInt(1), Plus, SetLocal(6), Jump(4069), GetField("code"), Native(3), GetLocal(5), Get("block"), PushSelf, Call("accept", 2), Pop, GetLocal(5), Get("name"), GetLocal(7), Instance(["code_start", "name"], [], []), GetLocal(3), GetLocal(8), Native(5), Pop, PushSelf, PushString(195), Call("push_code", 2), Pop, PushSelf, PushString(196), Call("push_code", 2), Pop, GetLocal(4), PushInt(1), Plus, SetLocal(4), PushSelf, Call("end_method", 1), Pop, Pop, Pop, Pop, Pop, Jump(4055), GetField("code"), Native(3), GetField("code"), GetLocal(2), PushString(197), GetLocal(5), Native(1), Plus, PushString(198), Plus, IndexSet, PushNil, SetField("current_class_name"), PushNil, SetField("current_fields"), GetLocal(1), Get("name"), GetLocal(1), Get("fields"), GetLocal(3), Instance(["methods", "fields", "name"], [], []), GetField("classes"), GetLocal(6), Native(5), Pop, Pop, Pop, Pop, Pop, Pop, PushNil, Return, PushSelf, Call("begin_scope", 1), Pop, PushSelf, GetLocal(1), Get("stmts"), Call("compile_list", 2), Pop, PushSelf, Call("end_scope", 1), Pop, PushNil, Return, PushSelf, GetLocal(1), Get("name"), Call("get_local", 2), GetLocal(2), PushNil, Equals, JumpIfFalse(4181), PushString(199), GetLocal(1), Get("name"), Plus, Native(4), Pop, GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(200), GetLocal(2), Native(1), Plus, PushString(201), Plus, Call("push_code", 2), Pop, Pop, PushNil, Return, PushSelf, GetLocal(1), Get("name"), Call("find_class", 2), GetLocal(2), PushNil, Equals, JumpIfFalse(4212), PushString(202), GetLocal(1), Get("name"), Plus, Native(4), Pop, GetLocal(2), Get("fields"), Native(3), GetLocal(1), Get("args"), Native(3), NotEquals, JumpIfFalse(4223), PushString(203), Native(4), Pop, List(0), GetLocal(2), Get("fields"), Native(3), PushInt(1), Minus, GetLocal(4), PushInt(0), GreaterEqual, JumpIfFalse(4245), GetLocal(3), GetLocal(2), Get("fields"), GetLocal(4), IndexGet, Native(5), Pop, GetLocal(4), PushInt(1), Minus, SetLocal(4), Jump(4229), List(0), List(0), PushInt(0), SetLocal(4), GetLocal(4), GetLocal(2), Get("methods"), Native(3), Less, JumpIfFalse(4276), GetLocal(5), GetLocal(2), Get("methods"), GetLocal(4), IndexGet, Get("name"), Native(5), Pop, GetLocal(6), GetLocal(2), Get("methods"), GetLocal(4), IndexGet, Get("code_start"), Native(5), Pop, GetLocal(4), PushInt(1), Plus, SetLocal(4), Jump(4249), PushSelf, GetLocal(1), Get("args"), Call("compile_list", 2), Pop, PushSelf, PushString(204), GetLocal(3), Native(1), Plus, PushString(205), Plus, GetLocal(5), Native(1), Plus, PushString(206), Plus, GetLocal(6), Native(1), Plus, PushString(207), Plus, Call("push_code", 2), Pop, Pop, Pop, Pop, Pop, Pop, PushNil, Return, PushSelf, GetLocal(1), Get("name"), Call("native", 2), GetLocal(1), Get("name"), PushString(208), NotEquals, GetLocal(1), Get("args"), Native(3), GetLocal(2), PushInt(1), IndexGet, NotEquals, And, JumpIfFalse(4327), PushString(209), Native(4), Pop, PushSelf, GetLocal(1), Get("args"), Call("compile_list", 2), Pop, GetLocal(1), Get("name"), PushString(210), Equals, JumpIfFalse(4348), PushSelf, PushString(211), GetLocal(1), Get("args"), Native(3), Native(1), Plus, PushString(212), Plus, Call("push_code", 2), Pop, GetLocal(1), Get("name"), PushString(213), NotEquals, JumpIfFalse(4364), PushSelf, PushString(214), GetLocal(2), PushInt(0), IndexGet, Native(1), Plus, PushString(215), Plus, Call("push_code", 2), Pop, Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushNil, NotEquals, JumpIfFalse(4377), GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("lhs"), PushNil, Equals, JumpIfFalse(4386), PushSelf, PushString(216), Call("push_code", 2), Pop, PushSelf, GetLocal(1), Get("args"), Call("compile_list", 2), Pop, PushSelf, PushString(217), GetLocal(1), Get("name"), PushString(218), Plus, GetLocal(1), Get("args"), Native(3), PushInt(1), Plus, Native(1), Plus, PushString(219), Plus, Plus, Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(220), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(221), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("condition"), PushSelf, Call("accept", 2), Pop, GetField("code"), Native(3), PushSelf, PushString(222), Call("push_code", 2), Pop, GetLocal(1), Get("block"), PushSelf, Call("accept", 2), Pop, GetField("code"), Native(3), GetField("code"), GetLocal(2), PushString(223), GetLocal(3), Native(1), Plus, PushString(224), Plus, IndexSet, Pop, Pop, PushNil, Return, GetLocal(1), Get("expr"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(225), Call("push_code", 2), Pop, PushNil, Return, GetField("code"), Native(3), GetLocal(1), Get("condition"), PushSelf, Call("accept", 2), Pop, GetField("code"), Native(3), PushSelf, PushString(226), Call("push_code", 2), Pop, GetLocal(1), Get("block"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(227), GetLocal(2), Native(1), Plus, PushString(228), Plus, Call("push_code", 2), Pop, GetField("code"), GetLocal(3), PushString(229), GetField("code"), Native(3), Native(1), Plus, PushString(230), Plus, IndexSet, Pop, Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(231), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(232), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(233), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(234), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(235), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(236), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(237), Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(238), GetLocal(1), Get("field"), PushString(239), Plus, Plus, Call("push_code", 2), Pop, PushNil, Return, GetLocal(1), Get("lhs"), PushSelf, Call("accept", 2), Pop, GetLocal(1), Get("rhs"), PushSelf, Call("accept", 2), Pop, PushSelf, PushString(240), GetLocal(1), Get("field"), PushString(241), Plus, Plus, Call("push_code", 2), Pop, PushNil, Return, Jump(4924), PushInt(0), GetLocal(2), GetLocal(1), Get("nodes"), Native(3), Less, JumpIfFalse(4774), PushString(242), GetLocal(2), Print(2), Pop, PushString(243), GetLocal(1), Get("nodes"), GetLocal(2), IndexGet, Print(2), Pop, GetLocal(1), Get("nodes"), GetLocal(2), IndexGet, PushSelf, Call("accept", 2), GetLocal(3), JumpIfFalse(4768), PushString(244), Print(1), Pop, List(0), PushInt(0), GetLocal(5), GetLocal(1), Get("nodes"), GetLocal(2), IndexGet, Get("imports"), Native(3), Less, JumpIfFalse(4760), PushString(245), GetLocal(1), Get("nodes"), GetLocal(2), IndexGet, Get("imports"), GetLocal(5), IndexGet, Print(2), Pop, GetLocal(1), Get("nodes"), GetLocal(2), IndexGet, Get("imports"), GetLocal(5), IndexGet, GetLocal(6), Native(2), PushString(246), GetLocal(7), Print(2), Pop, GetLocal(7), PushInt(0), Instance(["p", "code"], ["whitespace", "is_done", "letter", "digit", "advance", "identifier", "number", "string", "single_char", "two_char", "next"], [242, 260, 267, 300, 333, 344, 390, 444, 534, 558, 657]), GetLocal(8), PushNil, Instance(["peek_item", "item"], ["next", "peek"], [725, 740]), SetLocal(8), GetLocal(8), GetLocal(6), Instance(["file", "lexer"], ["consume", "consume_identifier", "infix_prec", "field", "grouping", "parse_prefix", "match_infix_token", "call", "index", "get_or_set", "parse_infix", "parse_expr", "expr", "block", "param_list", "stmt_def", "stmt_class", "list", "stmt_if", "stmt_while", "stmt_return", "stmt_set_field", "native", "stmt", "parse_root", "stmt_import"], [1058, 1084, 1105, 1229, 1249, 1261, 1397, 1531, 1601, 1615, 1624, 1728, 1747, 1753, 1798, 1858, 1880, 1934, 1976, 1993, 2010, 2021, 2092, 2150, 2291, 2311]), GetLocal(9), Call("parse_root", 1), GetLocal(4), GetLocal(10), Native(5), Pop, GetLocal(5), PushInt(1), Plus, SetLocal(5), Pop, Pop, Pop, Pop, Pop, Jump(4702), GetLocal(1), Get("nodes"), GetLocal(2), GetLocal(4), Instance(["stmts"], ["accept"], [894]), IndexSet, Pop, Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Pop, Jump(4672), Pop, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushString(247), Print(1), Pop, PushBool(true), Return, PushNil, Return, PushInt(0), Native(8), PushString(248), GetLocal(0), Print(2), Pop, GetLocal(0), Native(2), PushString(249), GetLocal(1), Print(2), Pop, GetLocal(1), PushInt(0), Instance(["p", "code"], ["whitespace", "is_done", "letter", "digit", "advance", "identifier", "number", "string", "single_char", "two_char", "next"], [242, 260, 267, 300, 333, 344, 390, 444, 534, 558, 657]), GetLocal(2), PushNil, Instance(["peek_item", "item"], ["next", "peek"], [725, 740]), SetLocal(2), GetLocal(2), GetLocal(0), Instance(["file", "lexer"], ["consume", "consume_identifier", "infix_prec", "field", "grouping", "parse_prefix", "match_infix_token", "call", "index", "get_or_set", "parse_infix", "parse_expr", "expr", "block", "param_list", "stmt_def", "stmt_class", "list", "stmt_if", "stmt_while", "stmt_return", "stmt_set_field", "native", "stmt", "parse_root", "stmt_import"], [1058, 1084, 1105, 1229, 1249, 1261, 1397, 1531, 1601, 1615, 1624, 1728, 1747, 1753, 1798, 1858, 1880, 1934, 1976, 1993, 2010, 2021, 2092, 2150, 2291, 2311]), GetLocal(3), Call("parse_root", 1), Instance([], ["visitAstRoot", "visitAstNeg", "visitAstNot", "visitAstFloat", "visitAstInt", "visitAstString", "visitAstGetField", "visitAstSetField", "visitAstList", "visitAstIndex", "visitAstIndexSet", "visitAstBool", "visitAstNil", "visitAstGetVar", "visitAstDef", "visitAstPlus", "visitAstClass", "visitAstBlock", "visitAstReassign", "visitAstInstance", "visitAstNative", "visitAstMethod", "visitAstPop", "visitAstEqualEqual", "visitAstIf", "visitAstReturn", "visitAstWhile", "visitAstOr", "visitAstAnd", "visitAstBangEqual", "visitAstGreater", "visitAstGreaterEqual", "visitAstLess", "visitAstLessEqual", "visitAstGet", "visitAstSet", "visitAstImport"], [4671, 4777, 4781, 4785, 4789, 4793, 4797, 4801, 4805, 4809, 4813, 4817, 4821, 4825, 4829, 4833, 4837, 4841, 4845, 4849, 4853, 4857, 4861, 4865, 4869, 4873, 4877, 4881, 4885, 4889, 4893, 4897, 4901, 4905, 4909, 4913, 4917]), GetLocal(4), GetLocal(5), Call("accept", 2), Pop, List(0), PushBool(true), Instance(["is_last", "indent"], ["print_node", "add_indent", "pop_indent", "loop", "visitAstRoot", "visitAstNeg", "visitAstNot", "visitAstGetSelf", "visitAstFloat", "visitAstInt", "visitAstString", "visitAstGetField", "visitAstSetField", "visitAstList", "visitAstIndex", "visitAstIndexSet", "visitAstBool", "visitAstNil", "visitAstGetVar", "visitAstDef", "visitAstPlus", "visitAstMinus", "visitAstClass", "visitAstBlock", "visitAstReassign", "visitAstInstance", "visitAstNative", "visitAstMethod", "visitAstPop", "visitAstEqualEqual", "visitAstIf", "visitAstReturn", "visitAstWhile", "visitAstOr", "visitAstAnd", "visitAstBangEqual", "visitAstGreater", "visitAstGreaterEqual", "visitAstLess", "visitAstLessEqual", "visitAstGet", "visitAstSet"], [2389, 2428, 2443, 2448, 2485, 2496, 2515, 2534, 2540, 2551, 2562, 2573, 2584, 2608, 2619, 2645, 2676, 2688, 2694, 2705, 2727, 2753, 2779, 2877, 2888, 2910, 2924, 2938, 3027, 3046, 3072, 3098, 3117, 3141, 3167, 3193, 3219, 3245, 3271, 3297, 3323, 3345]), GetLocal(4), GetLocal(6), Call("accept", 2), Pop, PushNil, PushNil, PushNil, PushNil, PushNil, PushNil, PushNil, Instance(["current_class_name", "current_fields", "classes", "depth", "variables", "strings", "code"], ["init", "find_class", "push_code", "begin_method", "end_method", "begin_scope", "end_scope", "add_local", "get_local", "compile_list", "native", "visitAstRoot", "visitAstNeg", "visitAstNot", "visitAstFloat", "visitAstInt", "visitAstString", "visitAstGetField", "visitAstSetField", "visitAstList", "visitAstIndex", "visitAstIndexSet", "visitAstBool", "visitAstNil", "visitAstGetVar", "visitAstGetSelf", "visitAstDef", "visitAstPlus", "visitAstMinus", "visitAstClass", "visitAstBlock", "visitAstReassign", "visitAstInstance", "visitAstNative", "visitAstMethod", "visitAstPop", "visitAstEqualEqual", "visitAstIf", "visitAstReturn", "visitAstWhile", "visitAstOr", "visitAstAnd", "visitAstBangEqual", "visitAstGreater", "visitAstGreaterEqual", "visitAstLess", "visitAstLessEqual", "visitAstGet", "visitAstSet"], [3380, 3400, 3427, 3433, 3443, 3452, 3458, 3511, 3566, 3601, 3621, 3708, 3721, 3732, 3743, 3755, 3767, 3784, 3795, 3811, 3829, 3845, 3866, 3878, 3884, 3976, 3982, 3994, 4010, 4026, 4154, 4167, 4198, 4307, 4367, 4411, 4422, 4438, 4469, 4480, 4521, 4537, 4553, 4569, 4585, 4601, 4617, 4633, 4649]), GetLocal(7), Call("init", 1), Pop, GetLocal(4), GetLocal(7), Call("accept", 2), Pop, PushInt(0), GetLocal(8), GetLocal(7), Get("code"), Native(3), Less, JumpIfFalse(4993), GetLocal(7), Get("code"), GetLocal(8), IndexGet, Print(1), Pop, GetLocal(8), PushInt(1), Plus, SetLocal(8), Jump(4976), PushString(250), GetLocal(7), Get("code"), Print(2), Pop, PushString(251), GetLocal(7), Get("strings"), Print(2), Pop, Pop, Pop, Pop, Pop, Pop, Pop, Pop, Pop, Pop]
Strings: ["(", ")", "[", "]", "{", "}", "<", ">", "=", "+", "-", "/", "*", ".", ",", ":", ";", "!", "@", "#", "class", "and", "or", "else", "if", "for", "nil", "return", "while", "import", "true", "false", "def", "int", "float", "bool", "str", " ", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_", "0123456789", "", "", ".", ".", "\"", "\"", "\\", "\"", "!", "=", "=", "=", ">", "=", "<", "=", "\"", "GetField", "Index", "IndexSet", "GetVar", "Reassign", "Method", "Get", "Set", "token", "expected ", " but got ", "expected identifier but got ", "field", "token", "parse prefix", "GetVar", "Get", "Index", "no infix token match", "GetVar", "Get", "GetField", "call err", "next ", "todo: stmt_set_field", "todo: should pop if method instance or get", "Method", "Instance", "Get", "token", "stmt", "", "/", "/", "\"", "", "L--", "+--", "    ", "|   ", "Root", "Neg", "Not", "GetSelf", "Float(", ")", "Int(", ")", "String(", ")", "Field(", ")", "SetField(", ")", "List", "Index", "IndexSet", "Bool(", ")", "Nil", "GetVar(", ")", "Def: ", "Plus", "Minus", "Class: ", "Field: ", "Method: ", "Block", "Reassign: ", "Instance: ", "Native: ", "MethodCall: ", "Args", "Pop", "EqualEqual", "If", "Return", "While", "Or", "And", "BangEqual", "Greater", "GreaterEqual", "Less", "LessEqual", "Get(", ")", "Set(", ")", "init compiler", "Pop", "var with name: ", " already exists", "the wierd ll thing probably should not be here", "print", "to_string", "read_file", "len", "err", "append", "pop", "compile", "args", "split", "no native function with name: ", "Neg", "Not", "PushFloat(", ")", "PushInt(", ")", "PushString(", ")", "GetField(", ")", "SetField(", ")", "List(", ")", "IndexGet", "IndexSet", "PushBool(", ")", "PushNil", "GetLocal(", ")", "class should not be nil", "trying to call class without arguments? todo?", "Instance([], ", ", ", ")", "PushSelf", "Plus", "Minus", "Jump()", "Class '", "' is already defined", "PushNil", "Return", "Jump(", ")", "Could not find variable: ", "SetLocal(", ")", "Could not find class: ", "Arity does not match", "Instance(", ", ", ", ", ")", "print", "arity does not match", "print", "Print(", ")", "print", "Native(", ")", "PushSelf", "Call(", ", ", ")", "Pop", "Equals", "TEMP", "JumpIfFalse(", ")", "Return", "JumpIfFalse()", "Jump(", ")", "JumpIfFalse(", ")", "Or", "And", "NotEquals", "Greater", "GreaterEqual", "Less", "LessEqual", "Get(", ")", "Set(", ")", "while loop: ", "node:", "its an import!", "import", "input:", "visited ast import", "compiling file: ", "input:", "Bytecode:", "strings:"]

started VM!
compiling file:  lum/main.lum
read content: import { "lexer.lum", "parser.lum", "ast_printer.lum", "compiler.lum", "import_resolver.lum" }

def file = #args(0)

#print("compiling file: ", file)

def input = #read_file(file)
#print("input:", input)

def lexer = Lexer(input, 0)
lexer = Peekable(lexer, nil)

def parser = Parser(lexer, file)
def root = parser.parse_root()

def import_resolver = ImportResolver()
root.accept(import_resolver)

def printer = AstPrinter([], true)

root.accept(printer)

def compiler = Compiler(nil, nil, nil, nil, nil, nil, nil)
compiler.init()
root.accept(compiler)

def i = 0
while i < #len(compiler.code) {
    #print(compiler.code[i])
    i = i + 1
}
#print("Bytecode:", compiler.code)
#print("strings:", compiler.strings)

input: import { "lexer.lum", "parser.lum", "ast_printer.lum", "compiler.lum", "import_resolver.lum" }

def file = #args(0)

#print("compiling file: ", file)

def input = #read_file(file)
#print("input:", input)

def lexer = Lexer(input, 0)
lexer = Peekable(lexer, nil)

def parser = Parser(lexer, file)
def root = parser.parse_root()

def import_resolver = ImportResolver()
root.accept(import_resolver)

def printer = AstPrinter([], true)

root.accept(printer)

def compiler = Compiler(nil, nil, nil, nil, nil, nil, nil)
compiler.init()
root.accept(compiler)

def i = 0
while i < #len(compiler.code) {
    #print(compiler.code[i])
    i = i + 1
}
#print("Bytecode:", compiler.code)
#print("strings:", compiler.strings)

todo: should pop if method instance or get {expr: {name: Peekable, args: [{value: lexer}, {}]}, name: lexer}
todo: should pop if method instance or get {lhs: {value: root}, args: [{value: import_resolver}], name: accept}
todo: should pop if method instance or get {lhs: {value: root}, args: [{value: printer}], name: accept}
todo: should pop if method instance or get {args: [], name: init, lhs: {value: compiler}}
todo: should pop if method instance or get {name: accept, args: [{value: compiler}], lhs: {value: root}}
todo: should pop if method instance or get {name: i, expr: {lhs: {value: i}, rhs: {value: 1}}}
while loop:  0
node: {imports: [lum/lexer.lum, lum/parser.lum, lum/ast_printer.lum, lum/compiler.lum, lum/import_resolver.lum]}
visited ast import
its an import!
import lum/lexer.lum
read content: class Kind {
    LeftParen { return 0 }
    RightParen { return 1 }
    LeftBracket { return 2 }
    RightBracket { return 3 }
    LeftBrace { return 4 }
    RightBrace { return 5 }
    Less { return 6 }
    Greater { return 7 }
    Equal { return 8 }
    Plus { return 9 }
    Minus { return 10 }
    Slash { return 11 }
    Star { return 12 }
    Dot { return 13 }
    Comma { return 14 }
    Colon { return 15 }
    SemiColon { return 16 }
    Bang { return 17 }
    At { return 18 }
    Hash { return 19 }
    Class { return 20 }
    And { return 21 }
    Or { return 22 }
    Else { return 23 }
    If { return 24 }
    For { return 25 }
    Nil { return 26 }
    Return { return 27 }
    While { return 28 }
    Import { return 29 }
    True { return 30 }
    False { return 31 }
    Def { return 32 }
    Int { return 33 }
    Float { return 34 }
    Bool { return 35 }
    Str { return 36 }
    Identifier { return 37 }
    String { return 38 }
    Float { return 40 }
    BangEqual { return 41 }
    EqualEqual { return 42 }
    GreaterEqual { return 43 }
    LessEqual { return 44 }

    from_str(in) {
        def kinds = [
            "(", ")", "[", "]", "{", "}", "<", ">", "=", "+",
            "-", "/", "*", ".", ",", ":", ";", "!", "@", "#",
            "class", "and", "or", "else", "if", "for", "nil",
            "return", "while", "import", "true", "false",
            "def", "int", "float", "bool", "str"
        ]
        def i = 0
        while i < #len(kinds) {
            if in == kinds[i] {
                return i
            }
            i = i + 1
        }
        return nil
    }
}

class Token(value, start, end, kind) {}

class Lexer(code, p) {

    whitespace {
        while @p < #len(@code) and @code[@p] == " " {
            @p = @p + 1
        }
    }

    is_done {
        return @p >= #len(@code)
    }

    letter() {
        if @is_done() {
            return false
        }
        def letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"
        def i = 0
        while i < #len(letters) {
            if letters[i] == @code[@p] {
                return true
            }
            i = i + 1
        }
        return false
    }

    digit() {
        if @is_done() {
            return false
        }
        def digits = "0123456789"
        def i = 0
        while i < #len(digits) {
            if digits[i] == @code[@p] {
                return true
            }
            i = i + 1
        }
        return false
    }

    advance {
        if @p < #len(@code) {
            @p = @p + 1
        }
    }

    identifier() {
        def start = @p
        def val = ""
        while @letter() or @digit() {
            val = val + @code[@p]
            @p = @p + 1
        }
        def end = @p
        def keyword = Kind.from_str(val)
        if keyword != nil {
            return Token(val, start, end, keyword)
        }
        return Token(val, start, end, Kind.Identifier())
    }

    number() {
        def start = @p
        def val = ""
        def is_float = false
        while @digit() or @code[@p] == "." {
            if @code[@p] == "." {
                is_float = true
            }
            val = val + @code[@p]
            @p = @p + 1
        }
        
        def end = @p
        if is_float {
            return Token(val, start, end, Kind.Float())
        }
        return Token(val, start, end, Kind.Int())
    }


string() {
    def start = @p
    def val = "\""
    @p = @p + 1

    while @p < #len(@code) and @code[@p] != "\"" {
        def test = @code[@p] == "\\"
        if test {
            val = val + @code[@p]
            @p = @p + 1
            if @p < #len(@code) {
                val = val + @code[@p]
                @p = @p + 1
            }
        } 
        if !test {
            val = val + @code[@p]
            @p = @p + 1
        }
    }

    if @p < #len(@code) {
        val = val + "\""
        @p = @p + 1
    }

    def end = @p
    return Token(val, start, end, Kind.String())
}



    single_char()  {
        def a = Kind.from_str(@code[@p])
        if a != nil {
            return Token(@code[@p], @p, @p+1, a)
        }
        return nil
    }

    two_char() {
        if (@p + 1) == #len(@code) {
            return nil
        }
        def c1 = @code[@p]
        def c2 = @code[@p+1]
        if c1 == "!" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.BangEqual())
        }
        if c1 == "=" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.EqualEqual())
        }
        if c1 == ">" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.GreaterEqual())
        }
        if c1 == "<" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.LessEqual())
        }
        return nil
    }

    next() {
        if @is_done() {
            return nil
        }
        @whitespace()

        while !@is_done() {
            def two_char = @two_char()
            if two_char != nil {
                @p = @p + 2
                return two_char
            }
            if @letter() {
                return @identifier()
            }
            if @digit() {
                return @number()
            }
            def single_char = @single_char()
            if single_char != nil {
                @p = @p + 1
                return single_char
            }
            if @code[@p] == "\"" {
                return @string()
            }
            @advance()
        }
        return nil
    }
}


class Peekable(item, peek_item) {
    next {
        if @peek_item != nil {
            def temp = @peek_item
            @peek_item = nil
            return temp
        }
        return @item.next()
    }

    peek {
        if @peek_item == nil {
            @peek_item = @item.next()
        }
        return @peek_item
    }
}












input: class Kind {
    LeftParen { return 0 }
    RightParen { return 1 }
    LeftBracket { return 2 }
    RightBracket { return 3 }
    LeftBrace { return 4 }
    RightBrace { return 5 }
    Less { return 6 }
    Greater { return 7 }
    Equal { return 8 }
    Plus { return 9 }
    Minus { return 10 }
    Slash { return 11 }
    Star { return 12 }
    Dot { return 13 }
    Comma { return 14 }
    Colon { return 15 }
    SemiColon { return 16 }
    Bang { return 17 }
    At { return 18 }
    Hash { return 19 }
    Class { return 20 }
    And { return 21 }
    Or { return 22 }
    Else { return 23 }
    If { return 24 }
    For { return 25 }
    Nil { return 26 }
    Return { return 27 }
    While { return 28 }
    Import { return 29 }
    True { return 30 }
    False { return 31 }
    Def { return 32 }
    Int { return 33 }
    Float { return 34 }
    Bool { return 35 }
    Str { return 36 }
    Identifier { return 37 }
    String { return 38 }
    Float { return 40 }
    BangEqual { return 41 }
    EqualEqual { return 42 }
    GreaterEqual { return 43 }
    LessEqual { return 44 }

    from_str(in) {
        def kinds = [
            "(", ")", "[", "]", "{", "}", "<", ">", "=", "+",
            "-", "/", "*", ".", ",", ":", ";", "!", "@", "#",
            "class", "and", "or", "else", "if", "for", "nil",
            "return", "while", "import", "true", "false",
            "def", "int", "float", "bool", "str"
        ]
        def i = 0
        while i < #len(kinds) {
            if in == kinds[i] {
                return i
            }
            i = i + 1
        }
        return nil
    }
}

class Token(value, start, end, kind) {}

class Lexer(code, p) {

    whitespace {
        while @p < #len(@code) and @code[@p] == " " {
            @p = @p + 1
        }
    }

    is_done {
        return @p >= #len(@code)
    }

    letter() {
        if @is_done() {
            return false
        }
        def letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_"
        def i = 0
        while i < #len(letters) {
            if letters[i] == @code[@p] {
                return true
            }
            i = i + 1
        }
        return false
    }

    digit() {
        if @is_done() {
            return false
        }
        def digits = "0123456789"
        def i = 0
        while i < #len(digits) {
            if digits[i] == @code[@p] {
                return true
            }
            i = i + 1
        }
        return false
    }

    advance {
        if @p < #len(@code) {
            @p = @p + 1
        }
    }

    identifier() {
        def start = @p
        def val = ""
        while @letter() or @digit() {
            val = val + @code[@p]
            @p = @p + 1
        }
        def end = @p
        def keyword = Kind.from_str(val)
        if keyword != nil {
            return Token(val, start, end, keyword)
        }
        return Token(val, start, end, Kind.Identifier())
    }

    number() {
        def start = @p
        def val = ""
        def is_float = false
        while @digit() or @code[@p] == "." {
            if @code[@p] == "." {
                is_float = true
            }
            val = val + @code[@p]
            @p = @p + 1
        }
        
        def end = @p
        if is_float {
            return Token(val, start, end, Kind.Float())
        }
        return Token(val, start, end, Kind.Int())
    }


string() {
    def start = @p
    def val = "\""
    @p = @p + 1

    while @p < #len(@code) and @code[@p] != "\"" {
        def test = @code[@p] == "\\"
        if test {
            val = val + @code[@p]
            @p = @p + 1
            if @p < #len(@code) {
                val = val + @code[@p]
                @p = @p + 1
            }
        } 
        if !test {
            val = val + @code[@p]
            @p = @p + 1
        }
    }

    if @p < #len(@code) {
        val = val + "\""
        @p = @p + 1
    }

    def end = @p
    return Token(val, start, end, Kind.String())
}



    single_char()  {
        def a = Kind.from_str(@code[@p])
        if a != nil {
            return Token(@code[@p], @p, @p+1, a)
        }
        return nil
    }

    two_char() {
        if (@p + 1) == #len(@code) {
            return nil
        }
        def c1 = @code[@p]
        def c2 = @code[@p+1]
        if c1 == "!" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.BangEqual())
        }
        if c1 == "=" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.EqualEqual())
        }
        if c1 == ">" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.GreaterEqual())
        }
        if c1 == "<" and c2 == "=" {
            return Token(c1+c2, @p, @p+2, Kind.LessEqual())
        }
        return nil
    }

    next() {
        if @is_done() {
            return nil
        }
        @whitespace()

        while !@is_done() {
            def two_char = @two_char()
            if two_char != nil {
                @p = @p + 2
                return two_char
            }
            if @letter() {
                return @identifier()
            }
            if @digit() {
                return @number()
            }
            def single_char = @single_char()
            if single_char != nil {
                @p = @p + 1
                return single_char
            }
            if @code[@p] == "\"" {
                return @string()
            }
            @advance()
        }
        return nil
    }
}


class Peekable(item, peek_item) {
    next {
        if @peek_item != nil {
            def temp = @peek_item
            @peek_item = nil
            return temp
        }
        return @item.next()
    }

    peek {
        if @peek_item == nil {
            @peek_item = @item.next()
        }
        return @peek_item
    }
}












todo: should pop if method instance or get {expr: {rhs: {value: 1}, lhs: {value: i}}, name: i}
todo: should pop if method instance or get {expr: {lhs: {value: i}, rhs: {value: 1}}, name: i}
todo: should pop if method instance or get {name: i, expr: {rhs: {value: 1}, lhs: {value: i}}}
todo: should pop if method instance or get {expr: {rhs: {indexer: {value: p}, lhs: {value: code}}, lhs: {value: val}}, name: val}
todo: should pop if method instance or get {expr: {value: true}, name: is_float}
todo: should pop if method instance or get {expr: {lhs: {value: val}, rhs: {lhs: {value: code}, indexer: {value: p}}}, name: val}
todo: should pop if method instance or get {name: val, expr: {lhs: {value: val}, rhs: {indexer: {value: p}, lhs: {value: code}}}}
todo: should pop if method instance or get {name: val, expr: {rhs: {lhs: {value: code}, indexer: {value: p}}, lhs: {value: val}}}
todo: should pop if method instance or get {name: val, expr: {lhs: {value: val}, rhs: {indexer: {value: p}, lhs: {value: code}}}}
todo: should pop if method instance or get {expr: {lhs: {value: val}, rhs: {value: "\""}}, name: val}
import lum/parser.lum
read content: class AstRoot(nodes) { accept(visitor) { return visitor.visitAstRoot(@) }}
class AstNeg(expr) { accept(visitor) { return visitor.visitAstNeg(@) } }
class AstNot(expr) { accept(visitor) { return visitor.visitAstNot(@) } }
class AstFloat(value) { accept(visitor) { return visitor.visitAstFloat(@) } }
class AstInt(value) { accept(visitor) { return visitor.visitAstInt(@) } }
class AstString(value) { accept(visitor) { return visitor.visitAstString(@) } }
class AstGetField(value) {
    accept(visitor) { return visitor.visitAstGetField(@) }
    kind { return "GetField" }
}
class AstSetField(name, expr) { accept(visitor) { return visitor.visitAstSetField(@) } }
class AstList(items) { accept(visitor) { return visitor.visitAstList(@) } }
class AstIndex(lhs, indexer) {
    accept(visitor) { return visitor.visitAstIndex(@) }
    kind { return "Index" }
}
class AstIndexSet(lhs, indexer, rhs) {
    accept(visitor) { return visitor.visitAstIndexSet(@) }
    kind { return "IndexSet" }
}
class AstBool(value) { accept(visitor) { return visitor.visitAstBool(@) } }
class AstNil() { accept(visitor) { return visitor.visitAstNil(@) } }
class AstGetVar(value) {
    accept(visitor) { return visitor.visitAstGetVar(@) }
    kind { return "GetVar" }
}
class AstDef(name, expr) { accept(visitor) { return visitor.visitAstDef(@) } }
class AstPlus(lhs, rhs) { accept(visitor) { return visitor.visitAstPlus(@) } }
class AstMinus(lhs, rhs) { accept(visitor) { return visitor.visitAstMinus(@) } }
class AstClass(name, fields, methods) { accept(visitor) { return visitor.visitAstClass(@) } }
class AstBlock(stmts) { accept(visitor) { return visitor.visitAstBlock(@) } }
class AstReassign(name, expr) {
    accept(visitor) { return visitor.visitAstReassign(@) }
    kind { return "Reassign" }
}
class AstInstance(name, args) { accept(visitor) { return visitor.visitAstInstance(@) } }
class AstNative(name, args) { accept(visitor) { return visitor.visitAstNative(@) } }
class AstMethod(name, args, lhs) {
    accept(visitor) { return visitor.visitAstMethod(@) }
    kind { return "Method"}
}
class AstPop(expr) { accept(visitor) { return visitor.visitAstPop(@) } }
class AstEqualEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstEqualEqual(@) } }
class AstIf(condition, block) { accept(visitor) { return visitor.visitAstIf(@) } }
class AstReturn(expr) { accept(visitor) { return visitor.visitAstReturn(@) } }
class AstWhile(condition, block) { accept(visitor) { return visitor.visitAstWhile(@) } }
class AstOr(lhs, rhs) { accept(visitor) { return visitor.visitAstOr(@) } }
class AstAnd(lhs, rhs) { accept(visitor) { return visitor.visitAstAnd(@) } }
class AstBangEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstBangEqual(@) } }
class AstGreater(lhs, rhs) { accept(visitor) { return visitor.visitAstGreater(@) } }
class AstGreaterEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstGreaterEqual(@) } }
class AstLess(lhs, rhs) { accept(visitor) { return visitor.visitAstLess(@) } }
class AstLessEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstLessEqual(@) } }
class AstGet(lhs, field) {
    accept(visitor) { return visitor.visitAstGet(@) }
    kind { return "Get" }
}
class AstImport(imports) { accept (visitor) { return visitor.visitAstImport(@) } }
class AstSet(lhs, field, rhs) {
    accept(visitor) { return visitor.visitAstSet(@) }
    kind { return "Set" }
}
class AstGetSelf() { accept(visitor) { return visitor.visitAstGetSelf(@) } }


class Method(name, params, block) {}

class Parser(lexer, file) {
    consume(kind) {
        def token = @lexer.next()
        if kind != token.kind {
            #print("token", token)
            #err("expected " + #to_string(kind) + " but got " + #to_string(token.kind))
        }
    }

    consume_identifier() {
        def token = @lexer.next()
        if token.kind != Kind.Identifier() {
            #err("expected identifier but got " + #to_string(token.kind))
        }
        return token.value
    }
    infix_prec(token) {
        if token == nil { return 0 }
        if token.kind == Kind.Equal() { return 1 }
        if token.kind == Kind.Or() { return 3 }
        if token.kind == Kind.And() { return 4 }
        if (token.kind == Kind.BangEqual()) or (token.kind == Kind.EqualEqual()) { return 5 }
        if (token.kind == Kind.Greater()) or (token.kind == Kind.GreaterEqual()) or (token.kind == Kind.Less()) or (token.kind == Kind.LessEqual()) { return 6 }
        if (token.kind == Kind.Plus()) or (token.kind == Kind.Minus()) { return 7 }
        if (token.kind == Kind.Star()) or (token.kind == Kind.Slash()) { return 8 }
        if (token.kind == Kind.LeftParen()) or (token.kind == Kind.LeftBracket()) { return 10 }
        if token.kind == Kind.Dot() { return 11 }
        return 0
    }


    field {
        if @lexer.peek().kind == Kind.Identifier() {
            def name = @consume_identifier()
            return AstGetField(name)
        }
        return AstGetSelf()
        #err("field")
    }

    grouping {
        def node = @expr()
        @consume(Kind.RightParen())
        return node
    }


    parse_prefix() {
        def token = @lexer.next()
        if token.kind == Kind.Minus() { return AstNeg(@parse_expr(9)) }
        if token.kind == Kind.Bang() { return AstNot(@parse_expr(9)) }
        if token.kind == Kind.LeftBracket() { return @list() }
        if token.kind == Kind.Identifier() { return AstGetVar(token.value) }
        if token.kind == Kind.Int() { return AstInt(token.value) }
        if token.kind == Kind.Float() { return AstFloat(token.value) }
        if token.kind == Kind.String() { return AstString(token.value) }
        if token.kind == Kind.True() { return AstBool(true) }
        if token.kind == Kind.False() { return AstBool(false) }
        if token.kind == Kind.Nil() { return AstNil }
        if token.kind == Kind.At() {
            return @field()
        }
        if token.kind == Kind.Hash() { return @native() }
        if token.kind == Kind.LeftParen() { return @grouping() }
        #print("token", token)
        #err("parse prefix")
    }

    match_infix_token(lhs, rhs, kind) {
        if kind == Kind.Or() { return AstOr(lhs, rhs) }
        if kind == Kind.And() { return AstAnd(lhs, rhs) }
        if kind == Kind.BangEqual() { return AstBangEqual(lhs, rhs) }
        if kind == Kind.EqualEqual() { return AstEqualEqual(lhs, rhs) }
        if kind == Kind.Greater() { return AstGreater(lhs, rhs) }
        if kind == Kind.GreaterEqual() { return AstGreaterEqual(lhs, rhs) }
        if kind == Kind.Less() { return AstLess(lhs, rhs) }
        if kind == Kind.LessEqual() { return AstLessEqual(lhs, rhs) }
        if kind == Kind.Plus() { return AstPlus(lhs, rhs) }
        if kind == Kind.Minus() { return AstMinus(lhs, rhs) }
        if kind == Kind.Equal() { 
            if lhs.kind() == "GetVar" {
                return AstReassign(lhs.value, rhs)
            }
            if lhs.kind() == "Get" {
                return AstSet(lhs.lhs, lhs.field, rhs)
            }
            if lhs.kind() == "Index" {
                return AstIndexSet(lhs.lhs, lhs.indexer, rhs)
            }
            
        }
        #err("no infix token match")
    }

    call(lhs) {
        def args = []
        while @lexer.peek().kind != Kind.RightParen() {
            #append(args, @expr())
            if @lexer.peek().kind == Kind.Comma() {
                @consume(Kind.Comma())
            }
        }
        @consume(Kind.RightParen())
        if lhs.kind() == "GetVar" { return AstInstance(lhs.value, args) }
        if lhs.kind() == "Get" { return AstMethod(lhs.field, args, lhs.lhs) }
        if lhs.kind() == "GetField" { return AstMethod(lhs.value, args, nil) }
        #err("call err")
    }

    index(lhs) {
        def expr = @expr()
        @consume(Kind.RightBracket())
        return AstIndex(lhs, expr)
    }

    get_or_set(lhs) {
        def name = @consume_identifier()
        return AstGet(lhs, name)
    }


    parse_infix(lhs) {
        def token = @lexer.peek()
        while token != nil {
            if token.kind == Kind.LeftParen() {
                @consume(Kind.LeftParen())
                lhs = @call(lhs)
            }
            if token.kind == Kind.LeftBracket() {
                @consume(Kind.LeftBracket())
                lhs = @index(lhs)
            }
            if token.kind == Kind.Dot() {
                @consume(Kind.Dot())
                lhs = @get_or_set(lhs)
            }
            if (token.kind != Kind.LeftParen()) and (token.kind != Kind.LeftBracket()) and (token.kind != Kind.Dot()) {
                def next_prec = @infix_prec(token)
                if next_prec == 0 {
                    return lhs
                }
                @consume(token.kind)
                def rhs = @parse_expr(next_prec)
                lhs = @match_infix_token(lhs, rhs, token.kind)
            }
            token = @lexer.peek()
        }
        return lhs
    }


    parse_expr(prec) {
        def lhs = @parse_prefix()
        while prec < @infix_prec(@lexer.peek()) {
            lhs = @parse_infix(lhs)
        }
        return lhs
    }

    expr {
        return @parse_expr(0)
    }

    block {
        @consume(Kind.LeftBrace())
        def stmts = []
        def done = false
        while !done {
            def token = @lexer.peek()
            if token.kind == Kind.RightBrace() {
                done = true
            }
            if token.kind != Kind.RightBrace() {
                #append(stmts, @stmt())
            }
        }
        @consume(Kind.RightBrace())
        return AstBlock(stmts)
    }

    param_list {
        if @lexer.peek().kind != Kind.LeftParen() {
            return []
        }
        @consume(Kind.LeftParen())
        def res = []
        while @lexer.peek().kind != Kind.RightParen() {
            def token = @lexer.peek()
            if token.kind == Kind.Identifier() {
                def name = @consume_identifier()
                #append(res, name)
            }
            if token.kind == Kind.Comma() {
                @consume(Kind.Comma())
            }
        }
        @consume(Kind.RightParen())
        return res
    }

    stmt_def {
        @consume(Kind.Def())
        def name = @consume_identifier()
        @consume(Kind.Equal())
        def expr = @expr()
        return AstDef(name, expr)
    }

    stmt_class {
        @consume(Kind.Class())
        def name = @consume_identifier()
        def fields = @param_list()
        @consume(Kind.LeftBrace())

        def methods = []

        while @lexer.peek().kind != Kind.RightBrace() {
            def method_name = @consume_identifier()
            def params = @param_list()
            def block = @block()
            #append(methods, Method(method_name, params, block))
        }
        @consume(Kind.RightBrace())
        return AstClass(name, fields, methods)
    }

    list {
        def items = []
        def token = @lexer.peek()
        def is_first = true
        while token.kind != Kind.RightBracket() {
            if !is_first {
                @consume(Kind.Comma())
            }
            is_first = false
            #append(items, @expr())
            token = @lexer.peek()
        }
        @consume(Kind.RightBracket())
        return AstList(items)
    }
    stmt_if {
        @consume(Kind.If())
        def expr = @expr()
        def block = @block()
        return AstIf(expr, block)
    }

    stmt_while {
        @consume(Kind.While())
        def condition = @expr()
        def block = @block()
        return AstWhile(condition, block)
    }
    stmt_return {
        @consume(Kind.Return())
        return AstReturn(@expr())
    }

    stmt_set_field {
        @consume(Kind.At())
        def name = @consume_identifier()
        def next = @lexer.next()
        if next.kind == Kind.Equal() {
            return AstSetField(name, @expr())
        }
        if next.kind == Kind.LeftParen() {
            return AstPop(@call(AstGetField(name)))
        }
        if next.kind == Kind.LeftBracket() {
            def indexer = @expr()
            @consume(Kind.RightBracket())
            @consume(Kind.Equal())
            def rhs = @expr()
            return AstIndexSet(AstGetField(name), indexer, rhs)
        }
        #print("next ", next)
        #err("todo: stmt_set_field")
    }

    native {
        def name = @consume_identifier()
        @consume(Kind.LeftParen())
        def args = []

        def done = @lexer.peek().kind == Kind.RightParen()
        while !done {
            #append(args, @expr())

            def token = @lexer.peek().kind
            if token == Kind.Comma() {
                @consume(Kind.Comma())
            }
            if token == Kind.RightParen() {
                done = true
            }
        }
        @consume(Kind.RightParen())
        return AstNative(name, args)
    }

    stmt {
        def token = @lexer.peek()
        if token.kind == Kind.LeftBrace() { return @block() }
        if token.kind == Kind.Def() { return @stmt_def() }
        if token.kind == Kind.LeftBracket()  { return @list() }
        if token.kind == Kind.Class() { return @stmt_class() }
        if token.kind == Kind.Identifier() {
            def expr = @expr()
            #print("todo: should pop if method instance or get", expr)
            def kind = expr.kind()
            if kind == "Method" or kind == "Instance" or kind == "Get" {
                return AstPop(expr)
            }
            return expr
        }
        if token.kind == Kind.If() { return @stmt_if() }
        if token.kind == Kind.While() { return @stmt_while() }
        if token.kind == Kind.Return() { return @stmt_return() }
        if token.kind == Kind.At() { return @stmt_set_field() }
        if token.kind == Kind.Hash() { 
            @consume(Kind.Hash())
            return AstPop(@native())
        }
        if token.kind == Kind.Import() { return @stmt_import() }
        #print("token", token)

        #err("stmt")
    }

    parse_root {
        def root_list = []
        while @lexer.peek() != nil {
            def node = @stmt()
            #append(root_list, node)
        }
        return AstRoot(root_list)
    }

    stmt_import {
        @consume(Kind.Import())
        @consume(Kind.LeftBrace())
        def imports = []
        def token = @lexer.next()

        while token.kind != Kind.RightBrace() {
            if token.kind == Kind.String() {
                def buf = ""
                def split = #split(@file, "/")
                def i = 0
                while i < (#len(split) - 1) {
                    buf = buf + split[i] + "/"
                    i = i + 1
                }

                buf = buf + #split(token.value, "\"")[0]
                #append(imports, buf)
            }
            token = @lexer.next()
        }
        return AstImport(imports)
    }
}

input: class AstRoot(nodes) { accept(visitor) { return visitor.visitAstRoot(@) }}
class AstNeg(expr) { accept(visitor) { return visitor.visitAstNeg(@) } }
class AstNot(expr) { accept(visitor) { return visitor.visitAstNot(@) } }
class AstFloat(value) { accept(visitor) { return visitor.visitAstFloat(@) } }
class AstInt(value) { accept(visitor) { return visitor.visitAstInt(@) } }
class AstString(value) { accept(visitor) { return visitor.visitAstString(@) } }
class AstGetField(value) {
    accept(visitor) { return visitor.visitAstGetField(@) }
    kind { return "GetField" }
}
class AstSetField(name, expr) { accept(visitor) { return visitor.visitAstSetField(@) } }
class AstList(items) { accept(visitor) { return visitor.visitAstList(@) } }
class AstIndex(lhs, indexer) {
    accept(visitor) { return visitor.visitAstIndex(@) }
    kind { return "Index" }
}
class AstIndexSet(lhs, indexer, rhs) {
    accept(visitor) { return visitor.visitAstIndexSet(@) }
    kind { return "IndexSet" }
}
class AstBool(value) { accept(visitor) { return visitor.visitAstBool(@) } }
class AstNil() { accept(visitor) { return visitor.visitAstNil(@) } }
class AstGetVar(value) {
    accept(visitor) { return visitor.visitAstGetVar(@) }
    kind { return "GetVar" }
}
class AstDef(name, expr) { accept(visitor) { return visitor.visitAstDef(@) } }
class AstPlus(lhs, rhs) { accept(visitor) { return visitor.visitAstPlus(@) } }
class AstMinus(lhs, rhs) { accept(visitor) { return visitor.visitAstMinus(@) } }
class AstClass(name, fields, methods) { accept(visitor) { return visitor.visitAstClass(@) } }
class AstBlock(stmts) { accept(visitor) { return visitor.visitAstBlock(@) } }
class AstReassign(name, expr) {
    accept(visitor) { return visitor.visitAstReassign(@) }
    kind { return "Reassign" }
}
class AstInstance(name, args) { accept(visitor) { return visitor.visitAstInstance(@) } }
class AstNative(name, args) { accept(visitor) { return visitor.visitAstNative(@) } }
class AstMethod(name, args, lhs) {
    accept(visitor) { return visitor.visitAstMethod(@) }
    kind { return "Method"}
}
class AstPop(expr) { accept(visitor) { return visitor.visitAstPop(@) } }
class AstEqualEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstEqualEqual(@) } }
class AstIf(condition, block) { accept(visitor) { return visitor.visitAstIf(@) } }
class AstReturn(expr) { accept(visitor) { return visitor.visitAstReturn(@) } }
class AstWhile(condition, block) { accept(visitor) { return visitor.visitAstWhile(@) } }
class AstOr(lhs, rhs) { accept(visitor) { return visitor.visitAstOr(@) } }
class AstAnd(lhs, rhs) { accept(visitor) { return visitor.visitAstAnd(@) } }
class AstBangEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstBangEqual(@) } }
class AstGreater(lhs, rhs) { accept(visitor) { return visitor.visitAstGreater(@) } }
class AstGreaterEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstGreaterEqual(@) } }
class AstLess(lhs, rhs) { accept(visitor) { return visitor.visitAstLess(@) } }
class AstLessEqual(lhs, rhs) { accept(visitor) { return visitor.visitAstLessEqual(@) } }
class AstGet(lhs, field) {
    accept(visitor) { return visitor.visitAstGet(@) }
    kind { return "Get" }
}
class AstImport(imports) { accept (visitor) { return visitor.visitAstImport(@) } }
class AstSet(lhs, field, rhs) {
    accept(visitor) { return visitor.visitAstSet(@) }
    kind { return "Set" }
}
class AstGetSelf() { accept(visitor) { return visitor.visitAstGetSelf(@) } }


class Method(name, params, block) {}

class Parser(lexer, file) {
    consume(kind) {
        def token = @lexer.next()
        if kind != token.kind {
            #print("token", token)
            #err("expected " + #to_string(kind) + " but got " + #to_string(token.kind))
        }
    }

    consume_identifier() {
        def token = @lexer.next()
        if token.kind != Kind.Identifier() {
            #err("expected identifier but got " + #to_string(token.kind))
        }
        return token.value
    }
    infix_prec(token) {
        if token == nil { return 0 }
        if token.kind == Kind.Equal() { return 1 }
        if token.kind == Kind.Or() { return 3 }
        if token.kind == Kind.And() { return 4 }
        if (token.kind == Kind.BangEqual()) or (token.kind == Kind.EqualEqual()) { return 5 }
        if (token.kind == Kind.Greater()) or (token.kind == Kind.GreaterEqual()) or (token.kind == Kind.Less()) or (token.kind == Kind.LessEqual()) { return 6 }
        if (token.kind == Kind.Plus()) or (token.kind == Kind.Minus()) { return 7 }
        if (token.kind == Kind.Star()) or (token.kind == Kind.Slash()) { return 8 }
        if (token.kind == Kind.LeftParen()) or (token.kind == Kind.LeftBracket()) { return 10 }
        if token.kind == Kind.Dot() { return 11 }
        return 0
    }


    field {
        if @lexer.peek().kind == Kind.Identifier() {
            def name = @consume_identifier()
            return AstGetField(name)
        }
        return AstGetSelf()
        #err("field")
    }

    grouping {
        def node = @expr()
        @consume(Kind.RightParen())
        return node
    }


    parse_prefix() {
        def token = @lexer.next()
        if token.kind == Kind.Minus() { return AstNeg(@parse_expr(9)) }
        if token.kind == Kind.Bang() { return AstNot(@parse_expr(9)) }
        if token.kind == Kind.LeftBracket() { return @list() }
        if token.kind == Kind.Identifier() { return AstGetVar(token.value) }
        if token.kind == Kind.Int() { return AstInt(token.value) }
        if token.kind == Kind.Float() { return AstFloat(token.value) }
        if token.kind == Kind.String() { return AstString(token.value) }
        if token.kind == Kind.True() { return AstBool(true) }
        if token.kind == Kind.False() { return AstBool(false) }
        if token.kind == Kind.Nil() { return AstNil }
        if token.kind == Kind.At() {
            return @field()
        }
        if token.kind == Kind.Hash() { return @native() }
        if token.kind == Kind.LeftParen() { return @grouping() }
        #print("token", token)
        #err("parse prefix")
    }

    match_infix_token(lhs, rhs, kind) {
        if kind == Kind.Or() { return AstOr(lhs, rhs) }
        if kind == Kind.And() { return AstAnd(lhs, rhs) }
        if kind == Kind.BangEqual() { return AstBangEqual(lhs, rhs) }
        if kind == Kind.EqualEqual() { return AstEqualEqual(lhs, rhs) }
        if kind == Kind.Greater() { return AstGreater(lhs, rhs) }
        if kind == Kind.GreaterEqual() { return AstGreaterEqual(lhs, rhs) }
        if kind == Kind.Less() { return AstLess(lhs, rhs) }
        if kind == Kind.LessEqual() { return AstLessEqual(lhs, rhs) }
        if kind == Kind.Plus() { return AstPlus(lhs, rhs) }
        if kind == Kind.Minus() { return AstMinus(lhs, rhs) }
        if kind == Kind.Equal() { 
            if lhs.kind() == "GetVar" {
                return AstReassign(lhs.value, rhs)
            }
            if lhs.kind() == "Get" {
                return AstSet(lhs.lhs, lhs.field, rhs)
            }
            if lhs.kind() == "Index" {
                return AstIndexSet(lhs.lhs, lhs.indexer, rhs)
            }
            
        }
        #err("no infix token match")
    }

    call(lhs) {
        def args = []
        while @lexer.peek().kind != Kind.RightParen() {
            #append(args, @expr())
            if @lexer.peek().kind == Kind.Comma() {
                @consume(Kind.Comma())
            }
        }
        @consume(Kind.RightParen())
        if lhs.kind() == "GetVar" { return AstInstance(lhs.value, args) }
        if lhs.kind() == "Get" { return AstMethod(lhs.field, args, lhs.lhs) }
        if lhs.kind() == "GetField" { return AstMethod(lhs.value, args, nil) }
        #err("call err")
    }

    index(lhs) {
        def expr = @expr()
        @consume(Kind.RightBracket())
        return AstIndex(lhs, expr)
    }

    get_or_set(lhs) {
        def name = @consume_identifier()
        return AstGet(lhs, name)
    }


    parse_infix(lhs) {
        def token = @lexer.peek()
        while token != nil {
            if token.kind == Kind.LeftParen() {
                @consume(Kind.LeftParen())
                lhs = @call(lhs)
            }
            if token.kind == Kind.LeftBracket() {
                @consume(Kind.LeftBracket())
                lhs = @index(lhs)
            }
            if token.kind == Kind.Dot() {
                @consume(Kind.Dot())
                lhs = @get_or_set(lhs)
            }
            if (token.kind != Kind.LeftParen()) and (token.kind != Kind.LeftBracket()) and (token.kind != Kind.Dot()) {
                def next_prec = @infix_prec(token)
                if next_prec == 0 {
                    return lhs
                }
                @consume(token.kind)
                def rhs = @parse_expr(next_prec)
                lhs = @match_infix_token(lhs, rhs, token.kind)
            }
            token = @lexer.peek()
        }
        return lhs
    }


    parse_expr(prec) {
        def lhs = @parse_prefix()
        while prec < @infix_prec(@lexer.peek()) {
            lhs = @parse_infix(lhs)
        }
        return lhs
    }

    expr {
        return @parse_expr(0)
    }

    block {
        @consume(Kind.LeftBrace())
        def stmts = []
        def done = false
        while !done {
            def token = @lexer.peek()
            if token.kind == Kind.RightBrace() {
                done = true
            }
            if token.kind != Kind.RightBrace() {
                #append(stmts, @stmt())
            }
        }
        @consume(Kind.RightBrace())
        return AstBlock(stmts)
    }

    param_list {
        if @lexer.peek().kind != Kind.LeftParen() {
            return []
        }
        @consume(Kind.LeftParen())
        def res = []
        while @lexer.peek().kind != Kind.RightParen() {
            def token = @lexer.peek()
            if token.kind == Kind.Identifier() {
                def name = @consume_identifier()
                #append(res, name)
            }
            if token.kind == Kind.Comma() {
                @consume(Kind.Comma())
            }
        }
        @consume(Kind.RightParen())
        return res
    }

    stmt_def {
        @consume(Kind.Def())
        def name = @consume_identifier()
        @consume(Kind.Equal())
        def expr = @expr()
        return AstDef(name, expr)
    }

    stmt_class {
        @consume(Kind.Class())
        def name = @consume_identifier()
        def fields = @param_list()
        @consume(Kind.LeftBrace())

        def methods = []

        while @lexer.peek().kind != Kind.RightBrace() {
            def method_name = @consume_identifier()
            def params = @param_list()
            def block = @block()
            #append(methods, Method(method_name, params, block))
        }
        @consume(Kind.RightBrace())
        return AstClass(name, fields, methods)
    }

    list {
        def items = []
        def token = @lexer.peek()
        def is_first = true
        while token.kind != Kind.RightBracket() {
            if !is_first {
                @consume(Kind.Comma())
            }
            is_first = false
            #append(items, @expr())
            token = @lexer.peek()
        }
        @consume(Kind.RightBracket())
        return AstList(items)
    }
    stmt_if {
        @consume(Kind.If())
        def expr = @expr()
        def block = @block()
        return AstIf(expr, block)
    }

    stmt_while {
        @consume(Kind.While())
        def condition = @expr()
        def block = @block()
        return AstWhile(condition, block)
    }
    stmt_return {
        @consume(Kind.Return())
        return AstReturn(@expr())
    }

    stmt_set_field {
        @consume(Kind.At())
        def name = @consume_identifier()
        def next = @lexer.next()
        if next.kind == Kind.Equal() {
            return AstSetField(name, @expr())
        }
        if next.kind == Kind.LeftParen() {
            return AstPop(@call(AstGetField(name)))
        }
        if next.kind == Kind.LeftBracket() {
            def indexer = @expr()
            @consume(Kind.RightBracket())
            @consume(Kind.Equal())
            def rhs = @expr()
            return AstIndexSet(AstGetField(name), indexer, rhs)
        }
        #print("next ", next)
        #err("todo: stmt_set_field")
    }

    native {
        def name = @consume_identifier()
        @consume(Kind.LeftParen())
        def args = []

        def done = @lexer.peek().kind == Kind.RightParen()
        while !done {
            #append(args, @expr())

            def token = @lexer.peek().kind
            if token == Kind.Comma() {
                @consume(Kind.Comma())
            }
            if token == Kind.RightParen() {
                done = true
            }
        }
        @consume(Kind.RightParen())
        return AstNative(name, args)
    }

    stmt {
        def token = @lexer.peek()
        if token.kind == Kind.LeftBrace() { return @block() }
        if token.kind == Kind.Def() { return @stmt_def() }
        if token.kind == Kind.LeftBracket()  { return @list() }
        if token.kind == Kind.Class() { return @stmt_class() }
        if token.kind == Kind.Identifier() {
            def expr = @expr()
            #print("todo: should pop if method instance or get", expr)
            def kind = expr.kind()
            if kind == "Method" or kind == "Instance" or kind == "Get" {
                return AstPop(expr)
            }
            return expr
        }
        if token.kind == Kind.If() { return @stmt_if() }
        if token.kind == Kind.While() { return @stmt_while() }
        if token.kind == Kind.Return() { return @stmt_return() }
        if token.kind == Kind.At() { return @stmt_set_field() }
        if token.kind == Kind.Hash() { 
            @consume(Kind.Hash())
            return AstPop(@native())
        }
        if token.kind == Kind.Import() { return @stmt_import() }
        #print("token", token)

        #err("stmt")
    }

    parse_root {
        def root_list = []
        while @lexer.peek() != nil {
            def node = @stmt()
            #append(root_list, node)
        }
        return AstRoot(root_list)
    }

    stmt_import {
        @consume(Kind.Import())
        @consume(Kind.LeftBrace())
        def imports = []
        def token = @lexer.next()

        while token.kind != Kind.RightBrace() {
            if token.kind == Kind.String() {
                def buf = ""
                def split = #split(@file, "/")
                def i = 0
                while i < (#len(split) - 1) {
                    buf = buf + split[i] + "/"
                    i = i + 1
                }

                buf = buf + #split(token.value, "\"")[0]
                #append(imports, buf)
            }
            token = @lexer.next()
        }
        return AstImport(imports)
    }
}

todo: should pop if method instance or get {expr: {name: call, lhs: nil, args: [{value: lhs}]}, name: lhs}
todo: should pop if method instance or get {expr: {lhs: nil, args: [{value: lhs}], name: index}, name: lhs}
todo: should pop if method instance or get {expr: {name: get_or_set, lhs: nil, args: [{value: lhs}]}, name: lhs}
todo: should pop if method instance or get {expr: {args: [{value: lhs}, {value: rhs}, {lhs: {value: token}, field: kind}], name: match_infix_token, lhs: nil}, name: lhs}
todo: should pop if method instance or get {name: token, expr: {lhs: {value: lexer}, args: [], name: peek}}
todo: should pop if method instance or get {expr: {lhs: nil, args: [{value: lhs}], name: parse_infix}, name: lhs}
todo: should pop if method instance or get {name: done, expr: {value: true}}
todo: should pop if method instance or get {expr: {value: false}, name: is_first}
todo: should pop if method instance or get {name: token, expr: {name: peek, args: [], lhs: {value: lexer}}}
todo: should pop if method instance or get {expr: {value: true}, name: done}
todo: should pop if method instance or get {expr: {rhs: {rhs: {value: "/"}, lhs: {indexer: {value: i}, lhs: {value: split}}}, lhs: {value: buf}}, name: buf}
todo: should pop if method instance or get {expr: {lhs: {value: i}, rhs: {value: 1}}, name: i}
todo: should pop if method instance or get {expr: {rhs: {lhs: {name: split, args: [{field: value, lhs: {value: token}}, {value: "\""}]}, indexer: {value: 0}}, lhs: {value: buf}}, name: buf}
todo: should pop if method instance or get {expr: {args: [], name: next, lhs: {value: lexer}}, name: token}
import lum/ast_printer.lum
read content: class AstPrinter(indent, is_last) {

    print_node(text) {
        def i = 0
        def ind = ""
        while i < #len(@indent) {
            ind = ind + @indent[i]
            i = i + 1
        }
        if @is_last {
            #print(ind + "L--", text)
        }
        if !@is_last {
            #print(ind + "+--", text)
        }
    }

    add_indent {
        if @is_last {
            #append(@indent, "    ")
        }
        if !@is_last {
            #append(@indent, "|   ")
        }
    }

    pop_indent {
        #pop(@indent)
    }

    loop(list) {
        @add_indent()
        def i = 0
        while i < #len(list) {
            @is_last = false
            if i == #len(list) - 1 {
                @is_last = true
            }
            list[i].accept(@)
            i = i + 1
        }
        @pop_indent()
    }
    
    visitAstRoot(self) {
        @print_node("Root")
        @loop(self.nodes)
    }

    visitAstNeg(self) {
        @print_node("Neg")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstNot(self) {
        @print_node("Not")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstGetSelf(self) { @print_node("GetSelf") }
    visitAstFloat(self) { @print_node("Float(" + self.value + ")") }
    visitAstInt(self) {
        @print_node("Int(" + self.value + ")")
    }
    visitAstString(self) { 
        @print_node("String(" + self.value + ")")
    }
    visitAstGetField(self) {
        @print_node("Field(" + self.value + ")")
    }
    visitAstSetField(self) {
        @print_node("SetField(" + self.name + ")")
        @is_last = true
        @add_indent()
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstList(self) {
        @print_node("List")
        @loop(self.items)
    }
    visitAstIndex(self) {
        @print_node("Index")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.indexer.accept(@)
        @pop_indent()
    }
    visitAstIndexSet(self) {
        @print_node("IndexSet")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        self.indexer.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstBool(self) {
        @print_node("Bool(" + #to_string(self.value) + ")")
    }
    visitAstNil(self) { @print_node("Nil") }
    visitAstGetVar(self) {
        @print_node("GetVar(" + self.value + ")")
    }
    visitAstDef(self) {
        @print_node("Def: " + self.name)
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstPlus(self) {
        @print_node("Plus")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }

    visitAstMinus(self) {
        @print_node("Minus")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstClass(self) {
        @print_node("Class: " + self.name)

        @add_indent()
        def i = 0
        while i < #len(self.fields) {
            @is_last = #len(self.methods) == 0 and i == (#len(self.fields) - 1)
            @print_node("Field: " + self.fields[i])
            i = i + 1
        }

        i = 0
        while i < #len(self.methods) {
            if i == #len(self.methods) - 1 {
                @is_last = true
            }
            @print_node("Method: " + self.methods[i].name)
            @add_indent()
            self.methods[i].block.accept(@)
            @pop_indent()
            i = i + 1
        }
        @pop_indent()

    }
    visitAstBlock(self) {
        @print_node("Block")
        @loop(self.stmts)
    }
    visitAstReassign(self) {
        @print_node("Reassign: " + self.name)
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstInstance(self) {
        @print_node(("Instance: " + self.name))
        @loop(self.args)
    }
    visitAstNative(self) {
        @print_node("Native: " + self.name)
        @loop(self.args)
    }
    visitAstMethod(self) {
        @print_node("MethodCall: " + self.name)
        @add_indent()
        @is_last = self.lhs == nil and #len(self.args) == 0
        def i = 0
        if #len(self.args) > 0 {
            @print_node("Args")
            @add_indent()
            @is_last = self.lhs == nil
            while i < #len(self.args) {
                if i == #len(self.args) - 1 {
                    @is_last = true
                }
                self.args[i].accept(@)
                i = i + 1
            }
            @pop_indent()
        }
        if self.lhs != nil {
            @is_last = true
            self.lhs.accept(@)
        }
        @pop_indent()
    }
    visitAstPop(self) { 
        @print_node("Pop")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstEqualEqual(self) {
        @print_node("EqualEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstIf(self) {
        @print_node("If")
        @add_indent()
        @is_last = false
        self.condition.accept(@)
        @is_last = true
        self.block.accept(@)
        @pop_indent()
    }
    visitAstReturn(self) {
        @print_node("Return")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstWhile(self) {
        @print_node("While")
        @add_indent()
        self.condition.accept(@)
        @is_last = true
        self.block.accept(@)
        @pop_indent()
    }

    visitAstOr(self) { 
        @print_node("Or")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }

    visitAstAnd(self) {
        @print_node("And")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }

    visitAstBangEqual(self) {
        @print_node("BangEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstGreater(self) {
        @print_node("Greater")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstGreaterEqual(self) {
        @print_node("GreaterEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstLess(self) {
        @print_node("Less")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstLessEqual(self) {
        @print_node("LessEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstGet(self) {
        @print_node("Get(" + self.field + ")")
        @add_indent()
        self.lhs.accept(@)
        @pop_indent()
    }
    visitAstSet(self) {
        @print_node("Set(" + self.field + ")")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
}

input: class AstPrinter(indent, is_last) {

    print_node(text) {
        def i = 0
        def ind = ""
        while i < #len(@indent) {
            ind = ind + @indent[i]
            i = i + 1
        }
        if @is_last {
            #print(ind + "L--", text)
        }
        if !@is_last {
            #print(ind + "+--", text)
        }
    }

    add_indent {
        if @is_last {
            #append(@indent, "    ")
        }
        if !@is_last {
            #append(@indent, "|   ")
        }
    }

    pop_indent {
        #pop(@indent)
    }

    loop(list) {
        @add_indent()
        def i = 0
        while i < #len(list) {
            @is_last = false
            if i == #len(list) - 1 {
                @is_last = true
            }
            list[i].accept(@)
            i = i + 1
        }
        @pop_indent()
    }
    
    visitAstRoot(self) {
        @print_node("Root")
        @loop(self.nodes)
    }

    visitAstNeg(self) {
        @print_node("Neg")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstNot(self) {
        @print_node("Not")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstGetSelf(self) { @print_node("GetSelf") }
    visitAstFloat(self) { @print_node("Float(" + self.value + ")") }
    visitAstInt(self) {
        @print_node("Int(" + self.value + ")")
    }
    visitAstString(self) { 
        @print_node("String(" + self.value + ")")
    }
    visitAstGetField(self) {
        @print_node("Field(" + self.value + ")")
    }
    visitAstSetField(self) {
        @print_node("SetField(" + self.name + ")")
        @is_last = true
        @add_indent()
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstList(self) {
        @print_node("List")
        @loop(self.items)
    }
    visitAstIndex(self) {
        @print_node("Index")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.indexer.accept(@)
        @pop_indent()
    }
    visitAstIndexSet(self) {
        @print_node("IndexSet")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        self.indexer.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstBool(self) {
        @print_node("Bool(" + #to_string(self.value) + ")")
    }
    visitAstNil(self) { @print_node("Nil") }
    visitAstGetVar(self) {
        @print_node("GetVar(" + self.value + ")")
    }
    visitAstDef(self) {
        @print_node("Def: " + self.name)
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstPlus(self) {
        @print_node("Plus")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }

    visitAstMinus(self) {
        @print_node("Minus")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstClass(self) {
        @print_node("Class: " + self.name)

        @add_indent()
        def i = 0
        while i < #len(self.fields) {
            @is_last = #len(self.methods) == 0 and i == (#len(self.fields) - 1)
            @print_node("Field: " + self.fields[i])
            i = i + 1
        }

        i = 0
        while i < #len(self.methods) {
            if i == #len(self.methods) - 1 {
                @is_last = true
            }
            @print_node("Method: " + self.methods[i].name)
            @add_indent()
            self.methods[i].block.accept(@)
            @pop_indent()
            i = i + 1
        }
        @pop_indent()

    }
    visitAstBlock(self) {
        @print_node("Block")
        @loop(self.stmts)
    }
    visitAstReassign(self) {
        @print_node("Reassign: " + self.name)
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstInstance(self) {
        @print_node(("Instance: " + self.name))
        @loop(self.args)
    }
    visitAstNative(self) {
        @print_node("Native: " + self.name)
        @loop(self.args)
    }
    visitAstMethod(self) {
        @print_node("MethodCall: " + self.name)
        @add_indent()
        @is_last = self.lhs == nil and #len(self.args) == 0
        def i = 0
        if #len(self.args) > 0 {
            @print_node("Args")
            @add_indent()
            @is_last = self.lhs == nil
            while i < #len(self.args) {
                if i == #len(self.args) - 1 {
                    @is_last = true
                }
                self.args[i].accept(@)
                i = i + 1
            }
            @pop_indent()
        }
        if self.lhs != nil {
            @is_last = true
            self.lhs.accept(@)
        }
        @pop_indent()
    }
    visitAstPop(self) { 
        @print_node("Pop")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstEqualEqual(self) {
        @print_node("EqualEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstIf(self) {
        @print_node("If")
        @add_indent()
        @is_last = false
        self.condition.accept(@)
        @is_last = true
        self.block.accept(@)
        @pop_indent()
    }
    visitAstReturn(self) {
        @print_node("Return")
        @add_indent()
        @is_last = true
        self.expr.accept(@)
        @pop_indent()
    }
    visitAstWhile(self) {
        @print_node("While")
        @add_indent()
        self.condition.accept(@)
        @is_last = true
        self.block.accept(@)
        @pop_indent()
    }

    visitAstOr(self) { 
        @print_node("Or")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }

    visitAstAnd(self) {
        @print_node("And")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }

    visitAstBangEqual(self) {
        @print_node("BangEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstGreater(self) {
        @print_node("Greater")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstGreaterEqual(self) {
        @print_node("GreaterEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstLess(self) {
        @print_node("Less")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstLessEqual(self) {
        @print_node("LessEqual")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
    visitAstGet(self) {
        @print_node("Get(" + self.field + ")")
        @add_indent()
        self.lhs.accept(@)
        @pop_indent()
    }
    visitAstSet(self) {
        @print_node("Set(" + self.field + ")")
        @add_indent()
        @is_last = false
        self.lhs.accept(@)
        @is_last = true
        self.rhs.accept(@)
        @pop_indent()
    }
}

todo: should pop if method instance or get {name: ind, expr: {rhs: {lhs: {value: indent}, indexer: {value: i}}, lhs: {value: ind}}}
todo: should pop if method instance or get {name: i, expr: {lhs: {value: i}, rhs: {value: 1}}}
todo: should pop if method instance or get {lhs: {indexer: {value: i}, lhs: {value: list}}, name: accept, args: [{}]}
todo: should pop if method instance or get {name: i, expr: {lhs: {value: i}, rhs: {value: 1}}}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {field: expr, lhs: {value: self}}}
todo: should pop if method instance or get {lhs: {field: expr, lhs: {value: self}}, name: accept, args: [{}]}
todo: should pop if method instance or get {name: accept, lhs: {field: expr, lhs: {value: self}}, args: [{}]}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {field: lhs, lhs: {value: self}}}
todo: should pop if method instance or get {name: accept, lhs: {field: indexer, lhs: {value: self}}, args: [{}]}
todo: should pop if method instance or get {name: accept, lhs: {lhs: {value: self}, field: lhs}, args: [{}]}
todo: should pop if method instance or get {name: accept, lhs: {field: indexer, lhs: {value: self}}, args: [{}]}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {lhs: {value: self}, field: rhs}}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {lhs: {value: self}, field: expr}}
todo: should pop if method instance or get {name: accept, lhs: {lhs: {value: self}, field: lhs}, args: [{}]}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: rhs, lhs: {value: self}}}
todo: should pop if method instance or get {lhs: {field: lhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {lhs: {value: self}, field: rhs}}
todo: should pop if method instance or get {expr: {rhs: {value: 1}, lhs: {value: i}}, name: i}
todo: should pop if method instance or get {expr: {value: 0}, name: i}
todo: should pop if method instance or get {name: accept, lhs: {lhs: {indexer: {value: i}, lhs: {lhs: {value: self}, field: methods}}, field: block}, args: [{}]}
todo: should pop if method instance or get {name: i, expr: {lhs: {value: i}, rhs: {value: 1}}}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: expr}, args: [{}], name: accept}
todo: should pop if method instance or get {lhs: {lhs: {field: args, lhs: {value: self}}, indexer: {value: i}}, args: [{}], name: accept}
todo: should pop if method instance or get {name: i, expr: {lhs: {value: i}, rhs: {value: 1}}}
todo: should pop if method instance or get {args: [{}], lhs: {field: lhs, lhs: {value: self}}, name: accept}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {lhs: {value: self}, field: expr}}
todo: should pop if method instance or get {lhs: {field: lhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {lhs: {value: self}, field: rhs}}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {lhs: {value: self}, field: condition}}
todo: should pop if method instance or get {lhs: {field: block, lhs: {value: self}}, name: accept, args: [{}]}
todo: should pop if method instance or get {name: accept, lhs: {field: expr, lhs: {value: self}}, args: [{}]}
todo: should pop if method instance or get {name: accept, lhs: {lhs: {value: self}, field: condition}, args: [{}]}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: block, lhs: {value: self}}}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {field: lhs, lhs: {value: self}}}
todo: should pop if method instance or get {lhs: {field: rhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {name: accept, lhs: {field: lhs, lhs: {value: self}}, args: [{}]}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {field: rhs, lhs: {value: self}}}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {lhs: {value: self}, field: lhs}}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: rhs}, name: accept, args: [{}]}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: lhs}, name: accept, args: [{}]}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {field: rhs, lhs: {value: self}}}
todo: should pop if method instance or get {lhs: {field: lhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {args: [{}], lhs: {field: rhs, lhs: {value: self}}, name: accept}
todo: should pop if method instance or get {lhs: {field: lhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {lhs: {value: self}, field: rhs}}
todo: should pop if method instance or get {args: [{}], lhs: {field: lhs, lhs: {value: self}}, name: accept}
todo: should pop if method instance or get {lhs: {field: rhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {name: accept, lhs: {lhs: {value: self}, field: lhs}, args: [{}]}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: lhs}, args: [{}], name: accept}
todo: should pop if method instance or get {args: [{}], lhs: {lhs: {value: self}, field: rhs}, name: accept}
import lum/compiler.lum
read content: class Local(name, depth, stack_pos) {}
class CompilerClass(name, fields, methods) {}
class CompilerMethod(name, code_start) {}


class Compiler(code, strings, variables, depth, classes, current_fields, current_class_name) {
    init {
        #print("init compiler")
        @code = []
        @strings = []
        @variables = [[]]
        @depth = 0
        @classes = []
        @current_fields = nil
        @current_class_name = nil
    }

    find_class(name) {
        def i = 0
        while i < #len(@classes) {
            if name == @classes[i].name {
                return @classes[i]
            }
            i = i + 1
        }
        return nil
    }

    push_code(code) {
        #append(@code, code)
    }

    begin_method {
        #append(@variables, [])
        @depth = @depth + 1
    }

    end_method {
        def w = #pop(@variables)
        @depth = @depth - 1
    }


    begin_scope {
        @depth = @depth + 1
    }


    end_scope {
        def last_vars = #pop(@variables)
        def len = #len(last_vars)
        def i = 0
        def new_vars = []
        while i < len {
            if last_vars[i].depth == @depth {
                @push_code("Pop")
            }
            if last_vars[i].depth != @depth {
                #append(new_vars, last_vars[i])
            }
            i = i + 1
        }
        @depth = @depth - 1
        #append(@variables, new_vars)
    }

    add_local(name) {
        def ll = #len(@variables) - 1
        def vars = @variables[#len(@variables)-1]
        def i = 0
        def res = nil
        while i < #len(vars) {
            if vars[i].name == name {
                #err("var with name: " + name + " already exists")
            }
            i = i + 1
        }
        #print("the wierd ll thing probably should not be here")
        #append(vars, Local(name, @depth, #len(vars) + ll))
    }

    get_local(name) {
        def vars = @variables[#len(@variables)-1]
        def i = 0

        while i < #len(vars) {
            if vars[i].name == name {
                return vars[i].stack_pos
            }
            i = i + 1
        }
        return nil
    }

    compile_list(items) {
        def i = 0
        while i < #len(items) {
            items[i].accept(@)
            i = i + 1
        }
    }

    native(name) {
        if name == "print" { return [0, 1] }
        if name == "to_string" { return [1, 1] }
        if name == "read_file" { return [2, 1] }
        if name == "len" { return [3, 1] }
        if name == "err" { return [4, 1] }
        if name == "append" { return [5, 2] }
        if name == "pop" { return [6, 1] }
        if name == "compile" { return [7, 2] }
        if name == "args" { return [8, 1] }
        if name == "split" { return [9, 2] }
        #err("no native function with name: " + name)
    }

    visitAstRoot(self) {
        @begin_scope()
        @compile_list(self.nodes)
        @end_scope()
    }
    visitAstNeg(self) {
        self.expr.accept(@)
        @push_code("Neg")
    }
    visitAstNot(self) {
        self.expr.accept(@)
        @push_code("Not")
    }
    visitAstFloat(self) { @push_code("PushFloat(" + #to_string(self.value) + ")") }
    visitAstInt(self) { @push_code("PushInt(" + #to_string(self.value) + ")") }

    visitAstString(self) {
        @push_code("PushString(" + #to_string(#len(@strings)) + ")")
        #append(@strings, self.value)
    }

    visitAstGetField(self) { @push_code("GetField(" + self.value + ")") }

    visitAstSetField(self) {
        self.expr.accept(@)
        @push_code("SetField(" + self.name + ")")
    }

    visitAstList(self) {
        @compile_list(self.items)
        @push_code("List(" + #to_string(#len(self.items)) + ")")
    }

    visitAstIndex(self) {
        self.lhs.accept(@)
        self.indexer.accept(@)
        @push_code("IndexGet")
    }

    visitAstIndexSet(self) {
        self.lhs.accept(@)
        self.indexer.accept(@)
        self.rhs.accept(@)
        @push_code("IndexSet")
    }

    visitAstBool(self) { @push_code("PushBool(" + #to_string(self.value) + ")") }
    visitAstNil(self) { @push_code("PushNil") }


    visitAstGetVar(self) {
        def local = @get_local(self.value)
        if local != nil {
            @push_code("GetLocal(" + #to_string(local) + ")")
        }
        if local == nil {
            def klass = @find_class(self.value)
            if klass == nil {
                #err("class should not be nil")
            }
            if #len(klass.fields) != 0 {
                #err("trying to call class without arguments? todo?")
            }
            def method_names = []
            def method_starts = []

            def i = 0
            while i < #len(klass.methods) {
                #append(method_names, klass.methods[i].name)
                #append(method_starts, klass.methods[i].code_start)
                i = i + 1
            }
            @push_code("Instance([], " + #to_string(method_names) + ", " + #to_string(method_starts) + ")")
        }
    }

    visitAstGetSelf(self) { @push_code("PushSelf") }

    visitAstDef(self) {
        self.expr.accept(@)
        @add_local(self.name)
    }
    visitAstPlus(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Plus")
    }

    visitAstMinus(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Minus")
    }
    visitAstClass(self) {
        @current_class_name = self.name
        @current_fields = self.fields
        def jump = #len(@code)
        @push_code("Jump()")


        if @find_class(self.name) != nil {
            #err("Class '" + self.name + "' is already defined")
        }

        def methods = []
        def i = 0
        while i < #len(self.methods) {
            @begin_method()
            def method = self.methods[i]
            def j = 0
            while j < #len(method.params) {
                @add_local(method.params[j])
                j = j + 1
            }
            def code_start = #len(@code)
            method.block.accept(@)
            def cm = CompilerMethod(method.name, code_start)
            #append(methods, cm)
            @push_code("PushNil")
            @push_code("Return")
            i = i + 1
            @end_method()
        }
        def end = #len(@code)
        @code[jump] = "Jump(" + #to_string(end) + ")"
        
        @current_class_name = nil
        @current_fields = nil

        def klass = CompilerClass(self.name, self.fields, methods)
        #append(@classes, klass)
    }
    visitAstBlock(self) {
        @begin_scope()
        @compile_list(self.stmts)
        @end_scope()
    }
    visitAstReassign(self) {
        def local = @get_local(self.name)
        if local == nil {
            #err("Could not find variable: " + self.name)
        }
        self.expr.accept(@)
        @push_code("SetLocal(" + #to_string(local) + ")")
    }
    visitAstInstance(self) {
        def klass = @find_class(self.name)
        if klass == nil {
            #err("Could not find class: " + self.name)
        }
        if #len(klass.fields) != #len(self.args) {
            #err("Arity does not match")
        }

        def fields_rev = []

        def i = #len(klass.fields) - 1
        while i >= 0 {
            #append(fields_rev, klass.fields[i])
            i = i - 1
        }
        def names = []
        def starts = []
        i = 0
        while i < #len(klass.methods) {
            #append(names, klass.methods[i].name)
            #append(starts, klass.methods[i].code_start)
            i = i + 1
        }

        @compile_list(self.args)

        @push_code("Instance(" + #to_string(fields_rev) + ", " + #to_string(names) + ", " + #to_string(starts) + ")")
    }
    visitAstNative(self) {
        def fn_info = @native(self.name)
        if self.name != "print" and #len(self.args) != fn_info[1] {
            #err("arity does not match")
        }
        @compile_list(self.args)
        if self.name == "print" {
            @push_code("Print(" + #to_string(#len(self.args)) + ")")
        }
        if self.name != "print" {
            @push_code("Native(" + #to_string(fn_info[0]) + ")")
        }
    }
    visitAstMethod(self) {
        if self.lhs != nil {
            self.lhs.accept(@)
        }
        if self.lhs == nil {
            @push_code("PushSelf")
        }
        @compile_list(self.args)
        @push_code("Call(" + self.name + ", " + #to_string(#len(self.args) + 1) + ")")
    }
    visitAstPop(self) {
        self.expr.accept(@)
        @push_code("Pop")
    }
    visitAstEqualEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Equals")
    }
    visitAstIf(self) {
        self.condition.accept(@)
        def skip_jump = #len(@code)
        @push_code("TEMP")
        self.block.accept(@)
        def end = #len(@code)
        @code[skip_jump] = "JumpIfFalse(" + #to_string(end) + ")"
    }
    visitAstReturn(self) {
        self.expr.accept(@)
        @push_code("Return")
    }
    visitAstWhile(self) {
        def loop_start = #len(@code)
        self.condition.accept(@)
        def exit_jump = #len(@code)
        @push_code("JumpIfFalse()")
        self.block.accept(@)
        @push_code("Jump(" + #to_string(loop_start) + ")")
        @code[exit_jump] = "JumpIfFalse(" + #to_string(#len(@code)) + ")"
    }
    visitAstOr(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Or")
    }
    visitAstAnd(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("And")
    }
    visitAstBangEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("NotEquals")
    }
    visitAstGreater(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Greater")
    }
    visitAstGreaterEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("GreaterEqual")
    }
    visitAstLess(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Less")
    }
    visitAstLessEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("LessEqual")
    }
    visitAstGet(self) {
        self.lhs.accept(@)
        @push_code("Get(" + self.field + ")")
    }
    visitAstSet(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Set(" + self.field + ")")
    }
}

input: class Local(name, depth, stack_pos) {}
class CompilerClass(name, fields, methods) {}
class CompilerMethod(name, code_start) {}


class Compiler(code, strings, variables, depth, classes, current_fields, current_class_name) {
    init {
        #print("init compiler")
        @code = []
        @strings = []
        @variables = [[]]
        @depth = 0
        @classes = []
        @current_fields = nil
        @current_class_name = nil
    }

    find_class(name) {
        def i = 0
        while i < #len(@classes) {
            if name == @classes[i].name {
                return @classes[i]
            }
            i = i + 1
        }
        return nil
    }

    push_code(code) {
        #append(@code, code)
    }

    begin_method {
        #append(@variables, [])
        @depth = @depth + 1
    }

    end_method {
        def w = #pop(@variables)
        @depth = @depth - 1
    }


    begin_scope {
        @depth = @depth + 1
    }


    end_scope {
        def last_vars = #pop(@variables)
        def len = #len(last_vars)
        def i = 0
        def new_vars = []
        while i < len {
            if last_vars[i].depth == @depth {
                @push_code("Pop")
            }
            if last_vars[i].depth != @depth {
                #append(new_vars, last_vars[i])
            }
            i = i + 1
        }
        @depth = @depth - 1
        #append(@variables, new_vars)
    }

    add_local(name) {
        def ll = #len(@variables) - 1
        def vars = @variables[#len(@variables)-1]
        def i = 0
        def res = nil
        while i < #len(vars) {
            if vars[i].name == name {
                #err("var with name: " + name + " already exists")
            }
            i = i + 1
        }
        #print("the wierd ll thing probably should not be here")
        #append(vars, Local(name, @depth, #len(vars) + ll))
    }

    get_local(name) {
        def vars = @variables[#len(@variables)-1]
        def i = 0

        while i < #len(vars) {
            if vars[i].name == name {
                return vars[i].stack_pos
            }
            i = i + 1
        }
        return nil
    }

    compile_list(items) {
        def i = 0
        while i < #len(items) {
            items[i].accept(@)
            i = i + 1
        }
    }

    native(name) {
        if name == "print" { return [0, 1] }
        if name == "to_string" { return [1, 1] }
        if name == "read_file" { return [2, 1] }
        if name == "len" { return [3, 1] }
        if name == "err" { return [4, 1] }
        if name == "append" { return [5, 2] }
        if name == "pop" { return [6, 1] }
        if name == "compile" { return [7, 2] }
        if name == "args" { return [8, 1] }
        if name == "split" { return [9, 2] }
        #err("no native function with name: " + name)
    }

    visitAstRoot(self) {
        @begin_scope()
        @compile_list(self.nodes)
        @end_scope()
    }
    visitAstNeg(self) {
        self.expr.accept(@)
        @push_code("Neg")
    }
    visitAstNot(self) {
        self.expr.accept(@)
        @push_code("Not")
    }
    visitAstFloat(self) { @push_code("PushFloat(" + #to_string(self.value) + ")") }
    visitAstInt(self) { @push_code("PushInt(" + #to_string(self.value) + ")") }

    visitAstString(self) {
        @push_code("PushString(" + #to_string(#len(@strings)) + ")")
        #append(@strings, self.value)
    }

    visitAstGetField(self) { @push_code("GetField(" + self.value + ")") }

    visitAstSetField(self) {
        self.expr.accept(@)
        @push_code("SetField(" + self.name + ")")
    }

    visitAstList(self) {
        @compile_list(self.items)
        @push_code("List(" + #to_string(#len(self.items)) + ")")
    }

    visitAstIndex(self) {
        self.lhs.accept(@)
        self.indexer.accept(@)
        @push_code("IndexGet")
    }

    visitAstIndexSet(self) {
        self.lhs.accept(@)
        self.indexer.accept(@)
        self.rhs.accept(@)
        @push_code("IndexSet")
    }

    visitAstBool(self) { @push_code("PushBool(" + #to_string(self.value) + ")") }
    visitAstNil(self) { @push_code("PushNil") }


    visitAstGetVar(self) {
        def local = @get_local(self.value)
        if local != nil {
            @push_code("GetLocal(" + #to_string(local) + ")")
        }
        if local == nil {
            def klass = @find_class(self.value)
            if klass == nil {
                #err("class should not be nil")
            }
            if #len(klass.fields) != 0 {
                #err("trying to call class without arguments? todo?")
            }
            def method_names = []
            def method_starts = []

            def i = 0
            while i < #len(klass.methods) {
                #append(method_names, klass.methods[i].name)
                #append(method_starts, klass.methods[i].code_start)
                i = i + 1
            }
            @push_code("Instance([], " + #to_string(method_names) + ", " + #to_string(method_starts) + ")")
        }
    }

    visitAstGetSelf(self) { @push_code("PushSelf") }

    visitAstDef(self) {
        self.expr.accept(@)
        @add_local(self.name)
    }
    visitAstPlus(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Plus")
    }

    visitAstMinus(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Minus")
    }
    visitAstClass(self) {
        @current_class_name = self.name
        @current_fields = self.fields
        def jump = #len(@code)
        @push_code("Jump()")


        if @find_class(self.name) != nil {
            #err("Class '" + self.name + "' is already defined")
        }

        def methods = []
        def i = 0
        while i < #len(self.methods) {
            @begin_method()
            def method = self.methods[i]
            def j = 0
            while j < #len(method.params) {
                @add_local(method.params[j])
                j = j + 1
            }
            def code_start = #len(@code)
            method.block.accept(@)
            def cm = CompilerMethod(method.name, code_start)
            #append(methods, cm)
            @push_code("PushNil")
            @push_code("Return")
            i = i + 1
            @end_method()
        }
        def end = #len(@code)
        @code[jump] = "Jump(" + #to_string(end) + ")"
        
        @current_class_name = nil
        @current_fields = nil

        def klass = CompilerClass(self.name, self.fields, methods)
        #append(@classes, klass)
    }
    visitAstBlock(self) {
        @begin_scope()
        @compile_list(self.stmts)
        @end_scope()
    }
    visitAstReassign(self) {
        def local = @get_local(self.name)
        if local == nil {
            #err("Could not find variable: " + self.name)
        }
        self.expr.accept(@)
        @push_code("SetLocal(" + #to_string(local) + ")")
    }
    visitAstInstance(self) {
        def klass = @find_class(self.name)
        if klass == nil {
            #err("Could not find class: " + self.name)
        }
        if #len(klass.fields) != #len(self.args) {
            #err("Arity does not match")
        }

        def fields_rev = []

        def i = #len(klass.fields) - 1
        while i >= 0 {
            #append(fields_rev, klass.fields[i])
            i = i - 1
        }
        def names = []
        def starts = []
        i = 0
        while i < #len(klass.methods) {
            #append(names, klass.methods[i].name)
            #append(starts, klass.methods[i].code_start)
            i = i + 1
        }

        @compile_list(self.args)

        @push_code("Instance(" + #to_string(fields_rev) + ", " + #to_string(names) + ", " + #to_string(starts) + ")")
    }
    visitAstNative(self) {
        def fn_info = @native(self.name)
        if self.name != "print" and #len(self.args) != fn_info[1] {
            #err("arity does not match")
        }
        @compile_list(self.args)
        if self.name == "print" {
            @push_code("Print(" + #to_string(#len(self.args)) + ")")
        }
        if self.name != "print" {
            @push_code("Native(" + #to_string(fn_info[0]) + ")")
        }
    }
    visitAstMethod(self) {
        if self.lhs != nil {
            self.lhs.accept(@)
        }
        if self.lhs == nil {
            @push_code("PushSelf")
        }
        @compile_list(self.args)
        @push_code("Call(" + self.name + ", " + #to_string(#len(self.args) + 1) + ")")
    }
    visitAstPop(self) {
        self.expr.accept(@)
        @push_code("Pop")
    }
    visitAstEqualEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Equals")
    }
    visitAstIf(self) {
        self.condition.accept(@)
        def skip_jump = #len(@code)
        @push_code("TEMP")
        self.block.accept(@)
        def end = #len(@code)
        @code[skip_jump] = "JumpIfFalse(" + #to_string(end) + ")"
    }
    visitAstReturn(self) {
        self.expr.accept(@)
        @push_code("Return")
    }
    visitAstWhile(self) {
        def loop_start = #len(@code)
        self.condition.accept(@)
        def exit_jump = #len(@code)
        @push_code("JumpIfFalse()")
        self.block.accept(@)
        @push_code("Jump(" + #to_string(loop_start) + ")")
        @code[exit_jump] = "JumpIfFalse(" + #to_string(#len(@code)) + ")"
    }
    visitAstOr(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Or")
    }
    visitAstAnd(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("And")
    }
    visitAstBangEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("NotEquals")
    }
    visitAstGreater(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Greater")
    }
    visitAstGreaterEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("GreaterEqual")
    }
    visitAstLess(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Less")
    }
    visitAstLessEqual(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("LessEqual")
    }
    visitAstGet(self) {
        self.lhs.accept(@)
        @push_code("Get(" + self.field + ")")
    }
    visitAstSet(self) {
        self.lhs.accept(@)
        self.rhs.accept(@)
        @push_code("Set(" + self.field + ")")
    }
}

todo: should pop if method instance or get {expr: {rhs: {value: 1}, lhs: {value: i}}, name: i}
todo: should pop if method instance or get {expr: {lhs: {value: i}, rhs: {value: 1}}, name: i}
todo: should pop if method instance or get {name: i, expr: {rhs: {value: 1}, lhs: {value: i}}}
todo: should pop if method instance or get {expr: {rhs: {value: 1}, lhs: {value: i}}, name: i}
todo: should pop if method instance or get {name: accept, lhs: {lhs: {value: items}, indexer: {value: i}}, args: [{}]}
todo: should pop if method instance or get {name: i, expr: {lhs: {value: i}, rhs: {value: 1}}}
todo: should pop if method instance or get {lhs: {field: expr, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {name: accept, lhs: {lhs: {value: self}, field: expr}, args: [{}]}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: expr, lhs: {value: self}}}
todo: should pop if method instance or get {name: accept, lhs: {field: lhs, lhs: {value: self}}, args: [{}]}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: indexer, lhs: {value: self}}}
todo: should pop if method instance or get {lhs: {field: lhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {lhs: {field: indexer, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {args: [{}], lhs: {field: rhs, lhs: {value: self}}, name: accept}
todo: should pop if method instance or get {expr: {lhs: {value: i}, rhs: {value: 1}}, name: i}
todo: should pop if method instance or get {name: accept, lhs: {lhs: {value: self}, field: expr}, args: [{}]}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: lhs}, args: [{}], name: accept}
todo: should pop if method instance or get {lhs: {field: rhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {args: [{}], lhs: {lhs: {value: self}, field: lhs}, name: accept}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {lhs: {value: self}, field: rhs}}
todo: should pop if method instance or get {expr: {rhs: {value: 1}, lhs: {value: j}}, name: j}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: block, lhs: {value: method}}}
todo: should pop if method instance or get {expr: {lhs: {value: i}, rhs: {value: 1}}, name: i}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {field: expr, lhs: {value: self}}}
todo: should pop if method instance or get {name: i, expr: {rhs: {value: 1}, lhs: {value: i}}}
todo: should pop if method instance or get {expr: {value: 0}, name: i}
todo: should pop if method instance or get {name: i, expr: {lhs: {value: i}, rhs: {value: 1}}}
todo: should pop if method instance or get {args: [{}], lhs: {lhs: {value: self}, field: lhs}, name: accept}
todo: should pop if method instance or get {args: [{}], lhs: {lhs: {value: self}, field: expr}, name: accept}
todo: should pop if method instance or get {name: accept, lhs: {field: lhs, lhs: {value: self}}, args: [{}]}
todo: should pop if method instance or get {args: [{}], lhs: {field: rhs, lhs: {value: self}}, name: accept}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: condition}, name: accept, args: [{}]}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: block}, name: accept, args: [{}]}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: expr}, args: [{}], name: accept}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: condition, lhs: {value: self}}}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: block}, args: [{}], name: accept}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: lhs, lhs: {value: self}}}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {lhs: {value: self}, field: rhs}}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: lhs}, name: accept, args: [{}]}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: rhs, lhs: {value: self}}}
todo: should pop if method instance or get {args: [{}], lhs: {lhs: {value: self}, field: lhs}, name: accept}
todo: should pop if method instance or get {lhs: {field: rhs, lhs: {value: self}}, name: accept, args: [{}]}
todo: should pop if method instance or get {lhs: {field: lhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {name: accept, lhs: {field: rhs, lhs: {value: self}}, args: [{}]}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: lhs, lhs: {value: self}}}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {lhs: {value: self}, field: rhs}}
todo: should pop if method instance or get {lhs: {lhs: {value: self}, field: lhs}, name: accept, args: [{}]}
todo: should pop if method instance or get {name: accept, args: [{}], lhs: {field: rhs, lhs: {value: self}}}
todo: should pop if method instance or get {name: accept, lhs: {field: lhs, lhs: {value: self}}, args: [{}]}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: rhs, lhs: {value: self}}}
todo: should pop if method instance or get {lhs: {field: lhs, lhs: {value: self}}, args: [{}], name: accept}
todo: should pop if method instance or get {args: [{}], name: accept, lhs: {field: lhs, lhs: {value: self}}}
todo: should pop if method instance or get {name: accept, lhs: {field: rhs, lhs: {value: self}}, args: [{}]}
import lum/import_resolver.lum
read content: class ImportResolver() {
    
    visitAstRoot(self) {
        def i = 0

        while i < #len(self.nodes) {
            #print("while loop: ", i)
            #print("node:", self.nodes[i])
            def is_import = self.nodes[i].accept(@)
            if is_import {
                #print("its an import!")
                def imports = []
                def j = 0
                while j < #len(self.nodes[i].imports) {
                    #print("import", self.nodes[i].imports[j])
                    def file = self.nodes[i].imports[j]

                    def input = #read_file(file)
                    #print("input:", input)

                    def lexer = Lexer(input, 0)
                    lexer = Peekable(lexer, nil)

                    def parser = Parser(lexer, file)
                    def root = parser.parse_root()
                    #append(imports, root)

                    j = j + 1
                }
                self.nodes[i] = AstBlock(imports)
            }
            i = i + 1
        }
    }
    visitAstNeg(self) { return false }
    visitAstNot(self) { return false }
    visitAstFloat(self) { return false }
    visitAstInt(self) { return false }
    visitAstString(self) { return false }
    visitAstGetField(self) { return false }
    visitAstSetField(self) { return false }
    visitAstList(self) { return false }
    visitAstIndex(self) { return false }
    visitAstIndexSet(self) { return false }
    visitAstBool(self) { return false }
    visitAstNil(self) { return false }
    visitAstGetVar(self) { return false }
    visitAstDef(self) { return false }
    visitAstPlus(self) { return false }
    visitAstClass(self) { return false }
    visitAstBlock(self) { return false }
    visitAstReassign(self) { return false }
    visitAstInstance(self) { return false }
    visitAstNative(self) { return false }
    visitAstMethod(self) { return false }
    visitAstPop(self) { return false }
    visitAstEqualEqual(self) { return false }
    visitAstIf(self) { return false }
    visitAstReturn(self) { return false }
    visitAstWhile(self) { return false }
    visitAstOr(self) { return false }
    visitAstAnd(self) { return false }
    visitAstBangEqual(self) { return false }
    visitAstGreater(self) { return false }
    visitAstGreaterEqual(self) { return false }
    visitAstLess(self) { return false }
    visitAstLessEqual(self) { return false }
    visitAstGet(self) { return false }
    visitAstSet(self) { return false }
    visitAstImport(self) { 
    #print("visited ast import")
    return true }

}

input: class ImportResolver() {
    
    visitAstRoot(self) {
        def i = 0

        while i < #len(self.nodes) {
            #print("while loop: ", i)
            #print("node:", self.nodes[i])
            def is_import = self.nodes[i].accept(@)
            if is_import {
                #print("its an import!")
                def imports = []
                def j = 0
                while j < #len(self.nodes[i].imports) {
                    #print("import", self.nodes[i].imports[j])
                    def file = self.nodes[i].imports[j]

                    def input = #read_file(file)
                    #print("input:", input)

                    def lexer = Lexer(input, 0)
                    lexer = Peekable(lexer, nil)

                    def parser = Parser(lexer, file)
                    def root = parser.parse_root()
                    #append(imports, root)

                    j = j + 1
                }
                self.nodes[i] = AstBlock(imports)
            }
            i = i + 1
        }
    }
    visitAstNeg(self) { return false }
    visitAstNot(self) { return false }
    visitAstFloat(self) { return false }
    visitAstInt(self) { return false }
    visitAstString(self) { return false }
    visitAstGetField(self) { return false }
    visitAstSetField(self) { return false }
    visitAstList(self) { return false }
    visitAstIndex(self) { return false }
    visitAstIndexSet(self) { return false }
    visitAstBool(self) { return false }
    visitAstNil(self) { return false }
    visitAstGetVar(self) { return false }
    visitAstDef(self) { return false }
    visitAstPlus(self) { return false }
    visitAstClass(self) { return false }
    visitAstBlock(self) { return false }
    visitAstReassign(self) { return false }
    visitAstInstance(self) { return false }
    visitAstNative(self) { return false }
    visitAstMethod(self) { return false }
    visitAstPop(self) { return false }
    visitAstEqualEqual(self) { return false }
    visitAstIf(self) { return false }
    visitAstReturn(self) { return false }
    visitAstWhile(self) { return false }
    visitAstOr(self) { return false }
    visitAstAnd(self) { return false }
    visitAstBangEqual(self) { return false }
    visitAstGreater(self) { return false }
    visitAstGreaterEqual(self) { return false }
    visitAstLess(self) { return false }
    visitAstLessEqual(self) { return false }
    visitAstGet(self) { return false }
    visitAstSet(self) { return false }
    visitAstImport(self) { 
    #print("visited ast import")
    return true }

}

todo: should pop if method instance or get {name: lexer, expr: {args: [{value: lexer}, {}], name: Peekable}}
todo: should pop if method instance or get {name: j, expr: {rhs: {value: 1}, lhs: {value: j}}}
todo: should pop if method instance or get {indexer: {value: i}, rhs: {args: [{value: imports}], name: AstBlock}, lhs: {lhs: {value: self}, field: nodes}}
todo: should pop if method instance or get {expr: {rhs: {value: 1}, lhs: {value: i}}, name: i}
while loop:  1
node: {expr: {name: args, args: [{value: 0}]}, name: file}
while loop:  2
node: {expr: {args: [{value: "compiling file: "}, {value: file}], name: print}}
while loop:  3
node: {name: input, expr: {name: read_file, args: [{value: file}]}}
while loop:  4
node: {expr: {args: [{value: "input:"}, {value: input}], name: print}}
while loop:  5
node: {expr: {name: Lexer, args: [{value: input}, {value: 0}]}, name: lexer}
while loop:  6
node: {expr: {name: Peekable, args: [{value: lexer}, {}]}, name: lexer}
while loop:  7
node: {name: parser, expr: {name: Parser, args: [{value: lexer}, {value: file}]}}
while loop:  8
node: {expr: {args: [], lhs: {value: parser}, name: parse_root}, name: root}
while loop:  9
node: {name: import_resolver, expr: {name: ImportResolver, args: []}}
while loop:  10
node: {expr: {lhs: {value: root}, args: [{value: import_resolver}], name: accept}}
while loop:  11
node: {expr: {args: [{items: []}, {value: true}], name: AstPrinter}, name: printer}
while loop:  12
node: {expr: {lhs: {value: root}, args: [{value: printer}], name: accept}}
while loop:  13
node: {name: compiler, expr: {args: [{}, {}, {}, {}, {}, {}, {}], name: Compiler}}
while loop:  14
node: {expr: {args: [], name: init, lhs: {value: compiler}}}
while loop:  15
node: {expr: {name: accept, args: [{value: compiler}], lhs: {value: root}}}
while loop:  16
node: {expr: {value: 0}, name: i}
while loop:  17
node: {block: {stmts: [{expr: {args: [{indexer: {value: i}, lhs: {field: code, lhs: {value: compiler}}}], name: print}}, {name: i, expr: {lhs: {value: i}, rhs: {value: 1}}}]}, condition: {rhs: {args: [{field: code, lhs: {value: compiler}}], name: len}, lhs: {value: i}}}
while loop:  18
node: {expr: {name: print, args: [{value: "Bytecode:"}, {field: code, lhs: {value: compiler}}]}}
while loop:  19
node: {expr: {name: print, args: [{value: "strings:"}, {field: strings, lhs: {value: compiler}}]}}
L-- Root
    +-- Block
    |   +-- Root
    |   |   +-- Class: Kind
    |   |   |   +-- Method: LeftParen
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- Return
    |   |   |   |   |       L-- Int(0)
    |   |   |   L-- Method: RightParen
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(1)
    |   |   |   L-- Method: LeftBracket
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(2)
    |   |   |   L-- Method: RightBracket
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(3)
    |   |   |   L-- Method: LeftBrace
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(4)
    |   |   |   L-- Method: RightBrace
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(5)
    |   |   |   L-- Method: Less
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(6)
    |   |   |   L-- Method: Greater
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(7)
    |   |   |   L-- Method: Equal
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(8)
    |   |   |   L-- Method: Plus
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(9)
    |   |   |   L-- Method: Minus
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(10)
    |   |   |   L-- Method: Slash
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(11)
    |   |   |   L-- Method: Star
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(12)
    |   |   |   L-- Method: Dot
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(13)
    |   |   |   L-- Method: Comma
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(14)
    |   |   |   L-- Method: Colon
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(15)
    |   |   |   L-- Method: SemiColon
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(16)
    |   |   |   L-- Method: Bang
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(17)
    |   |   |   L-- Method: At
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(18)
    |   |   |   L-- Method: Hash
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(19)
    |   |   |   L-- Method: Class
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(20)
    |   |   |   L-- Method: And
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(21)
    |   |   |   L-- Method: Or
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(22)
    |   |   |   L-- Method: Else
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(23)
    |   |   |   L-- Method: If
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(24)
    |   |   |   L-- Method: For
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(25)
    |   |   |   L-- Method: Nil
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(26)
    |   |   |   L-- Method: Return
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(27)
    |   |   |   L-- Method: While
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(28)
    |   |   |   L-- Method: Import
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(29)
    |   |   |   L-- Method: True
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(30)
    |   |   |   L-- Method: False
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(31)
    |   |   |   L-- Method: Def
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(32)
    |   |   |   L-- Method: Int
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(33)
    |   |   |   L-- Method: Float
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(34)
    |   |   |   L-- Method: Bool
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(35)
    |   |   |   L-- Method: Str
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(36)
    |   |   |   L-- Method: Identifier
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(37)
    |   |   |   L-- Method: String
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(38)
    |   |   |   L-- Method: Float
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(40)
    |   |   |   L-- Method: BangEqual
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(41)
    |   |   |   L-- Method: EqualEqual
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(42)
    |   |   |   L-- Method: GreaterEqual
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(43)
    |   |   |   L-- Method: LessEqual
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- Int(44)
    |   |   |   L-- Method: from_str
    |   |   |       L-- Block
    |   |   |           +-- Def: kinds
    |   |   |           |   L-- List
    |   |   |           |       +-- String("(")
    |   |   |           |       +-- String(")")
    |   |   |           |       +-- String("[")
    |   |   |           |       +-- String("]")
    |   |   |           |       +-- String("{")
    |   |   |           |       +-- String("}")
    |   |   |           |       +-- String("<")
    |   |   |           |       +-- String(">")
    |   |   |           |       +-- String("=")
    |   |   |           |       +-- String("+")
    |   |   |           |       +-- String("-")
    |   |   |           |       +-- String("/")
    |   |   |           |       +-- String("*")
    |   |   |           |       +-- String(".")
    |   |   |           |       +-- String(",")
    |   |   |           |       +-- String(":")
    |   |   |           |       +-- String(";")
    |   |   |           |       +-- String("!")
    |   |   |           |       +-- String("@")
    |   |   |           |       +-- String("#")
    |   |   |           |       +-- String("class")
    |   |   |           |       +-- String("and")
    |   |   |           |       +-- String("or")
    |   |   |           |       +-- String("else")
    |   |   |           |       +-- String("if")
    |   |   |           |       +-- String("for")
    |   |   |           |       +-- String("nil")
    |   |   |           |       +-- String("return")
    |   |   |           |       +-- String("while")
    |   |   |           |       +-- String("import")
    |   |   |           |       +-- String("true")
    |   |   |           |       +-- String("false")
    |   |   |           |       +-- String("def")
    |   |   |           |       +-- String("int")
    |   |   |           |       +-- String("float")
    |   |   |           |       +-- String("bool")
    |   |   |           |       L-- String("str")
    |   |   |           +-- Def: i
    |   |   |           |   L-- Int(0)
    |   |   |           +-- While
    |   |   |           |   +-- Less
    |   |   |           |   |   +-- GetVar(i)
    |   |   |           |   |   L-- Native: len
    |   |   |           |   |       L-- GetVar(kinds)
    |   |   |           |   L-- Block
    |   |   |           |       +-- If
    |   |   |           |       |   +-- EqualEqual
    |   |   |           |       |   |   +-- GetVar(in)
    |   |   |           |       |   |   L-- Index
    |   |   |           |       |   |       +-- GetVar(kinds)
    |   |   |           |       |   |       L-- GetVar(i)
    |   |   |           |       |   L-- Block
    |   |   |           |       |       L-- Return
    |   |   |           |       |           L-- GetVar(i)
    |   |   |           |       L-- Reassign: i
    |   |   |           |           L-- Plus
    |   |   |           |               +-- GetVar(i)
    |   |   |           |               L-- Int(1)
    |   |   |           L-- Return
    |   |   |               L-- Nil
    |   |   +-- Class: Token
    |   |   |   +-- Field: value
    |   |   |   +-- Field: start
    |   |   |   +-- Field: end
    |   |   |   L-- Field: kind
    |   |   +-- Class: Lexer
    |   |   |   +-- Field: code
    |   |   |   +-- Field: p
    |   |   |   +-- Method: whitespace
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- While
    |   |   |   |   |       L-- And
    |   |   |   |   |           +-- Less
    |   |   |   |   |           |   +-- Field(p)
    |   |   |   |   |           |   L-- Native: len
    |   |   |   |   |           |       L-- Field(code)
    |   |   |   |   |           L-- EqualEqual
    |   |   |   |   |               +-- Index
    |   |   |   |   |               |   +-- Field(code)
    |   |   |   |   |               |   L-- Field(p)
    |   |   |   |   |               L-- String(" ")
    |   |   |   |   |       L-- Block
    |   |   |   |   |           L-- SetField(p)
    |   |   |   |   |               L-- Plus
    |   |   |   |   |                   +-- Field(p)
    |   |   |   |   |                   L-- Int(1)
    |   |   |   L-- Method: is_done
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- GreaterEqual
    |   |   |                   +-- Field(p)
    |   |   |                   L-- Native: len
    |   |   |                       L-- Field(code)
    |   |   |   L-- Method: letter
    |   |   |       L-- Block
    |   |   |           +-- If
    |   |   |           |   +-- MethodCall: is_done
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Bool(false)
    |   |   |           +-- Def: letters
    |   |   |           |   L-- String("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_")
    |   |   |           +-- Def: i
    |   |   |           |   L-- Int(0)
    |   |   |           +-- While
    |   |   |           |   +-- Less
    |   |   |           |   |   +-- GetVar(i)
    |   |   |           |   |   L-- Native: len
    |   |   |           |   |       L-- GetVar(letters)
    |   |   |           |   L-- Block
    |   |   |           |       +-- If
    |   |   |           |       |   +-- EqualEqual
    |   |   |           |       |   |   +-- Index
    |   |   |           |       |   |   |   +-- GetVar(letters)
    |   |   |           |       |   |   |   L-- GetVar(i)
    |   |   |           |       |   |   L-- Index
    |   |   |           |       |   |       +-- Field(code)
    |   |   |           |       |   |       L-- Field(p)
    |   |   |           |       |   L-- Block
    |   |   |           |       |       L-- Return
    |   |   |           |       |           L-- Bool(true)
    |   |   |           |       L-- Reassign: i
    |   |   |           |           L-- Plus
    |   |   |           |               +-- GetVar(i)
    |   |   |           |               L-- Int(1)
    |   |   |           L-- Return
    |   |   |               L-- Bool(false)
    |   |   |   L-- Method: digit
    |   |   |       L-- Block
    |   |   |           +-- If
    |   |   |           |   +-- MethodCall: is_done
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Bool(false)
    |   |   |           +-- Def: digits
    |   |   |           |   L-- String("0123456789")
    |   |   |           +-- Def: i
    |   |   |           |   L-- Int(0)
    |   |   |           +-- While
    |   |   |           |   +-- Less
    |   |   |           |   |   +-- GetVar(i)
    |   |   |           |   |   L-- Native: len
    |   |   |           |   |       L-- GetVar(digits)
    |   |   |           |   L-- Block
    |   |   |           |       +-- If
    |   |   |           |       |   +-- EqualEqual
    |   |   |           |       |   |   +-- Index
    |   |   |           |       |   |   |   +-- GetVar(digits)
    |   |   |           |       |   |   |   L-- GetVar(i)
    |   |   |           |       |   |   L-- Index
    |   |   |           |       |   |       +-- Field(code)
    |   |   |           |       |   |       L-- Field(p)
    |   |   |           |       |   L-- Block
    |   |   |           |       |       L-- Return
    |   |   |           |       |           L-- Bool(true)
    |   |   |           |       L-- Reassign: i
    |   |   |           |           L-- Plus
    |   |   |           |               +-- GetVar(i)
    |   |   |           |               L-- Int(1)
    |   |   |           L-- Return
    |   |   |               L-- Bool(false)
    |   |   |   L-- Method: advance
    |   |   |       L-- Block
    |   |   |           L-- If
    |   |   |               +-- Less
    |   |   |               |   +-- Field(p)
    |   |   |               |   L-- Native: len
    |   |   |               |       L-- Field(code)
    |   |   |               L-- Block
    |   |   |                   L-- SetField(p)
    |   |   |                       L-- Plus
    |   |   |                           +-- Field(p)
    |   |   |                           L-- Int(1)
    |   |   |   L-- Method: identifier
    |   |   |       L-- Block
    |   |   |           +-- Def: start
    |   |   |           |   L-- Field(p)
    |   |   |           +-- Def: val
    |   |   |           |   L-- String("")
    |   |   |           +-- While
    |   |   |           |   +-- Or
    |   |   |           |   |   +-- MethodCall: letter
    |   |   |           |   |   L-- MethodCall: digit
    |   |   |           |   L-- Block
    |   |   |           |       +-- Reassign: val
    |   |   |           |       |   L-- Plus
    |   |   |           |       |       +-- GetVar(val)
    |   |   |           |       |       L-- Index
    |   |   |           |       |           +-- Field(code)
    |   |   |           |       |           L-- Field(p)
    |   |   |           |       L-- SetField(p)
    |   |   |           |           L-- Plus
    |   |   |           |               +-- Field(p)
    |   |   |           |               L-- Int(1)
    |   |   |           +-- Def: end
    |   |   |           |   L-- Field(p)
    |   |   |           +-- Def: keyword
    |   |   |           |   L-- MethodCall: from_str
    |   |   |           |       +-- Args
    |   |   |           |       |   L-- GetVar(val)
    |   |   |           |       L-- GetVar(Kind)
    |   |   |           +-- If
    |   |   |           |   +-- BangEqual
    |   |   |           |   |   +-- GetVar(keyword)
    |   |   |           |   |   L-- Nil
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Instance: Token
    |   |   |           |               +-- GetVar(val)
    |   |   |           |               +-- GetVar(start)
    |   |   |           |               +-- GetVar(end)
    |   |   |           |               L-- GetVar(keyword)
    |   |   |           L-- Return
    |   |   |               L-- Instance: Token
    |   |   |                   +-- GetVar(val)
    |   |   |                   +-- GetVar(start)
    |   |   |                   +-- GetVar(end)
    |   |   |                   L-- MethodCall: Identifier
    |   |   |                       L-- GetVar(Kind)
    |   |   |   L-- Method: number
    |   |   |       L-- Block
    |   |   |           +-- Def: start
    |   |   |           |   L-- Field(p)
    |   |   |           +-- Def: val
    |   |   |           |   L-- String("")
    |   |   |           +-- Def: is_float
    |   |   |           |   L-- Bool(false)
    |   |   |           +-- While
    |   |   |           |   +-- Or
    |   |   |           |   |   +-- MethodCall: digit
    |   |   |           |   |   L-- EqualEqual
    |   |   |           |   |       +-- Index
    |   |   |           |   |       |   +-- Field(code)
    |   |   |           |   |       |   L-- Field(p)
    |   |   |           |   |       L-- String(".")
    |   |   |           |   L-- Block
    |   |   |           |       +-- If
    |   |   |           |       |   +-- EqualEqual
    |   |   |           |       |   |   +-- Index
    |   |   |           |       |   |   |   +-- Field(code)
    |   |   |           |       |   |   |   L-- Field(p)
    |   |   |           |       |   |   L-- String(".")
    |   |   |           |       |   L-- Block
    |   |   |           |       |       L-- Reassign: is_float
    |   |   |           |       |           L-- Bool(true)
    |   |   |           |       +-- Reassign: val
    |   |   |           |       |   L-- Plus
    |   |   |           |       |       +-- GetVar(val)
    |   |   |           |       |       L-- Index
    |   |   |           |       |           +-- Field(code)
    |   |   |           |       |           L-- Field(p)
    |   |   |           |       L-- SetField(p)
    |   |   |           |           L-- Plus
    |   |   |           |               +-- Field(p)
    |   |   |           |               L-- Int(1)
    |   |   |           +-- Def: end
    |   |   |           |   L-- Field(p)
    |   |   |           +-- If
    |   |   |           |   +-- GetVar(is_float)
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Instance: Token
    |   |   |           |               +-- GetVar(val)
    |   |   |           |               +-- GetVar(start)
    |   |   |           |               +-- GetVar(end)
    |   |   |           |               L-- MethodCall: Float
    |   |   |           |                   L-- GetVar(Kind)
    |   |   |           L-- Return
    |   |   |               L-- Instance: Token
    |   |   |                   +-- GetVar(val)
    |   |   |                   +-- GetVar(start)
    |   |   |                   +-- GetVar(end)
    |   |   |                   L-- MethodCall: Int
    |   |   |                       L-- GetVar(Kind)
    |   |   |   L-- Method: string
    |   |   |       L-- Block
    |   |   |           +-- Def: start
    |   |   |           |   L-- Field(p)
    |   |   |           +-- Def: val
    |   |   |           |   L-- String("\"")
    |   |   |           +-- SetField(p)
    |   |   |               L-- Plus
    |   |   |                   +-- Field(p)
    |   |   |                   L-- Int(1)
    |   |   |           +-- While
    |   |   |           |   +-- And
    |   |   |           |   |   +-- Less
    |   |   |           |   |   |   +-- Field(p)
    |   |   |           |   |   |   L-- Native: len
    |   |   |           |   |   |       L-- Field(code)
    |   |   |           |   |   L-- BangEqual
    |   |   |           |   |       +-- Index
    |   |   |           |   |       |   +-- Field(code)
    |   |   |           |   |       |   L-- Field(p)
    |   |   |           |   |       L-- String("\"")
    |   |   |           |   L-- Block
    |   |   |           |       +-- Def: test
    |   |   |           |       |   L-- EqualEqual
    |   |   |           |       |       +-- Index
    |   |   |           |       |       |   +-- Field(code)
    |   |   |           |       |       |   L-- Field(p)
    |   |   |           |       |       L-- String("\\")
    |   |   |           |       +-- If
    |   |   |           |       |   +-- GetVar(test)
    |   |   |           |       |   L-- Block
    |   |   |           |       |       +-- Reassign: val
    |   |   |           |       |       |   L-- Plus
    |   |   |           |       |       |       +-- GetVar(val)
    |   |   |           |       |       |       L-- Index
    |   |   |           |       |       |           +-- Field(code)
    |   |   |           |       |       |           L-- Field(p)
    |   |   |           |       |       +-- SetField(p)
    |   |   |           |       |           L-- Plus
    |   |   |           |       |               +-- Field(p)
    |   |   |           |       |               L-- Int(1)
    |   |   |           |       |       L-- If
    |   |   |           |       |           +-- Less
    |   |   |           |       |           |   +-- Field(p)
    |   |   |           |       |           |   L-- Native: len
    |   |   |           |       |           |       L-- Field(code)
    |   |   |           |       |           L-- Block
    |   |   |           |       |               +-- Reassign: val
    |   |   |           |       |               |   L-- Plus
    |   |   |           |       |               |       +-- GetVar(val)
    |   |   |           |       |               |       L-- Index
    |   |   |           |       |               |           +-- Field(code)
    |   |   |           |       |               |           L-- Field(p)
    |   |   |           |       |               L-- SetField(p)
    |   |   |           |       |                   L-- Plus
    |   |   |           |       |                       +-- Field(p)
    |   |   |           |       |                       L-- Int(1)
    |   |   |           |       L-- If
    |   |   |           |           +-- Not
    |   |   |           |           |   L-- GetVar(test)
    |   |   |           |           L-- Block
    |   |   |           |               +-- Reassign: val
    |   |   |           |               |   L-- Plus
    |   |   |           |               |       +-- GetVar(val)
    |   |   |           |               |       L-- Index
    |   |   |           |               |           +-- Field(code)
    |   |   |           |               |           L-- Field(p)
    |   |   |           |               L-- SetField(p)
    |   |   |           |                   L-- Plus
    |   |   |           |                       +-- Field(p)
    |   |   |           |                       L-- Int(1)
    |   |   |           +-- If
    |   |   |           |   +-- Less
    |   |   |           |   |   +-- Field(p)
    |   |   |           |   |   L-- Native: len
    |   |   |           |   |       L-- Field(code)
    |   |   |           |   L-- Block
    |   |   |           |       +-- Reassign: val
    |   |   |           |       |   L-- Plus
    |   |   |           |       |       +-- GetVar(val)
    |   |   |           |       |       L-- String("\"")
    |   |   |           |       L-- SetField(p)
    |   |   |           |           L-- Plus
    |   |   |           |               +-- Field(p)
    |   |   |           |               L-- Int(1)
    |   |   |           +-- Def: end
    |   |   |           |   L-- Field(p)
    |   |   |           L-- Return
    |   |   |               L-- Instance: Token
    |   |   |                   +-- GetVar(val)
    |   |   |                   +-- GetVar(start)
    |   |   |                   +-- GetVar(end)
    |   |   |                   L-- MethodCall: String
    |   |   |                       L-- GetVar(Kind)
    |   |   |   L-- Method: single_char
    |   |   |       L-- Block
    |   |   |           +-- Def: a
    |   |   |           |   L-- MethodCall: from_str
    |   |   |           |       +-- Args
    |   |   |           |       |   L-- Index
    |   |   |           |       |       +-- Field(code)
    |   |   |           |       |       L-- Field(p)
    |   |   |           |       L-- GetVar(Kind)
    |   |   |           +-- If
    |   |   |           |   +-- BangEqual
    |   |   |           |   |   +-- GetVar(a)
    |   |   |           |   |   L-- Nil
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Instance: Token
    |   |   |           |               +-- Index
    |   |   |           |               |   +-- Field(code)
    |   |   |           |               |   L-- Field(p)
    |   |   |           |               +-- Field(p)
    |   |   |           |               +-- Plus
    |   |   |           |               |   +-- Field(p)
    |   |   |           |               |   L-- Int(1)
    |   |   |           |               L-- GetVar(a)
    |   |   |           L-- Return
    |   |   |               L-- Nil
    |   |   |   L-- Method: two_char
    |   |   |       L-- Block
    |   |   |           +-- If
    |   |   |           |   +-- EqualEqual
    |   |   |           |   |   +-- Plus
    |   |   |           |   |   |   +-- Field(p)
    |   |   |           |   |   |   L-- Int(1)
    |   |   |           |   |   L-- Native: len
    |   |   |           |   |       L-- Field(code)
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Nil
    |   |   |           +-- Def: c1
    |   |   |           |   L-- Index
    |   |   |           |       +-- Field(code)
    |   |   |           |       L-- Field(p)
    |   |   |           +-- Def: c2
    |   |   |           |   L-- Index
    |   |   |           |       +-- Field(code)
    |   |   |           |       L-- Plus
    |   |   |           |           +-- Field(p)
    |   |   |           |           L-- Int(1)
    |   |   |           +-- If
    |   |   |           |   +-- And
    |   |   |           |   |   +-- EqualEqual
    |   |   |           |   |   |   +-- GetVar(c1)
    |   |   |           |   |   |   L-- String("!")
    |   |   |           |   |   L-- EqualEqual
    |   |   |           |   |       +-- GetVar(c2)
    |   |   |           |   |       L-- String("=")
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Instance: Token
    |   |   |           |               +-- Plus
    |   |   |           |               |   +-- GetVar(c1)
    |   |   |           |               |   L-- GetVar(c2)
    |   |   |           |               +-- Field(p)
    |   |   |           |               +-- Plus
    |   |   |           |               |   +-- Field(p)
    |   |   |           |               |   L-- Int(2)
    |   |   |           |               L-- MethodCall: BangEqual
    |   |   |           |                   L-- GetVar(Kind)
    |   |   |           +-- If
    |   |   |           |   +-- And
    |   |   |           |   |   +-- EqualEqual
    |   |   |           |   |   |   +-- GetVar(c1)
    |   |   |           |   |   |   L-- String("=")
    |   |   |           |   |   L-- EqualEqual
    |   |   |           |   |       +-- GetVar(c2)
    |   |   |           |   |       L-- String("=")
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Instance: Token
    |   |   |           |               +-- Plus
    |   |   |           |               |   +-- GetVar(c1)
    |   |   |           |               |   L-- GetVar(c2)
    |   |   |           |               +-- Field(p)
    |   |   |           |               +-- Plus
    |   |   |           |               |   +-- Field(p)
    |   |   |           |               |   L-- Int(2)
    |   |   |           |               L-- MethodCall: EqualEqual
    |   |   |           |                   L-- GetVar(Kind)
    |   |   |           +-- If
    |   |   |           |   +-- And
    |   |   |           |   |   +-- EqualEqual
    |   |   |           |   |   |   +-- GetVar(c1)
    |   |   |           |   |   |   L-- String(">")
    |   |   |           |   |   L-- EqualEqual
    |   |   |           |   |       +-- GetVar(c2)
    |   |   |           |   |       L-- String("=")
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Instance: Token
    |   |   |           |               +-- Plus
    |   |   |           |               |   +-- GetVar(c1)
    |   |   |           |               |   L-- GetVar(c2)
    |   |   |           |               +-- Field(p)
    |   |   |           |               +-- Plus
    |   |   |           |               |   +-- Field(p)
    |   |   |           |               |   L-- Int(2)
    |   |   |           |               L-- MethodCall: GreaterEqual
    |   |   |           |                   L-- GetVar(Kind)
    |   |   |           +-- If
    |   |   |           |   +-- And
    |   |   |           |   |   +-- EqualEqual
    |   |   |           |   |   |   +-- GetVar(c1)
    |   |   |           |   |   |   L-- String("<")
    |   |   |           |   |   L-- EqualEqual
    |   |   |           |   |       +-- GetVar(c2)
    |   |   |           |   |       L-- String("=")
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Instance: Token
    |   |   |           |               +-- Plus
    |   |   |           |               |   +-- GetVar(c1)
    |   |   |           |               |   L-- GetVar(c2)
    |   |   |           |               +-- Field(p)
    |   |   |           |               +-- Plus
    |   |   |           |               |   +-- Field(p)
    |   |   |           |               |   L-- Int(2)
    |   |   |           |               L-- MethodCall: LessEqual
    |   |   |           |                   L-- GetVar(Kind)
    |   |   |           L-- Return
    |   |   |               L-- Nil
    |   |   |   L-- Method: next
    |   |   |       L-- Block
    |   |   |           +-- If
    |   |   |           |   +-- MethodCall: is_done
    |   |   |           |   L-- Block
    |   |   |           |       L-- Return
    |   |   |           |           L-- Nil
    |   |   |           +-- Pop
    |   |   |           |   L-- MethodCall: whitespace
    |   |   |           +-- While
    |   |   |           |   +-- Not
    |   |   |           |   |   L-- MethodCall: is_done
    |   |   |           |   L-- Block
    |   |   |           |       +-- Def: two_char
    |   |   |           |       |   L-- MethodCall: two_char
    |   |   |           |       +-- If
    |   |   |           |       |   +-- BangEqual
    |   |   |           |       |   |   +-- GetVar(two_char)
    |   |   |           |       |   |   L-- Nil
    |   |   |           |       |   L-- Block
    |   |   |           |       |       +-- SetField(p)
    |   |   |           |       |           L-- Plus
    |   |   |           |       |               +-- Field(p)
    |   |   |           |       |               L-- Int(2)
    |   |   |           |       |       L-- Return
    |   |   |           |       |           L-- GetVar(two_char)
    |   |   |           |       +-- If
    |   |   |           |       |   +-- MethodCall: letter
    |   |   |           |       |   L-- Block
    |   |   |           |       |       L-- Return
    |   |   |           |       |           L-- MethodCall: identifier
    |   |   |           |       +-- If
    |   |   |           |       |   +-- MethodCall: digit
    |   |   |           |       |   L-- Block
    |   |   |           |       |       L-- Return
    |   |   |           |       |           L-- MethodCall: number
    |   |   |           |       +-- Def: single_char
    |   |   |           |       |   L-- MethodCall: single_char
    |   |   |           |       +-- If
    |   |   |           |       |   +-- BangEqual
    |   |   |           |       |   |   +-- GetVar(single_char)
    |   |   |           |       |   |   L-- Nil
    |   |   |           |       |   L-- Block
    |   |   |           |       |       +-- SetField(p)
    |   |   |           |       |           L-- Plus
    |   |   |           |       |               +-- Field(p)
    |   |   |           |       |               L-- Int(1)
    |   |   |           |       |       L-- Return
    |   |   |           |       |           L-- GetVar(single_char)
    |   |   |           |       +-- If
    |   |   |           |       |   +-- EqualEqual
    |   |   |           |       |   |   +-- Index
    |   |   |           |       |   |   |   +-- Field(code)
    |   |   |           |       |   |   |   L-- Field(p)
    |   |   |           |       |   |   L-- String("\"")
    |   |   |           |       |   L-- Block
    |   |   |           |       |       L-- Return
    |   |   |           |       |           L-- MethodCall: string
    |   |   |           |       L-- Pop
    |   |   |           |           L-- MethodCall: advance
    |   |   |           L-- Return
    |   |   |               L-- Nil
    |   |   L-- Class: Peekable
    |   |       +-- Field: item
    |   |       +-- Field: peek_item
    |   |       +-- Method: next
    |   |       |   +-- Block
    |   |       |   |   +-- If
    |   |       |   |   |   +-- BangEqual
    |   |       |   |   |   |   +-- Field(peek_item)
    |   |       |   |   |   |   L-- Nil
    |   |       |   |   |   L-- Block
    |   |       |   |   |       +-- Def: temp
    |   |       |   |   |       |   L-- Field(peek_item)
    |   |       |   |   |       +-- SetField(peek_item)
    |   |       |   |   |           L-- Nil
    |   |       |   |   |       L-- Return
    |   |       |   |   |           L-- GetVar(temp)
    |   |       |   |   L-- Return
    |   |       |   |       L-- MethodCall: next
    |   |       |   |           L-- Field(item)
    |   |       L-- Method: peek
    |   |           L-- Block
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Field(peek_item)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       L-- SetField(peek_item)
    |   |               |           L-- MethodCall: next
    |   |               |               L-- Field(item)
    |   |               L-- Return
    |   |                   L-- Field(peek_item)
    |   +-- Root
    |   |   +-- Class: AstRoot
    |   |   |   +-- Field: nodes
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstRoot
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstNeg
    |   |   |   +-- Field: expr
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstNeg
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstNot
    |   |   |   +-- Field: expr
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstNot
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstFloat
    |   |   |   +-- Field: value
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstFloat
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstInt
    |   |   |   +-- Field: value
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstInt
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstString
    |   |   |   +-- Field: value
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstString
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstGetField
    |   |   |   +-- Field: value
    |   |   |   +-- Method: accept
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- Return
    |   |   |   |   |       L-- MethodCall: visitAstGetField
    |   |   |   |   |           +-- Args
    |   |   |   |   |           |   L-- GetSelf
    |   |   |   |   |           L-- GetVar(visitor)
    |   |   |   L-- Method: kind
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- String("GetField")
    |   |   +-- Class: AstSetField
    |   |   |   +-- Field: name
    |   |   |   +-- Field: expr
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstSetField
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstList
    |   |   |   +-- Field: items
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstList
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstIndex
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: indexer
    |   |   |   +-- Method: accept
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- Return
    |   |   |   |   |       L-- MethodCall: visitAstIndex
    |   |   |   |   |           +-- Args
    |   |   |   |   |           |   L-- GetSelf
    |   |   |   |   |           L-- GetVar(visitor)
    |   |   |   L-- Method: kind
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- String("Index")
    |   |   +-- Class: AstIndexSet
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: indexer
    |   |   |   +-- Field: rhs
    |   |   |   +-- Method: accept
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- Return
    |   |   |   |   |       L-- MethodCall: visitAstIndexSet
    |   |   |   |   |           +-- Args
    |   |   |   |   |           |   L-- GetSelf
    |   |   |   |   |           L-- GetVar(visitor)
    |   |   |   L-- Method: kind
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- String("IndexSet")
    |   |   +-- Class: AstBool
    |   |   |   +-- Field: value
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstBool
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstNil
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstNil
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstGetVar
    |   |   |   +-- Field: value
    |   |   |   +-- Method: accept
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- Return
    |   |   |   |   |       L-- MethodCall: visitAstGetVar
    |   |   |   |   |           +-- Args
    |   |   |   |   |           |   L-- GetSelf
    |   |   |   |   |           L-- GetVar(visitor)
    |   |   |   L-- Method: kind
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- String("GetVar")
    |   |   +-- Class: AstDef
    |   |   |   +-- Field: name
    |   |   |   +-- Field: expr
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstDef
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstPlus
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstPlus
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstMinus
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstMinus
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstClass
    |   |   |   +-- Field: name
    |   |   |   +-- Field: fields
    |   |   |   +-- Field: methods
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstClass
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstBlock
    |   |   |   +-- Field: stmts
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstBlock
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstReassign
    |   |   |   +-- Field: name
    |   |   |   +-- Field: expr
    |   |   |   +-- Method: accept
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- Return
    |   |   |   |   |       L-- MethodCall: visitAstReassign
    |   |   |   |   |           +-- Args
    |   |   |   |   |           |   L-- GetSelf
    |   |   |   |   |           L-- GetVar(visitor)
    |   |   |   L-- Method: kind
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- String("Reassign")
    |   |   +-- Class: AstInstance
    |   |   |   +-- Field: name
    |   |   |   +-- Field: args
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstInstance
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstNative
    |   |   |   +-- Field: name
    |   |   |   +-- Field: args
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstNative
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstMethod
    |   |   |   +-- Field: name
    |   |   |   +-- Field: args
    |   |   |   +-- Field: lhs
    |   |   |   +-- Method: accept
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- Return
    |   |   |   |   |       L-- MethodCall: visitAstMethod
    |   |   |   |   |           +-- Args
    |   |   |   |   |           |   L-- GetSelf
    |   |   |   |   |           L-- GetVar(visitor)
    |   |   |   L-- Method: kind
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- String("Method")
    |   |   +-- Class: AstPop
    |   |   |   +-- Field: expr
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstPop
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstEqualEqual
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstEqualEqual
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstIf
    |   |   |   +-- Field: condition
    |   |   |   +-- Field: block
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstIf
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstReturn
    |   |   |   +-- Field: expr
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstReturn
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstWhile
    |   |   |   +-- Field: condition
    |   |   |   +-- Field: block
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstWhile
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstOr
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstOr
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstAnd
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstAnd
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstBangEqual
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstBangEqual
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstGreater
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstGreater
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstGreaterEqual
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstGreaterEqual
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstLess
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstLess
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstLessEqual
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: rhs
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstLessEqual
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstGet
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: field
    |   |   |   +-- Method: accept
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- Return
    |   |   |   |   |       L-- MethodCall: visitAstGet
    |   |   |   |   |           +-- Args
    |   |   |   |   |           |   L-- GetSelf
    |   |   |   |   |           L-- GetVar(visitor)
    |   |   |   L-- Method: kind
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- String("Get")
    |   |   +-- Class: AstImport
    |   |   |   +-- Field: imports
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstImport
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: AstSet
    |   |   |   +-- Field: lhs
    |   |   |   +-- Field: field
    |   |   |   +-- Field: rhs
    |   |   |   +-- Method: accept
    |   |   |   |   +-- Block
    |   |   |   |   |   L-- Return
    |   |   |   |   |       L-- MethodCall: visitAstSet
    |   |   |   |   |           +-- Args
    |   |   |   |   |           |   L-- GetSelf
    |   |   |   |   |           L-- GetVar(visitor)
    |   |   |   L-- Method: kind
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- String("Set")
    |   |   +-- Class: AstGetSelf
    |   |   |   L-- Method: accept
    |   |   |       L-- Block
    |   |   |           L-- Return
    |   |   |               L-- MethodCall: visitAstGetSelf
    |   |   |                   +-- Args
    |   |   |                   |   L-- GetSelf
    |   |   |                   L-- GetVar(visitor)
    |   |   +-- Class: Method
    |   |   |   +-- Field: name
    |   |   |   +-- Field: params
    |   |   |   L-- Field: block
    |   |   L-- Class: Parser
    |   |       +-- Field: lexer
    |   |       +-- Field: file
    |   |       +-- Method: consume
    |   |       |   +-- Block
    |   |       |   |   +-- Def: token
    |   |       |   |   |   L-- MethodCall: next
    |   |       |   |   |       L-- Field(lexer)
    |   |       |   |   L-- If
    |   |       |   |       +-- BangEqual
    |   |       |   |       |   +-- GetVar(kind)
    |   |       |   |       |   L-- Get(kind)
    |   |       |   |       |       L-- GetVar(token)
    |   |       |   |       L-- Block
    |   |       |   |           +-- Pop
    |   |       |   |           |   L-- Native: print
    |   |       |   |           |       +-- String("token")
    |   |       |   |           |       L-- GetVar(token)
    |   |       |   |           L-- Pop
    |   |       |   |               L-- Native: err
    |   |       |   |                   L-- Plus
    |   |       |   |                       +-- Plus
    |   |       |   |                       |   +-- Plus
    |   |       |   |                       |   |   +-- String("expected ")
    |   |       |   |                       |   |   L-- Native: to_string
    |   |       |   |                       |   |       L-- GetVar(kind)
    |   |       |   |                       |   L-- String(" but got ")
    |   |       |   |                       L-- Native: to_string
    |   |       |   |                           L-- Get(kind)
    |   |       |   |                               L-- GetVar(token)
    |   |       L-- Method: consume_identifier
    |   |           L-- Block
    |   |               +-- Def: token
    |   |               |   L-- MethodCall: next
    |   |               |       L-- Field(lexer)
    |   |               +-- If
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Identifier
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- Native: err
    |   |               |               L-- Plus
    |   |               |                   +-- String("expected identifier but got ")
    |   |               |                   L-- Native: to_string
    |   |               |                       L-- Get(kind)
    |   |               |                           L-- GetVar(token)
    |   |               L-- Return
    |   |                   L-- Get(value)
    |   |                       L-- GetVar(token)
    |   |       L-- Method: infix_prec
    |   |           L-- Block
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(token)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(0)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Equal
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(1)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Or
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(3)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: And
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(4)
    |   |               +-- If
    |   |               |   +-- Or
    |   |               |   |   +-- EqualEqual
    |   |               |   |   |   +-- Get(kind)
    |   |               |   |   |   |   +-- GetVar(token)
    |   |               |   |   |   L-- MethodCall: BangEqual
    |   |               |   |   |       L-- GetVar(Kind)
    |   |               |   |   L-- EqualEqual
    |   |               |   |       +-- Get(kind)
    |   |               |   |       |   +-- GetVar(token)
    |   |               |   |       L-- MethodCall: EqualEqual
    |   |               |   |           L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(5)
    |   |               +-- If
    |   |               |   +-- Or
    |   |               |   |   +-- Or
    |   |               |   |   |   +-- Or
    |   |               |   |   |   |   +-- EqualEqual
    |   |               |   |   |   |   |   +-- Get(kind)
    |   |               |   |   |   |   |   |   +-- GetVar(token)
    |   |               |   |   |   |   |   L-- MethodCall: Greater
    |   |               |   |   |   |   |       L-- GetVar(Kind)
    |   |               |   |   |   |   L-- EqualEqual
    |   |               |   |   |   |       +-- Get(kind)
    |   |               |   |   |   |       |   +-- GetVar(token)
    |   |               |   |   |   |       L-- MethodCall: GreaterEqual
    |   |               |   |   |   |           L-- GetVar(Kind)
    |   |               |   |   |   L-- EqualEqual
    |   |               |   |   |       +-- Get(kind)
    |   |               |   |   |       |   +-- GetVar(token)
    |   |               |   |   |       L-- MethodCall: Less
    |   |               |   |   |           L-- GetVar(Kind)
    |   |               |   |   L-- EqualEqual
    |   |               |   |       +-- Get(kind)
    |   |               |   |       |   +-- GetVar(token)
    |   |               |   |       L-- MethodCall: LessEqual
    |   |               |   |           L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(6)
    |   |               +-- If
    |   |               |   +-- Or
    |   |               |   |   +-- EqualEqual
    |   |               |   |   |   +-- Get(kind)
    |   |               |   |   |   |   +-- GetVar(token)
    |   |               |   |   |   L-- MethodCall: Plus
    |   |               |   |   |       L-- GetVar(Kind)
    |   |               |   |   L-- EqualEqual
    |   |               |   |       +-- Get(kind)
    |   |               |   |       |   +-- GetVar(token)
    |   |               |   |       L-- MethodCall: Minus
    |   |               |   |           L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(7)
    |   |               +-- If
    |   |               |   +-- Or
    |   |               |   |   +-- EqualEqual
    |   |               |   |   |   +-- Get(kind)
    |   |               |   |   |   |   +-- GetVar(token)
    |   |               |   |   |   L-- MethodCall: Star
    |   |               |   |   |       L-- GetVar(Kind)
    |   |               |   |   L-- EqualEqual
    |   |               |   |       +-- Get(kind)
    |   |               |   |       |   +-- GetVar(token)
    |   |               |   |       L-- MethodCall: Slash
    |   |               |   |           L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(8)
    |   |               +-- If
    |   |               |   +-- Or
    |   |               |   |   +-- EqualEqual
    |   |               |   |   |   +-- Get(kind)
    |   |               |   |   |   |   +-- GetVar(token)
    |   |               |   |   |   L-- MethodCall: LeftParen
    |   |               |   |   |       L-- GetVar(Kind)
    |   |               |   |   L-- EqualEqual
    |   |               |   |       +-- Get(kind)
    |   |               |   |       |   +-- GetVar(token)
    |   |               |   |       L-- MethodCall: LeftBracket
    |   |               |   |           L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(10)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Dot
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Int(11)
    |   |               L-- Return
    |   |                   L-- Int(0)
    |   |       L-- Method: field
    |   |           L-- Block
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- MethodCall: peek
    |   |               |   |   |   |   L-- Field(lexer)
    |   |               |   |   L-- MethodCall: Identifier
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- Def: name
    |   |               |       |   L-- MethodCall: consume_identifier
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstGetField
    |   |               |               L-- GetVar(name)
    |   |               +-- Return
    |   |               |   L-- Instance: AstGetSelf
    |   |               L-- Pop
    |   |                   L-- Native: err
    |   |                       L-- String("field")
    |   |       L-- Method: grouping
    |   |           L-- Block
    |   |               +-- Def: node
    |   |               |   L-- MethodCall: expr
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: RightParen
    |   |               |       |       L-- GetVar(Kind)
    |   |               L-- Return
    |   |                   L-- GetVar(node)
    |   |       L-- Method: parse_prefix
    |   |           L-- Block
    |   |               +-- Def: token
    |   |               |   L-- MethodCall: next
    |   |               |       L-- Field(lexer)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Minus
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstNeg
    |   |               |               L-- MethodCall: parse_expr
    |   |               |                   +-- Args
    |   |               |                   |   L-- Int(9)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Bang
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstNot
    |   |               |               L-- MethodCall: parse_expr
    |   |               |                   +-- Args
    |   |               |                   |   L-- Int(9)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: LeftBracket
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: list
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Identifier
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstGetVar
    |   |               |               L-- Get(value)
    |   |               |                   L-- GetVar(token)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Int
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstInt
    |   |               |               L-- Get(value)
    |   |               |                   L-- GetVar(token)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Float
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstFloat
    |   |               |               L-- Get(value)
    |   |               |                   L-- GetVar(token)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: String
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstString
    |   |               |               L-- Get(value)
    |   |               |                   L-- GetVar(token)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: True
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstBool
    |   |               |               L-- Bool(true)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: False
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstBool
    |   |               |               L-- Bool(false)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Nil
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- GetVar(AstNil)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: At
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: field
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Hash
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: native
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: LeftParen
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: grouping
    |   |               +-- Pop
    |   |               |   L-- Native: print
    |   |               |       +-- String("token")
    |   |               |       L-- GetVar(token)
    |   |               L-- Pop
    |   |                   L-- Native: err
    |   |                       L-- String("parse prefix")
    |   |       L-- Method: match_infix_token
    |   |           L-- Block
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: Or
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstOr
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: And
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstAnd
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: BangEqual
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstBangEqual
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: EqualEqual
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstEqualEqual
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: Greater
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstGreater
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: GreaterEqual
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstGreaterEqual
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: Less
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstLess
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: LessEqual
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstLessEqual
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: Plus
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstPlus
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: Minus
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstMinus
    |   |               |               +-- GetVar(lhs)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(kind)
    |   |               |   |   L-- MethodCall: Equal
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- MethodCall: kind
    |   |               |       |   |   |   L-- GetVar(lhs)
    |   |               |       |   |   L-- String("GetVar")
    |   |               |       |   L-- Block
    |   |               |       |       L-- Return
    |   |               |       |           L-- Instance: AstReassign
    |   |               |       |               +-- Get(value)
    |   |               |       |               |   +-- GetVar(lhs)
    |   |               |       |               L-- GetVar(rhs)
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- MethodCall: kind
    |   |               |       |   |   |   L-- GetVar(lhs)
    |   |               |       |   |   L-- String("Get")
    |   |               |       |   L-- Block
    |   |               |       |       L-- Return
    |   |               |       |           L-- Instance: AstSet
    |   |               |       |               +-- Get(lhs)
    |   |               |       |               |   +-- GetVar(lhs)
    |   |               |       |               +-- Get(field)
    |   |               |       |               |   +-- GetVar(lhs)
    |   |               |       |               L-- GetVar(rhs)
    |   |               |       L-- If
    |   |               |           +-- EqualEqual
    |   |               |           |   +-- MethodCall: kind
    |   |               |           |   |   L-- GetVar(lhs)
    |   |               |           |   L-- String("Index")
    |   |               |           L-- Block
    |   |               |               L-- Return
    |   |               |                   L-- Instance: AstIndexSet
    |   |               |                       +-- Get(lhs)
    |   |               |                       |   +-- GetVar(lhs)
    |   |               |                       +-- Get(indexer)
    |   |               |                       |   +-- GetVar(lhs)
    |   |               |                       L-- GetVar(rhs)
    |   |               L-- Pop
    |   |                   L-- Native: err
    |   |                       L-- String("no infix token match")
    |   |       L-- Method: call
    |   |           L-- Block
    |   |               +-- Def: args
    |   |               |   L-- List
    |   |               +-- While
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- MethodCall: peek
    |   |               |   |   |   |   L-- Field(lexer)
    |   |               |   |   L-- MethodCall: RightParen
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- Pop
    |   |               |       |   L-- Native: append
    |   |               |       |       +-- GetVar(args)
    |   |               |       |       L-- MethodCall: expr
    |   |               |       L-- If
    |   |               |           +-- EqualEqual
    |   |               |           |   +-- Get(kind)
    |   |               |           |   |   +-- MethodCall: peek
    |   |               |           |   |   |   L-- Field(lexer)
    |   |               |           |   L-- MethodCall: Comma
    |   |               |           |       L-- GetVar(Kind)
    |   |               |           L-- Block
    |   |               |               L-- Pop
    |   |               |                   L-- MethodCall: consume
    |   |               |                       +-- Args
    |   |               |                       |   L-- MethodCall: Comma
    |   |               |                       |       L-- GetVar(Kind)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: RightParen
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- MethodCall: kind
    |   |               |   |   |   L-- GetVar(lhs)
    |   |               |   |   L-- String("GetVar")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstInstance
    |   |               |               +-- Get(value)
    |   |               |               |   +-- GetVar(lhs)
    |   |               |               L-- GetVar(args)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- MethodCall: kind
    |   |               |   |   |   L-- GetVar(lhs)
    |   |               |   |   L-- String("Get")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstMethod
    |   |               |               +-- Get(field)
    |   |               |               |   +-- GetVar(lhs)
    |   |               |               +-- GetVar(args)
    |   |               |               L-- Get(lhs)
    |   |               |                   L-- GetVar(lhs)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- MethodCall: kind
    |   |               |   |   |   L-- GetVar(lhs)
    |   |               |   |   L-- String("GetField")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstMethod
    |   |               |               +-- Get(value)
    |   |               |               |   +-- GetVar(lhs)
    |   |               |               +-- GetVar(args)
    |   |               |               L-- Nil
    |   |               L-- Pop
    |   |                   L-- Native: err
    |   |                       L-- String("call err")
    |   |       L-- Method: index
    |   |           L-- Block
    |   |               +-- Def: expr
    |   |               |   L-- MethodCall: expr
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: RightBracket
    |   |               |       |       L-- GetVar(Kind)
    |   |               L-- Return
    |   |                   L-- Instance: AstIndex
    |   |                       +-- GetVar(lhs)
    |   |                       L-- GetVar(expr)
    |   |       L-- Method: get_or_set
    |   |           L-- Block
    |   |               +-- Def: name
    |   |               |   L-- MethodCall: consume_identifier
    |   |               L-- Return
    |   |                   L-- Instance: AstGet
    |   |                       +-- GetVar(lhs)
    |   |                       L-- GetVar(name)
    |   |       L-- Method: parse_infix
    |   |           L-- Block
    |   |               +-- Def: token
    |   |               |   L-- MethodCall: peek
    |   |               |       L-- Field(lexer)
    |   |               +-- While
    |   |               |   +-- BangEqual
    |   |               |   |   +-- GetVar(token)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- Get(kind)
    |   |               |       |   |   |   +-- GetVar(token)
    |   |               |       |   |   L-- MethodCall: LeftParen
    |   |               |       |   |       L-- GetVar(Kind)
    |   |               |       |   L-- Block
    |   |               |       |       +-- Pop
    |   |               |       |       |   L-- MethodCall: consume
    |   |               |       |       |       +-- Args
    |   |               |       |       |       |   L-- MethodCall: LeftParen
    |   |               |       |       |       |       L-- GetVar(Kind)
    |   |               |       |       L-- Reassign: lhs
    |   |               |       |           L-- MethodCall: call
    |   |               |       |               +-- Args
    |   |               |       |               |   L-- GetVar(lhs)
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- Get(kind)
    |   |               |       |   |   |   +-- GetVar(token)
    |   |               |       |   |   L-- MethodCall: LeftBracket
    |   |               |       |   |       L-- GetVar(Kind)
    |   |               |       |   L-- Block
    |   |               |       |       +-- Pop
    |   |               |       |       |   L-- MethodCall: consume
    |   |               |       |       |       +-- Args
    |   |               |       |       |       |   L-- MethodCall: LeftBracket
    |   |               |       |       |       |       L-- GetVar(Kind)
    |   |               |       |       L-- Reassign: lhs
    |   |               |       |           L-- MethodCall: index
    |   |               |       |               +-- Args
    |   |               |       |               |   L-- GetVar(lhs)
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- Get(kind)
    |   |               |       |   |   |   +-- GetVar(token)
    |   |               |       |   |   L-- MethodCall: Dot
    |   |               |       |   |       L-- GetVar(Kind)
    |   |               |       |   L-- Block
    |   |               |       |       +-- Pop
    |   |               |       |       |   L-- MethodCall: consume
    |   |               |       |       |       +-- Args
    |   |               |       |       |       |   L-- MethodCall: Dot
    |   |               |       |       |       |       L-- GetVar(Kind)
    |   |               |       |       L-- Reassign: lhs
    |   |               |       |           L-- MethodCall: get_or_set
    |   |               |       |               +-- Args
    |   |               |       |               |   L-- GetVar(lhs)
    |   |               |       +-- If
    |   |               |       |   +-- And
    |   |               |       |   |   +-- And
    |   |               |       |   |   |   +-- BangEqual
    |   |               |       |   |   |   |   +-- Get(kind)
    |   |               |       |   |   |   |   |   +-- GetVar(token)
    |   |               |       |   |   |   |   L-- MethodCall: LeftParen
    |   |               |       |   |   |   |       L-- GetVar(Kind)
    |   |               |       |   |   |   L-- BangEqual
    |   |               |       |   |   |       +-- Get(kind)
    |   |               |       |   |   |       |   +-- GetVar(token)
    |   |               |       |   |   |       L-- MethodCall: LeftBracket
    |   |               |       |   |   |           L-- GetVar(Kind)
    |   |               |       |   |   L-- BangEqual
    |   |               |       |   |       +-- Get(kind)
    |   |               |       |   |       |   +-- GetVar(token)
    |   |               |       |   |       L-- MethodCall: Dot
    |   |               |       |   |           L-- GetVar(Kind)
    |   |               |       |   L-- Block
    |   |               |       |       +-- Def: next_prec
    |   |               |       |       |   L-- MethodCall: infix_prec
    |   |               |       |       |       +-- Args
    |   |               |       |       |       |   L-- GetVar(token)
    |   |               |       |       +-- If
    |   |               |       |       |   +-- EqualEqual
    |   |               |       |       |   |   +-- GetVar(next_prec)
    |   |               |       |       |   |   L-- Int(0)
    |   |               |       |       |   L-- Block
    |   |               |       |       |       L-- Return
    |   |               |       |       |           L-- GetVar(lhs)
    |   |               |       |       +-- Pop
    |   |               |       |       |   L-- MethodCall: consume
    |   |               |       |       |       +-- Args
    |   |               |       |       |       |   L-- Get(kind)
    |   |               |       |       |       |       L-- GetVar(token)
    |   |               |       |       +-- Def: rhs
    |   |               |       |       |   L-- MethodCall: parse_expr
    |   |               |       |       |       +-- Args
    |   |               |       |       |       |   L-- GetVar(next_prec)
    |   |               |       |       L-- Reassign: lhs
    |   |               |       |           L-- MethodCall: match_infix_token
    |   |               |       |               +-- Args
    |   |               |       |               |   L-- GetVar(lhs)
    |   |               |       |               |   L-- GetVar(rhs)
    |   |               |       |               |   L-- Get(kind)
    |   |               |       |               |       L-- GetVar(token)
    |   |               |       L-- Reassign: token
    |   |               |           L-- MethodCall: peek
    |   |               |               L-- Field(lexer)
    |   |               L-- Return
    |   |                   L-- GetVar(lhs)
    |   |       L-- Method: parse_expr
    |   |           L-- Block
    |   |               +-- Def: lhs
    |   |               |   L-- MethodCall: parse_prefix
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(prec)
    |   |               |   |   L-- MethodCall: infix_prec
    |   |               |   |       +-- Args
    |   |               |   |       |   L-- MethodCall: peek
    |   |               |   |       |       L-- Field(lexer)
    |   |               |   L-- Block
    |   |               |       L-- Reassign: lhs
    |   |               |           L-- MethodCall: parse_infix
    |   |               |               +-- Args
    |   |               |               |   L-- GetVar(lhs)
    |   |               L-- Return
    |   |                   L-- GetVar(lhs)
    |   |       L-- Method: expr
    |   |           L-- Block
    |   |               L-- Return
    |   |                   L-- MethodCall: parse_expr
    |   |                       +-- Args
    |   |                       |   L-- Int(0)
    |   |       L-- Method: block
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: LeftBrace
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: stmts
    |   |               |   L-- List
    |   |               +-- Def: done
    |   |               |   L-- Bool(false)
    |   |               +-- While
    |   |               |   +-- Not
    |   |               |   |   L-- GetVar(done)
    |   |               |   L-- Block
    |   |               |       +-- Def: token
    |   |               |       |   L-- MethodCall: peek
    |   |               |       |       L-- Field(lexer)
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- Get(kind)
    |   |               |       |   |   |   +-- GetVar(token)
    |   |               |       |   |   L-- MethodCall: RightBrace
    |   |               |       |   |       L-- GetVar(Kind)
    |   |               |       |   L-- Block
    |   |               |       |       L-- Reassign: done
    |   |               |       |           L-- Bool(true)
    |   |               |       L-- If
    |   |               |           +-- BangEqual
    |   |               |           |   +-- Get(kind)
    |   |               |           |   |   +-- GetVar(token)
    |   |               |           |   L-- MethodCall: RightBrace
    |   |               |           |       L-- GetVar(Kind)
    |   |               |           L-- Block
    |   |               |               L-- Pop
    |   |               |                   L-- Native: append
    |   |               |                       +-- GetVar(stmts)
    |   |               |                       L-- MethodCall: stmt
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: RightBrace
    |   |               |       |       L-- GetVar(Kind)
    |   |               L-- Return
    |   |                   L-- Instance: AstBlock
    |   |                       L-- GetVar(stmts)
    |   |       L-- Method: param_list
    |   |           L-- Block
    |   |               +-- If
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- MethodCall: peek
    |   |               |   |   |   |   L-- Field(lexer)
    |   |               |   |   L-- MethodCall: LeftParen
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: LeftParen
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: res
    |   |               |   L-- List
    |   |               +-- While
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- MethodCall: peek
    |   |               |   |   |   |   L-- Field(lexer)
    |   |               |   |   L-- MethodCall: RightParen
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- Def: token
    |   |               |       |   L-- MethodCall: peek
    |   |               |       |       L-- Field(lexer)
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- Get(kind)
    |   |               |       |   |   |   +-- GetVar(token)
    |   |               |       |   |   L-- MethodCall: Identifier
    |   |               |       |   |       L-- GetVar(Kind)
    |   |               |       |   L-- Block
    |   |               |       |       +-- Def: name
    |   |               |       |       |   L-- MethodCall: consume_identifier
    |   |               |       |       L-- Pop
    |   |               |       |           L-- Native: append
    |   |               |       |               +-- GetVar(res)
    |   |               |       |               L-- GetVar(name)
    |   |               |       L-- If
    |   |               |           +-- EqualEqual
    |   |               |           |   +-- Get(kind)
    |   |               |           |   |   +-- GetVar(token)
    |   |               |           |   L-- MethodCall: Comma
    |   |               |           |       L-- GetVar(Kind)
    |   |               |           L-- Block
    |   |               |               L-- Pop
    |   |               |                   L-- MethodCall: consume
    |   |               |                       +-- Args
    |   |               |                       |   L-- MethodCall: Comma
    |   |               |                       |       L-- GetVar(Kind)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: RightParen
    |   |               |       |       L-- GetVar(Kind)
    |   |               L-- Return
    |   |                   L-- GetVar(res)
    |   |       L-- Method: stmt_def
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: Def
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: name
    |   |               |   L-- MethodCall: consume_identifier
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: Equal
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: expr
    |   |               |   L-- MethodCall: expr
    |   |               L-- Return
    |   |                   L-- Instance: AstDef
    |   |                       +-- GetVar(name)
    |   |                       L-- GetVar(expr)
    |   |       L-- Method: stmt_class
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: Class
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: name
    |   |               |   L-- MethodCall: consume_identifier
    |   |               +-- Def: fields
    |   |               |   L-- MethodCall: param_list
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: LeftBrace
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: methods
    |   |               |   L-- List
    |   |               +-- While
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- MethodCall: peek
    |   |               |   |   |   |   L-- Field(lexer)
    |   |               |   |   L-- MethodCall: RightBrace
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- Def: method_name
    |   |               |       |   L-- MethodCall: consume_identifier
    |   |               |       +-- Def: params
    |   |               |       |   L-- MethodCall: param_list
    |   |               |       +-- Def: block
    |   |               |       |   L-- MethodCall: block
    |   |               |       L-- Pop
    |   |               |           L-- Native: append
    |   |               |               +-- GetVar(methods)
    |   |               |               L-- Instance: Method
    |   |               |                   +-- GetVar(method_name)
    |   |               |                   +-- GetVar(params)
    |   |               |                   L-- GetVar(block)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: RightBrace
    |   |               |       |       L-- GetVar(Kind)
    |   |               L-- Return
    |   |                   L-- Instance: AstClass
    |   |                       +-- GetVar(name)
    |   |                       +-- GetVar(fields)
    |   |                       L-- GetVar(methods)
    |   |       L-- Method: list
    |   |           L-- Block
    |   |               +-- Def: items
    |   |               |   L-- List
    |   |               +-- Def: token
    |   |               |   L-- MethodCall: peek
    |   |               |       L-- Field(lexer)
    |   |               +-- Def: is_first
    |   |               |   L-- Bool(true)
    |   |               +-- While
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: RightBracket
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- If
    |   |               |       |   +-- Not
    |   |               |       |   |   L-- GetVar(is_first)
    |   |               |       |   L-- Block
    |   |               |       |       L-- Pop
    |   |               |       |           L-- MethodCall: consume
    |   |               |       |               +-- Args
    |   |               |       |               |   L-- MethodCall: Comma
    |   |               |       |               |       L-- GetVar(Kind)
    |   |               |       +-- Reassign: is_first
    |   |               |       |   L-- Bool(false)
    |   |               |       +-- Pop
    |   |               |       |   L-- Native: append
    |   |               |       |       +-- GetVar(items)
    |   |               |       |       L-- MethodCall: expr
    |   |               |       L-- Reassign: token
    |   |               |           L-- MethodCall: peek
    |   |               |               L-- Field(lexer)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: RightBracket
    |   |               |       |       L-- GetVar(Kind)
    |   |               L-- Return
    |   |                   L-- Instance: AstList
    |   |                       L-- GetVar(items)
    |   |       L-- Method: stmt_if
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: If
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: expr
    |   |               |   L-- MethodCall: expr
    |   |               +-- Def: block
    |   |               |   L-- MethodCall: block
    |   |               L-- Return
    |   |                   L-- Instance: AstIf
    |   |                       +-- GetVar(expr)
    |   |                       L-- GetVar(block)
    |   |       L-- Method: stmt_while
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: While
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: condition
    |   |               |   L-- MethodCall: expr
    |   |               +-- Def: block
    |   |               |   L-- MethodCall: block
    |   |               L-- Return
    |   |                   L-- Instance: AstWhile
    |   |                       +-- GetVar(condition)
    |   |                       L-- GetVar(block)
    |   |       L-- Method: stmt_return
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: Return
    |   |               |       |       L-- GetVar(Kind)
    |   |               L-- Return
    |   |                   L-- Instance: AstReturn
    |   |                       L-- MethodCall: expr
    |   |       L-- Method: stmt_set_field
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: At
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: name
    |   |               |   L-- MethodCall: consume_identifier
    |   |               +-- Def: next
    |   |               |   L-- MethodCall: next
    |   |               |       L-- Field(lexer)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(next)
    |   |               |   |   L-- MethodCall: Equal
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstSetField
    |   |               |               +-- GetVar(name)
    |   |               |               L-- MethodCall: expr
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(next)
    |   |               |   |   L-- MethodCall: LeftParen
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstPop
    |   |               |               L-- MethodCall: call
    |   |               |                   +-- Args
    |   |               |                   |   L-- Instance: AstGetField
    |   |               |                   |       L-- GetVar(name)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(next)
    |   |               |   |   L-- MethodCall: LeftBracket
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- Def: indexer
    |   |               |       |   L-- MethodCall: expr
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: consume
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- MethodCall: RightBracket
    |   |               |       |       |       L-- GetVar(Kind)
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: consume
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- MethodCall: Equal
    |   |               |       |       |       L-- GetVar(Kind)
    |   |               |       +-- Def: rhs
    |   |               |       |   L-- MethodCall: expr
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstIndexSet
    |   |               |               +-- Instance: AstGetField
    |   |               |               |   L-- GetVar(name)
    |   |               |               +-- GetVar(indexer)
    |   |               |               L-- GetVar(rhs)
    |   |               +-- Pop
    |   |               |   L-- Native: print
    |   |               |       +-- String("next ")
    |   |               |       L-- GetVar(next)
    |   |               L-- Pop
    |   |                   L-- Native: err
    |   |                       L-- String("todo: stmt_set_field")
    |   |       L-- Method: native
    |   |           L-- Block
    |   |               +-- Def: name
    |   |               |   L-- MethodCall: consume_identifier
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: LeftParen
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: args
    |   |               |   L-- List
    |   |               +-- Def: done
    |   |               |   L-- EqualEqual
    |   |               |       +-- Get(kind)
    |   |               |       |   +-- MethodCall: peek
    |   |               |       |   |   L-- Field(lexer)
    |   |               |       L-- MethodCall: RightParen
    |   |               |           L-- GetVar(Kind)
    |   |               +-- While
    |   |               |   +-- Not
    |   |               |   |   L-- GetVar(done)
    |   |               |   L-- Block
    |   |               |       +-- Pop
    |   |               |       |   L-- Native: append
    |   |               |       |       +-- GetVar(args)
    |   |               |       |       L-- MethodCall: expr
    |   |               |       +-- Def: token
    |   |               |       |   L-- Get(kind)
    |   |               |       |       L-- MethodCall: peek
    |   |               |       |           L-- Field(lexer)
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- GetVar(token)
    |   |               |       |   |   L-- MethodCall: Comma
    |   |               |       |   |       L-- GetVar(Kind)
    |   |               |       |   L-- Block
    |   |               |       |       L-- Pop
    |   |               |       |           L-- MethodCall: consume
    |   |               |       |               +-- Args
    |   |               |       |               |   L-- MethodCall: Comma
    |   |               |       |               |       L-- GetVar(Kind)
    |   |               |       L-- If
    |   |               |           +-- EqualEqual
    |   |               |           |   +-- GetVar(token)
    |   |               |           |   L-- MethodCall: RightParen
    |   |               |           |       L-- GetVar(Kind)
    |   |               |           L-- Block
    |   |               |               L-- Reassign: done
    |   |               |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: RightParen
    |   |               |       |       L-- GetVar(Kind)
    |   |               L-- Return
    |   |                   L-- Instance: AstNative
    |   |                       +-- GetVar(name)
    |   |                       L-- GetVar(args)
    |   |       L-- Method: stmt
    |   |           L-- Block
    |   |               +-- Def: token
    |   |               |   L-- MethodCall: peek
    |   |               |       L-- Field(lexer)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: LeftBrace
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: block
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Def
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: stmt_def
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: LeftBracket
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: list
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Class
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: stmt_class
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Identifier
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- Def: expr
    |   |               |       |   L-- MethodCall: expr
    |   |               |       +-- Pop
    |   |               |       |   L-- Native: print
    |   |               |       |       +-- String("todo: should pop if method instance or get")
    |   |               |       |       L-- GetVar(expr)
    |   |               |       +-- Def: kind
    |   |               |       |   L-- MethodCall: kind
    |   |               |       |       L-- GetVar(expr)
    |   |               |       +-- If
    |   |               |       |   +-- Or
    |   |               |       |   |   +-- EqualEqual
    |   |               |       |   |   |   +-- GetVar(kind)
    |   |               |       |   |   |   L-- String("Method")
    |   |               |       |   |   L-- Or
    |   |               |       |   |       +-- EqualEqual
    |   |               |       |   |       |   +-- GetVar(kind)
    |   |               |       |   |       |   L-- String("Instance")
    |   |               |       |   |       L-- EqualEqual
    |   |               |       |   |           +-- GetVar(kind)
    |   |               |       |   |           L-- String("Get")
    |   |               |       |   L-- Block
    |   |               |       |       L-- Return
    |   |               |       |           L-- Instance: AstPop
    |   |               |       |               L-- GetVar(expr)
    |   |               |       L-- Return
    |   |               |           L-- GetVar(expr)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: If
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: stmt_if
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: While
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: stmt_while
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Return
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: stmt_return
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: At
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: stmt_set_field
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Hash
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: consume
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- MethodCall: Hash
    |   |               |       |       |       L-- GetVar(Kind)
    |   |               |       L-- Return
    |   |               |           L-- Instance: AstPop
    |   |               |               L-- MethodCall: native
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: Import
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- MethodCall: stmt_import
    |   |               +-- Pop
    |   |               |   L-- Native: print
    |   |               |       +-- String("token")
    |   |               |       L-- GetVar(token)
    |   |               L-- Pop
    |   |                   L-- Native: err
    |   |                       L-- String("stmt")
    |   |       L-- Method: parse_root
    |   |           L-- Block
    |   |               +-- Def: root_list
    |   |               |   L-- List
    |   |               +-- While
    |   |               |   +-- BangEqual
    |   |               |   |   +-- MethodCall: peek
    |   |               |   |   |   L-- Field(lexer)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       +-- Def: node
    |   |               |       |   L-- MethodCall: stmt
    |   |               |       L-- Pop
    |   |               |           L-- Native: append
    |   |               |               +-- GetVar(root_list)
    |   |               |               L-- GetVar(node)
    |   |               L-- Return
    |   |                   L-- Instance: AstRoot
    |   |                       L-- GetVar(root_list)
    |   |       L-- Method: stmt_import
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: Import
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: consume
    |   |               |       +-- Args
    |   |               |       |   L-- MethodCall: LeftBrace
    |   |               |       |       L-- GetVar(Kind)
    |   |               +-- Def: imports
    |   |               |   L-- List
    |   |               +-- Def: token
    |   |               |   L-- MethodCall: next
    |   |               |       L-- Field(lexer)
    |   |               +-- While
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Get(kind)
    |   |               |   |   |   +-- GetVar(token)
    |   |               |   |   L-- MethodCall: RightBrace
    |   |               |   |       L-- GetVar(Kind)
    |   |               |   L-- Block
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- Get(kind)
    |   |               |       |   |   |   +-- GetVar(token)
    |   |               |       |   |   L-- MethodCall: String
    |   |               |       |   |       L-- GetVar(Kind)
    |   |               |       |   L-- Block
    |   |               |       |       +-- Def: buf
    |   |               |       |       |   L-- String("")
    |   |               |       |       +-- Def: split
    |   |               |       |       |   L-- Native: split
    |   |               |       |       |       +-- Field(file)
    |   |               |       |       |       L-- String("/")
    |   |               |       |       +-- Def: i
    |   |               |       |       |   L-- Int(0)
    |   |               |       |       +-- While
    |   |               |       |       |   +-- Less
    |   |               |       |       |   |   +-- GetVar(i)
    |   |               |       |       |   |   L-- Minus
    |   |               |       |       |   |       +-- Native: len
    |   |               |       |       |   |       |   L-- GetVar(split)
    |   |               |       |       |   |       L-- Int(1)
    |   |               |       |       |   L-- Block
    |   |               |       |       |       +-- Reassign: buf
    |   |               |       |       |       |   L-- Plus
    |   |               |       |       |       |       +-- GetVar(buf)
    |   |               |       |       |       |       L-- Plus
    |   |               |       |       |       |           +-- Index
    |   |               |       |       |       |           |   +-- GetVar(split)
    |   |               |       |       |       |           |   L-- GetVar(i)
    |   |               |       |       |       |           L-- String("/")
    |   |               |       |       |       L-- Reassign: i
    |   |               |       |       |           L-- Plus
    |   |               |       |       |               +-- GetVar(i)
    |   |               |       |       |               L-- Int(1)
    |   |               |       |       +-- Reassign: buf
    |   |               |       |       |   L-- Plus
    |   |               |       |       |       +-- GetVar(buf)
    |   |               |       |       |       L-- Index
    |   |               |       |       |           +-- Native: split
    |   |               |       |       |           |   +-- Get(value)
    |   |               |       |       |           |   |   +-- GetVar(token)
    |   |               |       |       |           |   L-- String("\"")
    |   |               |       |       |           L-- Int(0)
    |   |               |       |       L-- Pop
    |   |               |       |           L-- Native: append
    |   |               |       |               +-- GetVar(imports)
    |   |               |       |               L-- GetVar(buf)
    |   |               |       L-- Reassign: token
    |   |               |           L-- MethodCall: next
    |   |               |               L-- Field(lexer)
    |   |               L-- Return
    |   |                   L-- Instance: AstImport
    |   |                       L-- GetVar(imports)
    |   +-- Root
    |   |   L-- Class: AstPrinter
    |   |       +-- Field: indent
    |   |       +-- Field: is_last
    |   |       +-- Method: print_node
    |   |       |   +-- Block
    |   |       |   |   +-- Def: i
    |   |       |   |   |   L-- Int(0)
    |   |       |   |   +-- Def: ind
    |   |       |   |   |   L-- String("")
    |   |       |   |   +-- While
    |   |       |   |   |   +-- Less
    |   |       |   |   |   |   +-- GetVar(i)
    |   |       |   |   |   |   L-- Native: len
    |   |       |   |   |   |       L-- Field(indent)
    |   |       |   |   |   L-- Block
    |   |       |   |   |       +-- Reassign: ind
    |   |       |   |   |       |   L-- Plus
    |   |       |   |   |       |       +-- GetVar(ind)
    |   |       |   |   |       |       L-- Index
    |   |       |   |   |       |           +-- Field(indent)
    |   |       |   |   |       |           L-- GetVar(i)
    |   |       |   |   |       L-- Reassign: i
    |   |       |   |   |           L-- Plus
    |   |       |   |   |               +-- GetVar(i)
    |   |       |   |   |               L-- Int(1)
    |   |       |   |   +-- If
    |   |       |   |   |   +-- Field(is_last)
    |   |       |   |   |   L-- Block
    |   |       |   |   |       L-- Pop
    |   |       |   |   |           L-- Native: print
    |   |       |   |   |               +-- Plus
    |   |       |   |   |               |   +-- GetVar(ind)
    |   |       |   |   |               |   L-- String("L--")
    |   |       |   |   |               L-- GetVar(text)
    |   |       |   |   L-- If
    |   |       |   |       +-- Not
    |   |       |   |       |   L-- Field(is_last)
    |   |       |   |       L-- Block
    |   |       |   |           L-- Pop
    |   |       |   |               L-- Native: print
    |   |       |   |                   +-- Plus
    |   |       |   |                   |   +-- GetVar(ind)
    |   |       |   |                   |   L-- String("+--")
    |   |       |   |                   L-- GetVar(text)
    |   |       L-- Method: add_indent
    |   |           L-- Block
    |   |               +-- If
    |   |               |   +-- Field(is_last)
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- Native: append
    |   |               |               +-- Field(indent)
    |   |               |               L-- String("    ")
    |   |               L-- If
    |   |                   +-- Not
    |   |                   |   L-- Field(is_last)
    |   |                   L-- Block
    |   |                       L-- Pop
    |   |                           L-- Native: append
    |   |                               +-- Field(indent)
    |   |                               L-- String("|   ")
    |   |       L-- Method: pop_indent
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- Native: pop
    |   |                       L-- Field(indent)
    |   |       L-- Method: loop
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- Def: i
    |   |               |   L-- Int(0)
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- Native: len
    |   |               |   |       L-- GetVar(list)
    |   |               |   L-- Block
    |   |               |       +-- SetField(is_last)
    |   |               |           L-- Bool(false)
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- GetVar(i)
    |   |               |       |   |   L-- Minus
    |   |               |       |   |       +-- Native: len
    |   |               |       |   |       |   L-- GetVar(list)
    |   |               |       |   |       L-- Int(1)
    |   |               |       |   L-- Block
    |   |               |       |       L-- SetField(is_last)
    |   |               |       |           L-- Bool(true)
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: accept
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- GetSelf
    |   |               |       |       L-- Index
    |   |               |       |           +-- GetVar(list)
    |   |               |       |           L-- GetVar(i)
    |   |               |       L-- Reassign: i
    |   |               |           L-- Plus
    |   |               |               +-- GetVar(i)
    |   |               |               L-- Int(1)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstRoot
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Root")
    |   |               L-- Pop
    |   |                   L-- MethodCall: loop
    |   |                       +-- Args
    |   |                       |   L-- Get(nodes)
    |   |                       |       L-- GetVar(self)
    |   |       L-- Method: visitAstNeg
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Neg")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstNot
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Not")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstGetSelf
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: print_node
    |   |                       +-- Args
    |   |                       |   L-- String("GetSelf")
    |   |       L-- Method: visitAstFloat
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: print_node
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("Float(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Get(value)
    |   |                       |           |   +-- GetVar(self)
    |   |                       |           L-- String(")")
    |   |       L-- Method: visitAstInt
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: print_node
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("Int(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Get(value)
    |   |                       |           |   +-- GetVar(self)
    |   |                       |           L-- String(")")
    |   |       L-- Method: visitAstString
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: print_node
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("String(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Get(value)
    |   |                       |           |   +-- GetVar(self)
    |   |                       |           L-- String(")")
    |   |       L-- Method: visitAstGetField
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: print_node
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("Field(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Get(value)
    |   |                       |           |   +-- GetVar(self)
    |   |                       |           L-- String(")")
    |   |       L-- Method: visitAstSetField
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- String("SetField(")
    |   |               |       |       L-- Plus
    |   |               |       |           +-- Get(name)
    |   |               |       |           |   +-- GetVar(self)
    |   |               |       |           L-- String(")")
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstList
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("List")
    |   |               L-- Pop
    |   |                   L-- MethodCall: loop
    |   |                       +-- Args
    |   |                       |   L-- Get(items)
    |   |                       |       L-- GetVar(self)
    |   |       L-- Method: visitAstIndex
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Index")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(indexer)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstIndexSet
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("IndexSet")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(indexer)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstBool
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: print_node
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- Plus
    |   |                       |       |   +-- String("Bool(")
    |   |                       |       |   L-- Native: to_string
    |   |                       |       |       L-- Get(value)
    |   |                       |       |           L-- GetVar(self)
    |   |                       |       L-- String(")")
    |   |       L-- Method: visitAstNil
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: print_node
    |   |                       +-- Args
    |   |                       |   L-- String("Nil")
    |   |       L-- Method: visitAstGetVar
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: print_node
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("GetVar(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Get(value)
    |   |                       |           |   +-- GetVar(self)
    |   |                       |           L-- String(")")
    |   |       L-- Method: visitAstDef
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- String("Def: ")
    |   |               |       |       L-- Get(name)
    |   |               |       |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstPlus
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Plus")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstMinus
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Minus")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstClass
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- String("Class: ")
    |   |               |       |       L-- Get(name)
    |   |               |       |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- Def: i
    |   |               |   L-- Int(0)
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- Native: len
    |   |               |   |       L-- Get(fields)
    |   |               |   |           L-- GetVar(self)
    |   |               |   L-- Block
    |   |               |       +-- SetField(is_last)
    |   |               |           L-- And
    |   |               |               +-- EqualEqual
    |   |               |               |   +-- Native: len
    |   |               |               |   |   L-- Get(methods)
    |   |               |               |   |       L-- GetVar(self)
    |   |               |               |   L-- Int(0)
    |   |               |               L-- EqualEqual
    |   |               |                   +-- GetVar(i)
    |   |               |                   L-- Minus
    |   |               |                       +-- Native: len
    |   |               |                       |   L-- Get(fields)
    |   |               |                       |       L-- GetVar(self)
    |   |               |                       L-- Int(1)
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: print_node
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- Plus
    |   |               |       |       |       +-- String("Field: ")
    |   |               |       |       |       L-- Index
    |   |               |       |       |           +-- Get(fields)
    |   |               |       |       |           |   +-- GetVar(self)
    |   |               |       |       |           L-- GetVar(i)
    |   |               |       L-- Reassign: i
    |   |               |           L-- Plus
    |   |               |               +-- GetVar(i)
    |   |               |               L-- Int(1)
    |   |               +-- Reassign: i
    |   |               |   L-- Int(0)
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- Native: len
    |   |               |   |       L-- Get(methods)
    |   |               |   |           L-- GetVar(self)
    |   |               |   L-- Block
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- GetVar(i)
    |   |               |       |   |   L-- Minus
    |   |               |       |   |       +-- Native: len
    |   |               |       |   |       |   L-- Get(methods)
    |   |               |       |   |       |       L-- GetVar(self)
    |   |               |       |   |       L-- Int(1)
    |   |               |       |   L-- Block
    |   |               |       |       L-- SetField(is_last)
    |   |               |       |           L-- Bool(true)
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: print_node
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- Plus
    |   |               |       |       |       +-- String("Method: ")
    |   |               |       |       |       L-- Get(name)
    |   |               |       |       |           L-- Index
    |   |               |       |       |               +-- Get(methods)
    |   |               |       |       |               |   +-- GetVar(self)
    |   |               |       |       |               L-- GetVar(i)
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: add_indent
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: accept
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- GetSelf
    |   |               |       |       L-- Get(block)
    |   |               |       |           L-- Index
    |   |               |       |               +-- Get(methods)
    |   |               |       |               |   +-- GetVar(self)
    |   |               |       |               L-- GetVar(i)
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: pop_indent
    |   |               |       L-- Reassign: i
    |   |               |           L-- Plus
    |   |               |               +-- GetVar(i)
    |   |               |               L-- Int(1)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstBlock
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Block")
    |   |               L-- Pop
    |   |                   L-- MethodCall: loop
    |   |                       +-- Args
    |   |                       |   L-- Get(stmts)
    |   |                       |       L-- GetVar(self)
    |   |       L-- Method: visitAstReassign
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- String("Reassign: ")
    |   |               |       |       L-- Get(name)
    |   |               |       |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstInstance
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- String("Instance: ")
    |   |               |       |       L-- Get(name)
    |   |               |       |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: loop
    |   |                       +-- Args
    |   |                       |   L-- Get(args)
    |   |                       |       L-- GetVar(self)
    |   |       L-- Method: visitAstNative
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- String("Native: ")
    |   |               |       |       L-- Get(name)
    |   |               |       |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: loop
    |   |                       +-- Args
    |   |                       |   L-- Get(args)
    |   |                       |       L-- GetVar(self)
    |   |       L-- Method: visitAstMethod
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- String("MethodCall: ")
    |   |               |       |       L-- Get(name)
    |   |               |       |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- And
    |   |                       +-- EqualEqual
    |   |                       |   +-- Get(lhs)
    |   |                       |   |   +-- GetVar(self)
    |   |                       |   L-- Nil
    |   |                       L-- EqualEqual
    |   |                           +-- Native: len
    |   |                           |   L-- Get(args)
    |   |                           |       L-- GetVar(self)
    |   |                           L-- Int(0)
    |   |               +-- Def: i
    |   |               |   L-- Int(0)
    |   |               +-- If
    |   |               |   +-- Greater
    |   |               |   |   +-- Native: len
    |   |               |   |   |   L-- Get(args)
    |   |               |   |   |       L-- GetVar(self)
    |   |               |   |   L-- Int(0)
    |   |               |   L-- Block
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: print_node
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- String("Args")
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: add_indent
    |   |               |       +-- SetField(is_last)
    |   |               |           L-- EqualEqual
    |   |               |               +-- Get(lhs)
    |   |               |               |   +-- GetVar(self)
    |   |               |               L-- Nil
    |   |               |       +-- While
    |   |               |       |   +-- Less
    |   |               |       |   |   +-- GetVar(i)
    |   |               |       |   |   L-- Native: len
    |   |               |       |   |       L-- Get(args)
    |   |               |       |   |           L-- GetVar(self)
    |   |               |       |   L-- Block
    |   |               |       |       +-- If
    |   |               |       |       |   +-- EqualEqual
    |   |               |       |       |   |   +-- GetVar(i)
    |   |               |       |       |   |   L-- Minus
    |   |               |       |       |   |       +-- Native: len
    |   |               |       |       |   |       |   L-- Get(args)
    |   |               |       |       |   |       |       L-- GetVar(self)
    |   |               |       |       |   |       L-- Int(1)
    |   |               |       |       |   L-- Block
    |   |               |       |       |       L-- SetField(is_last)
    |   |               |       |       |           L-- Bool(true)
    |   |               |       |       +-- Pop
    |   |               |       |       |   L-- MethodCall: accept
    |   |               |       |       |       +-- Args
    |   |               |       |       |       |   L-- GetSelf
    |   |               |       |       |       L-- Index
    |   |               |       |       |           +-- Get(args)
    |   |               |       |       |           |   +-- GetVar(self)
    |   |               |       |       |           L-- GetVar(i)
    |   |               |       |       L-- Reassign: i
    |   |               |       |           L-- Plus
    |   |               |       |               +-- GetVar(i)
    |   |               |       |               L-- Int(1)
    |   |               |       L-- Pop
    |   |               |           L-- MethodCall: pop_indent
    |   |               +-- If
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Get(lhs)
    |   |               |   |   |   +-- GetVar(self)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       +-- SetField(is_last)
    |   |               |           L-- Bool(true)
    |   |               |       L-- Pop
    |   |               |           L-- MethodCall: accept
    |   |               |               +-- Args
    |   |               |               |   L-- GetSelf
    |   |               |               L-- Get(lhs)
    |   |               |                   L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstPop
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Pop")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstEqualEqual
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("EqualEqual")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstIf
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("If")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(condition)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(block)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstReturn
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Return")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstWhile
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("While")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(condition)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(block)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstOr
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Or")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstAnd
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("And")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstBangEqual
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("BangEqual")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstGreater
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Greater")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstGreaterEqual
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("GreaterEqual")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstLess
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("Less")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstLessEqual
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- String("LessEqual")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstGet
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- String("Get(")
    |   |               |       |       L-- Plus
    |   |               |       |           +-- Get(field)
    |   |               |       |           |   +-- GetVar(self)
    |   |               |       |           L-- String(")")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   |       L-- Method: visitAstSet
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: print_node
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- String("Set(")
    |   |               |       |       L-- Plus
    |   |               |       |           +-- Get(field)
    |   |               |       |           |   +-- GetVar(self)
    |   |               |       |           L-- String(")")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: add_indent
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(false)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- SetField(is_last)
    |   |                   L-- Bool(true)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: pop_indent
    |   +-- Root
    |   |   +-- Class: Local
    |   |   |   +-- Field: name
    |   |   |   +-- Field: depth
    |   |   |   L-- Field: stack_pos
    |   |   +-- Class: CompilerClass
    |   |   |   +-- Field: name
    |   |   |   +-- Field: fields
    |   |   |   L-- Field: methods
    |   |   +-- Class: CompilerMethod
    |   |   |   +-- Field: name
    |   |   |   L-- Field: code_start
    |   |   L-- Class: Compiler
    |   |       +-- Field: code
    |   |       +-- Field: strings
    |   |       +-- Field: variables
    |   |       +-- Field: depth
    |   |       +-- Field: classes
    |   |       +-- Field: current_fields
    |   |       +-- Field: current_class_name
    |   |       +-- Method: init
    |   |       |   +-- Block
    |   |       |   |   +-- Pop
    |   |       |   |   |   L-- Native: print
    |   |       |   |   |       L-- String("init compiler")
    |   |       |   |   +-- SetField(code)
    |   |       |   |       L-- List
    |   |       |   |   +-- SetField(strings)
    |   |       |   |       L-- List
    |   |       |   |   +-- SetField(variables)
    |   |       |   |       L-- List
    |   |       |   |           L-- List
    |   |       |   |   +-- SetField(depth)
    |   |       |   |       L-- Int(0)
    |   |       |   |   +-- SetField(classes)
    |   |       |   |       L-- List
    |   |       |   |   +-- SetField(current_fields)
    |   |       |   |       L-- Nil
    |   |       |   |   L-- SetField(current_class_name)
    |   |       |   |       L-- Nil
    |   |       L-- Method: find_class
    |   |           L-- Block
    |   |               +-- Def: i
    |   |               |   L-- Int(0)
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- Native: len
    |   |               |   |       L-- Field(classes)
    |   |               |   L-- Block
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- GetVar(name)
    |   |               |       |   |   L-- Get(name)
    |   |               |       |   |       L-- Index
    |   |               |       |   |           +-- Field(classes)
    |   |               |       |   |           L-- GetVar(i)
    |   |               |       |   L-- Block
    |   |               |       |       L-- Return
    |   |               |       |           L-- Index
    |   |               |       |               +-- Field(classes)
    |   |               |       |               L-- GetVar(i)
    |   |               |       L-- Reassign: i
    |   |               |           L-- Plus
    |   |               |               +-- GetVar(i)
    |   |               |               L-- Int(1)
    |   |               L-- Return
    |   |                   L-- Nil
    |   |       L-- Method: push_code
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- Native: append
    |   |                       +-- Field(code)
    |   |                       L-- GetVar(code)
    |   |       L-- Method: begin_method
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- Native: append
    |   |               |       +-- Field(variables)
    |   |               |       L-- List
    |   |               L-- SetField(depth)
    |   |                   L-- Plus
    |   |                       +-- Field(depth)
    |   |                       L-- Int(1)
    |   |       L-- Method: end_method
    |   |           L-- Block
    |   |               +-- Def: w
    |   |               |   L-- Native: pop
    |   |               |       L-- Field(variables)
    |   |               L-- SetField(depth)
    |   |                   L-- Minus
    |   |                       +-- Field(depth)
    |   |                       L-- Int(1)
    |   |       L-- Method: begin_scope
    |   |           L-- Block
    |   |               L-- SetField(depth)
    |   |                   L-- Plus
    |   |                       +-- Field(depth)
    |   |                       L-- Int(1)
    |   |       L-- Method: end_scope
    |   |           L-- Block
    |   |               +-- Def: last_vars
    |   |               |   L-- Native: pop
    |   |               |       L-- Field(variables)
    |   |               +-- Def: len
    |   |               |   L-- Native: len
    |   |               |       L-- GetVar(last_vars)
    |   |               +-- Def: i
    |   |               |   L-- Int(0)
    |   |               +-- Def: new_vars
    |   |               |   L-- List
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- GetVar(len)
    |   |               |   L-- Block
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- Get(depth)
    |   |               |       |   |   |   +-- Index
    |   |               |       |   |   |   |   +-- GetVar(last_vars)
    |   |               |       |   |   |   |   L-- GetVar(i)
    |   |               |       |   |   L-- Field(depth)
    |   |               |       |   L-- Block
    |   |               |       |       L-- Pop
    |   |               |       |           L-- MethodCall: push_code
    |   |               |       |               +-- Args
    |   |               |       |               |   L-- String("Pop")
    |   |               |       +-- If
    |   |               |       |   +-- BangEqual
    |   |               |       |   |   +-- Get(depth)
    |   |               |       |   |   |   +-- Index
    |   |               |       |   |   |   |   +-- GetVar(last_vars)
    |   |               |       |   |   |   |   L-- GetVar(i)
    |   |               |       |   |   L-- Field(depth)
    |   |               |       |   L-- Block
    |   |               |       |       L-- Pop
    |   |               |       |           L-- Native: append
    |   |               |       |               +-- GetVar(new_vars)
    |   |               |       |               L-- Index
    |   |               |       |                   +-- GetVar(last_vars)
    |   |               |       |                   L-- GetVar(i)
    |   |               |       L-- Reassign: i
    |   |               |           L-- Plus
    |   |               |               +-- GetVar(i)
    |   |               |               L-- Int(1)
    |   |               +-- SetField(depth)
    |   |                   L-- Minus
    |   |                       +-- Field(depth)
    |   |                       L-- Int(1)
    |   |               L-- Pop
    |   |                   L-- Native: append
    |   |                       +-- Field(variables)
    |   |                       L-- GetVar(new_vars)
    |   |       L-- Method: add_local
    |   |           L-- Block
    |   |               +-- Def: ll
    |   |               |   L-- Minus
    |   |               |       +-- Native: len
    |   |               |       |   L-- Field(variables)
    |   |               |       L-- Int(1)
    |   |               +-- Def: vars
    |   |               |   L-- Index
    |   |               |       +-- Field(variables)
    |   |               |       L-- Minus
    |   |               |           +-- Native: len
    |   |               |           |   L-- Field(variables)
    |   |               |           L-- Int(1)
    |   |               +-- Def: i
    |   |               |   L-- Int(0)
    |   |               +-- Def: res
    |   |               |   L-- Nil
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- Native: len
    |   |               |   |       L-- GetVar(vars)
    |   |               |   L-- Block
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- Get(name)
    |   |               |       |   |   |   +-- Index
    |   |               |       |   |   |   |   +-- GetVar(vars)
    |   |               |       |   |   |   |   L-- GetVar(i)
    |   |               |       |   |   L-- GetVar(name)
    |   |               |       |   L-- Block
    |   |               |       |       L-- Pop
    |   |               |       |           L-- Native: err
    |   |               |       |               L-- Plus
    |   |               |       |                   +-- Plus
    |   |               |       |                   |   +-- String("var with name: ")
    |   |               |       |                   |   L-- GetVar(name)
    |   |               |       |                   L-- String(" already exists")
    |   |               |       L-- Reassign: i
    |   |               |           L-- Plus
    |   |               |               +-- GetVar(i)
    |   |               |               L-- Int(1)
    |   |               +-- Pop
    |   |               |   L-- Native: print
    |   |               |       L-- String("the wierd ll thing probably should not be here")
    |   |               L-- Pop
    |   |                   L-- Native: append
    |   |                       +-- GetVar(vars)
    |   |                       L-- Instance: Local
    |   |                           +-- GetVar(name)
    |   |                           +-- Field(depth)
    |   |                           L-- Plus
    |   |                               +-- Native: len
    |   |                               |   L-- GetVar(vars)
    |   |                               L-- GetVar(ll)
    |   |       L-- Method: get_local
    |   |           L-- Block
    |   |               +-- Def: vars
    |   |               |   L-- Index
    |   |               |       +-- Field(variables)
    |   |               |       L-- Minus
    |   |               |           +-- Native: len
    |   |               |           |   L-- Field(variables)
    |   |               |           L-- Int(1)
    |   |               +-- Def: i
    |   |               |   L-- Int(0)
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- Native: len
    |   |               |   |       L-- GetVar(vars)
    |   |               |   L-- Block
    |   |               |       +-- If
    |   |               |       |   +-- EqualEqual
    |   |               |       |   |   +-- Get(name)
    |   |               |       |   |   |   +-- Index
    |   |               |       |   |   |   |   +-- GetVar(vars)
    |   |               |       |   |   |   |   L-- GetVar(i)
    |   |               |       |   |   L-- GetVar(name)
    |   |               |       |   L-- Block
    |   |               |       |       L-- Return
    |   |               |       |           L-- Get(stack_pos)
    |   |               |       |               L-- Index
    |   |               |       |                   +-- GetVar(vars)
    |   |               |       |                   L-- GetVar(i)
    |   |               |       L-- Reassign: i
    |   |               |           L-- Plus
    |   |               |               +-- GetVar(i)
    |   |               |               L-- Int(1)
    |   |               L-- Return
    |   |                   L-- Nil
    |   |       L-- Method: compile_list
    |   |           L-- Block
    |   |               +-- Def: i
    |   |               |   L-- Int(0)
    |   |               L-- While
    |   |                   L-- Less
    |   |                       +-- GetVar(i)
    |   |                       L-- Native: len
    |   |                           L-- GetVar(items)
    |   |                   L-- Block
    |   |                       +-- Pop
    |   |                       |   L-- MethodCall: accept
    |   |                       |       +-- Args
    |   |                       |       |   L-- GetSelf
    |   |                       |       L-- Index
    |   |                       |           +-- GetVar(items)
    |   |                       |           L-- GetVar(i)
    |   |                       L-- Reassign: i
    |   |                           L-- Plus
    |   |                               +-- GetVar(i)
    |   |                               L-- Int(1)
    |   |       L-- Method: native
    |   |           L-- Block
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("print")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(0)
    |   |               |               L-- Int(1)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("to_string")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(1)
    |   |               |               L-- Int(1)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("read_file")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(2)
    |   |               |               L-- Int(1)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("len")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(3)
    |   |               |               L-- Int(1)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("err")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(4)
    |   |               |               L-- Int(1)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("append")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(5)
    |   |               |               L-- Int(2)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("pop")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(6)
    |   |               |               L-- Int(1)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("compile")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(7)
    |   |               |               L-- Int(2)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("args")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(8)
    |   |               |               L-- Int(1)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(name)
    |   |               |   |   L-- String("split")
    |   |               |   L-- Block
    |   |               |       L-- Return
    |   |               |           L-- List
    |   |               |               +-- Int(9)
    |   |               |               L-- Int(2)
    |   |               L-- Pop
    |   |                   L-- Native: err
    |   |                       L-- Plus
    |   |                           +-- String("no native function with name: ")
    |   |                           L-- GetVar(name)
    |   |       L-- Method: visitAstRoot
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: begin_scope
    |   |               +-- Pop
    |   |               |   L-- MethodCall: compile_list
    |   |               |       +-- Args
    |   |               |       |   L-- Get(nodes)
    |   |               |       |       L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: end_scope
    |   |       L-- Method: visitAstNeg
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Neg")
    |   |       L-- Method: visitAstNot
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Not")
    |   |       L-- Method: visitAstFloat
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- Plus
    |   |                       |       |   +-- String("PushFloat(")
    |   |                       |       |   L-- Native: to_string
    |   |                       |       |       L-- Get(value)
    |   |                       |       |           L-- GetVar(self)
    |   |                       |       L-- String(")")
    |   |       L-- Method: visitAstInt
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- Plus
    |   |                       |       |   +-- String("PushInt(")
    |   |                       |       |   L-- Native: to_string
    |   |                       |       |       L-- Get(value)
    |   |                       |       |           L-- GetVar(self)
    |   |                       |       L-- String(")")
    |   |       L-- Method: visitAstString
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: push_code
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- Plus
    |   |               |       |       |   +-- String("PushString(")
    |   |               |       |       |   L-- Native: to_string
    |   |               |       |       |       L-- Native: len
    |   |               |       |       |           L-- Field(strings)
    |   |               |       |       L-- String(")")
    |   |               L-- Pop
    |   |                   L-- Native: append
    |   |                       +-- Field(strings)
    |   |                       L-- Get(value)
    |   |                           L-- GetVar(self)
    |   |       L-- Method: visitAstGetField
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("GetField(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Get(value)
    |   |                       |           |   +-- GetVar(self)
    |   |                       |           L-- String(")")
    |   |       L-- Method: visitAstSetField
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("SetField(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Get(name)
    |   |                       |           |   +-- GetVar(self)
    |   |                       |           L-- String(")")
    |   |       L-- Method: visitAstList
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: compile_list
    |   |               |       +-- Args
    |   |               |       |   L-- Get(items)
    |   |               |       |       L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- Plus
    |   |                       |       |   +-- String("List(")
    |   |                       |       |   L-- Native: to_string
    |   |                       |       |       L-- Native: len
    |   |                       |       |           L-- Get(items)
    |   |                       |       |               L-- GetVar(self)
    |   |                       |       L-- String(")")
    |   |       L-- Method: visitAstIndex
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(indexer)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("IndexGet")
    |   |       L-- Method: visitAstIndexSet
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(indexer)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("IndexSet")
    |   |       L-- Method: visitAstBool
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- Plus
    |   |                       |       |   +-- String("PushBool(")
    |   |                       |       |   L-- Native: to_string
    |   |                       |       |       L-- Get(value)
    |   |                       |       |           L-- GetVar(self)
    |   |                       |       L-- String(")")
    |   |       L-- Method: visitAstNil
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("PushNil")
    |   |       L-- Method: visitAstGetVar
    |   |           L-- Block
    |   |               +-- Def: local
    |   |               |   L-- MethodCall: get_local
    |   |               |       +-- Args
    |   |               |       |   L-- Get(value)
    |   |               |       |       L-- GetVar(self)
    |   |               +-- If
    |   |               |   +-- BangEqual
    |   |               |   |   +-- GetVar(local)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- MethodCall: push_code
    |   |               |               +-- Args
    |   |               |               |   L-- Plus
    |   |               |               |       +-- Plus
    |   |               |               |       |   +-- String("GetLocal(")
    |   |               |               |       |   L-- Native: to_string
    |   |               |               |       |       L-- GetVar(local)
    |   |               |               |       L-- String(")")
    |   |               L-- If
    |   |                   +-- EqualEqual
    |   |                   |   +-- GetVar(local)
    |   |                   |   L-- Nil
    |   |                   L-- Block
    |   |                       +-- Def: klass
    |   |                       |   L-- MethodCall: find_class
    |   |                       |       +-- Args
    |   |                       |       |   L-- Get(value)
    |   |                       |       |       L-- GetVar(self)
    |   |                       +-- If
    |   |                       |   +-- EqualEqual
    |   |                       |   |   +-- GetVar(klass)
    |   |                       |   |   L-- Nil
    |   |                       |   L-- Block
    |   |                       |       L-- Pop
    |   |                       |           L-- Native: err
    |   |                       |               L-- String("class should not be nil")
    |   |                       +-- If
    |   |                       |   +-- BangEqual
    |   |                       |   |   +-- Native: len
    |   |                       |   |   |   L-- Get(fields)
    |   |                       |   |   |       L-- GetVar(klass)
    |   |                       |   |   L-- Int(0)
    |   |                       |   L-- Block
    |   |                       |       L-- Pop
    |   |                       |           L-- Native: err
    |   |                       |               L-- String("trying to call class without arguments? todo?")
    |   |                       +-- Def: method_names
    |   |                       |   L-- List
    |   |                       +-- Def: method_starts
    |   |                       |   L-- List
    |   |                       +-- Def: i
    |   |                       |   L-- Int(0)
    |   |                       +-- While
    |   |                       |   +-- Less
    |   |                       |   |   +-- GetVar(i)
    |   |                       |   |   L-- Native: len
    |   |                       |   |       L-- Get(methods)
    |   |                       |   |           L-- GetVar(klass)
    |   |                       |   L-- Block
    |   |                       |       +-- Pop
    |   |                       |       |   L-- Native: append
    |   |                       |       |       +-- GetVar(method_names)
    |   |                       |       |       L-- Get(name)
    |   |                       |       |           L-- Index
    |   |                       |       |               +-- Get(methods)
    |   |                       |       |               |   +-- GetVar(klass)
    |   |                       |       |               L-- GetVar(i)
    |   |                       |       +-- Pop
    |   |                       |       |   L-- Native: append
    |   |                       |       |       +-- GetVar(method_starts)
    |   |                       |       |       L-- Get(code_start)
    |   |                       |       |           L-- Index
    |   |                       |       |               +-- Get(methods)
    |   |                       |       |               |   +-- GetVar(klass)
    |   |                       |       |               L-- GetVar(i)
    |   |                       |       L-- Reassign: i
    |   |                       |           L-- Plus
    |   |                       |               +-- GetVar(i)
    |   |                       |               L-- Int(1)
    |   |                       L-- Pop
    |   |                           L-- MethodCall: push_code
    |   |                               +-- Args
    |   |                               |   L-- Plus
    |   |                               |       +-- Plus
    |   |                               |       |   +-- Plus
    |   |                               |       |   |   +-- Plus
    |   |                               |       |   |   |   +-- String("Instance([], ")
    |   |                               |       |   |   |   L-- Native: to_string
    |   |                               |       |   |   |       L-- GetVar(method_names)
    |   |                               |       |   |   L-- String(", ")
    |   |                               |       |   L-- Native: to_string
    |   |                               |       |       L-- GetVar(method_starts)
    |   |                               |       L-- String(")")
    |   |       L-- Method: visitAstGetSelf
    |   |           L-- Block
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("PushSelf")
    |   |       L-- Method: visitAstDef
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: add_local
    |   |                       +-- Args
    |   |                       |   L-- Get(name)
    |   |                       |       L-- GetVar(self)
    |   |       L-- Method: visitAstPlus
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Plus")
    |   |       L-- Method: visitAstMinus
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Minus")
    |   |       L-- Method: visitAstClass
    |   |           L-- Block
    |   |               +-- SetField(current_class_name)
    |   |                   L-- Get(name)
    |   |                       L-- GetVar(self)
    |   |               +-- SetField(current_fields)
    |   |                   L-- Get(fields)
    |   |                       L-- GetVar(self)
    |   |               +-- Def: jump
    |   |               |   L-- Native: len
    |   |               |       L-- Field(code)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: push_code
    |   |               |       +-- Args
    |   |               |       |   L-- String("Jump()")
    |   |               +-- If
    |   |               |   +-- BangEqual
    |   |               |   |   +-- MethodCall: find_class
    |   |               |   |   |   +-- Args
    |   |               |   |   |   |   L-- Get(name)
    |   |               |   |   |   |       L-- GetVar(self)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- Native: err
    |   |               |               L-- Plus
    |   |               |                   +-- String("Class '")
    |   |               |                   L-- Plus
    |   |               |                       +-- Get(name)
    |   |               |                       |   +-- GetVar(self)
    |   |               |                       L-- String("' is already defined")
    |   |               +-- Def: methods
    |   |               |   L-- List
    |   |               +-- Def: i
    |   |               |   L-- Int(0)
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- Native: len
    |   |               |   |       L-- Get(methods)
    |   |               |   |           L-- GetVar(self)
    |   |               |   L-- Block
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: begin_method
    |   |               |       +-- Def: method
    |   |               |       |   L-- Index
    |   |               |       |       +-- Get(methods)
    |   |               |       |       |   +-- GetVar(self)
    |   |               |       |       L-- GetVar(i)
    |   |               |       +-- Def: j
    |   |               |       |   L-- Int(0)
    |   |               |       +-- While
    |   |               |       |   +-- Less
    |   |               |       |   |   +-- GetVar(j)
    |   |               |       |   |   L-- Native: len
    |   |               |       |   |       L-- Get(params)
    |   |               |       |   |           L-- GetVar(method)
    |   |               |       |   L-- Block
    |   |               |       |       +-- Pop
    |   |               |       |       |   L-- MethodCall: add_local
    |   |               |       |       |       +-- Args
    |   |               |       |       |       |   L-- Index
    |   |               |       |       |       |       +-- Get(params)
    |   |               |       |       |       |       |   +-- GetVar(method)
    |   |               |       |       |       |       L-- GetVar(j)
    |   |               |       |       L-- Reassign: j
    |   |               |       |           L-- Plus
    |   |               |       |               +-- GetVar(j)
    |   |               |       |               L-- Int(1)
    |   |               |       +-- Def: code_start
    |   |               |       |   L-- Native: len
    |   |               |       |       L-- Field(code)
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: accept
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- GetSelf
    |   |               |       |       L-- Get(block)
    |   |               |       |           L-- GetVar(method)
    |   |               |       +-- Def: cm
    |   |               |       |   L-- Instance: CompilerMethod
    |   |               |       |       +-- Get(name)
    |   |               |       |       |   +-- GetVar(method)
    |   |               |       |       L-- GetVar(code_start)
    |   |               |       +-- Pop
    |   |               |       |   L-- Native: append
    |   |               |       |       +-- GetVar(methods)
    |   |               |       |       L-- GetVar(cm)
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: push_code
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- String("PushNil")
    |   |               |       +-- Pop
    |   |               |       |   L-- MethodCall: push_code
    |   |               |       |       +-- Args
    |   |               |       |       |   L-- String("Return")
    |   |               |       +-- Reassign: i
    |   |               |       |   L-- Plus
    |   |               |       |       +-- GetVar(i)
    |   |               |       |       L-- Int(1)
    |   |               |       L-- Pop
    |   |               |           L-- MethodCall: end_method
    |   |               +-- Def: end
    |   |               |   L-- Native: len
    |   |               |       L-- Field(code)
    |   |               +-- IndexSet
    |   |               |   +-- Field(code)
    |   |               |   +-- GetVar(jump)
    |   |               |   L-- Plus
    |   |               |       +-- Plus
    |   |               |       |   +-- String("Jump(")
    |   |               |       |   L-- Native: to_string
    |   |               |       |       L-- GetVar(end)
    |   |               |       L-- String(")")
    |   |               +-- SetField(current_class_name)
    |   |                   L-- Nil
    |   |               +-- SetField(current_fields)
    |   |                   L-- Nil
    |   |               +-- Def: klass
    |   |               |   L-- Instance: CompilerClass
    |   |               |       +-- Get(name)
    |   |               |       |   +-- GetVar(self)
    |   |               |       +-- Get(fields)
    |   |               |       |   +-- GetVar(self)
    |   |               |       L-- GetVar(methods)
    |   |               L-- Pop
    |   |                   L-- Native: append
    |   |                       +-- Field(classes)
    |   |                       L-- GetVar(klass)
    |   |       L-- Method: visitAstBlock
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: begin_scope
    |   |               +-- Pop
    |   |               |   L-- MethodCall: compile_list
    |   |               |       +-- Args
    |   |               |       |   L-- Get(stmts)
    |   |               |       |       L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: end_scope
    |   |       L-- Method: visitAstReassign
    |   |           L-- Block
    |   |               +-- Def: local
    |   |               |   L-- MethodCall: get_local
    |   |               |       +-- Args
    |   |               |       |   L-- Get(name)
    |   |               |       |       L-- GetVar(self)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(local)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- Native: err
    |   |               |               L-- Plus
    |   |               |                   +-- String("Could not find variable: ")
    |   |               |                   L-- Get(name)
    |   |               |                       L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- Plus
    |   |                       |       |   +-- String("SetLocal(")
    |   |                       |       |   L-- Native: to_string
    |   |                       |       |       L-- GetVar(local)
    |   |                       |       L-- String(")")
    |   |       L-- Method: visitAstInstance
    |   |           L-- Block
    |   |               +-- Def: klass
    |   |               |   L-- MethodCall: find_class
    |   |               |       +-- Args
    |   |               |       |   L-- Get(name)
    |   |               |       |       L-- GetVar(self)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- GetVar(klass)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- Native: err
    |   |               |               L-- Plus
    |   |               |                   +-- String("Could not find class: ")
    |   |               |                   L-- Get(name)
    |   |               |                       L-- GetVar(self)
    |   |               +-- If
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Native: len
    |   |               |   |   |   L-- Get(fields)
    |   |               |   |   |       L-- GetVar(klass)
    |   |               |   |   L-- Native: len
    |   |               |   |       L-- Get(args)
    |   |               |   |           L-- GetVar(self)
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- Native: err
    |   |               |               L-- String("Arity does not match")
    |   |               +-- Def: fields_rev
    |   |               |   L-- List
    |   |               +-- Def: i
    |   |               |   L-- Minus
    |   |               |       +-- Native: len
    |   |               |       |   L-- Get(fields)
    |   |               |       |       L-- GetVar(klass)
    |   |               |       L-- Int(1)
    |   |               +-- While
    |   |               |   +-- GreaterEqual
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- Int(0)
    |   |               |   L-- Block
    |   |               |       +-- Pop
    |   |               |       |   L-- Native: append
    |   |               |       |       +-- GetVar(fields_rev)
    |   |               |       |       L-- Index
    |   |               |       |           +-- Get(fields)
    |   |               |       |           |   +-- GetVar(klass)
    |   |               |       |           L-- GetVar(i)
    |   |               |       L-- Reassign: i
    |   |               |           L-- Minus
    |   |               |               +-- GetVar(i)
    |   |               |               L-- Int(1)
    |   |               +-- Def: names
    |   |               |   L-- List
    |   |               +-- Def: starts
    |   |               |   L-- List
    |   |               +-- Reassign: i
    |   |               |   L-- Int(0)
    |   |               +-- While
    |   |               |   +-- Less
    |   |               |   |   +-- GetVar(i)
    |   |               |   |   L-- Native: len
    |   |               |   |       L-- Get(methods)
    |   |               |   |           L-- GetVar(klass)
    |   |               |   L-- Block
    |   |               |       +-- Pop
    |   |               |       |   L-- Native: append
    |   |               |       |       +-- GetVar(names)
    |   |               |       |       L-- Get(name)
    |   |               |       |           L-- Index
    |   |               |       |               +-- Get(methods)
    |   |               |       |               |   +-- GetVar(klass)
    |   |               |       |               L-- GetVar(i)
    |   |               |       +-- Pop
    |   |               |       |   L-- Native: append
    |   |               |       |       +-- GetVar(starts)
    |   |               |       |       L-- Get(code_start)
    |   |               |       |           L-- Index
    |   |               |       |               +-- Get(methods)
    |   |               |       |               |   +-- GetVar(klass)
    |   |               |       |               L-- GetVar(i)
    |   |               |       L-- Reassign: i
    |   |               |           L-- Plus
    |   |               |               +-- GetVar(i)
    |   |               |               L-- Int(1)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: compile_list
    |   |               |       +-- Args
    |   |               |       |   L-- Get(args)
    |   |               |       |       L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- Plus
    |   |                       |       |   +-- Plus
    |   |                       |       |   |   +-- Plus
    |   |                       |       |   |   |   +-- Plus
    |   |                       |       |   |   |   |   +-- Plus
    |   |                       |       |   |   |   |   |   +-- String("Instance(")
    |   |                       |       |   |   |   |   |   L-- Native: to_string
    |   |                       |       |   |   |   |   |       L-- GetVar(fields_rev)
    |   |                       |       |   |   |   |   L-- String(", ")
    |   |                       |       |   |   |   L-- Native: to_string
    |   |                       |       |   |   |       L-- GetVar(names)
    |   |                       |       |   |   L-- String(", ")
    |   |                       |       |   L-- Native: to_string
    |   |                       |       |       L-- GetVar(starts)
    |   |                       |       L-- String(")")
    |   |       L-- Method: visitAstNative
    |   |           L-- Block
    |   |               +-- Def: fn_info
    |   |               |   L-- MethodCall: native
    |   |               |       +-- Args
    |   |               |       |   L-- Get(name)
    |   |               |       |       L-- GetVar(self)
    |   |               +-- If
    |   |               |   +-- And
    |   |               |   |   +-- BangEqual
    |   |               |   |   |   +-- Get(name)
    |   |               |   |   |   |   +-- GetVar(self)
    |   |               |   |   |   L-- String("print")
    |   |               |   |   L-- BangEqual
    |   |               |   |       +-- Native: len
    |   |               |   |       |   L-- Get(args)
    |   |               |   |       |       L-- GetVar(self)
    |   |               |   |       L-- Index
    |   |               |   |           +-- GetVar(fn_info)
    |   |               |   |           L-- Int(1)
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- Native: err
    |   |               |               L-- String("arity does not match")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: compile_list
    |   |               |       +-- Args
    |   |               |       |   L-- Get(args)
    |   |               |       |       L-- GetVar(self)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(name)
    |   |               |   |   |   +-- GetVar(self)
    |   |               |   |   L-- String("print")
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- MethodCall: push_code
    |   |               |               +-- Args
    |   |               |               |   L-- Plus
    |   |               |               |       +-- Plus
    |   |               |               |       |   +-- String("Print(")
    |   |               |               |       |   L-- Native: to_string
    |   |               |               |       |       L-- Native: len
    |   |               |               |       |           L-- Get(args)
    |   |               |               |       |               L-- GetVar(self)
    |   |               |               |       L-- String(")")
    |   |               L-- If
    |   |                   +-- BangEqual
    |   |                   |   +-- Get(name)
    |   |                   |   |   +-- GetVar(self)
    |   |                   |   L-- String("print")
    |   |                   L-- Block
    |   |                       L-- Pop
    |   |                           L-- MethodCall: push_code
    |   |                               +-- Args
    |   |                               |   L-- Plus
    |   |                               |       +-- Plus
    |   |                               |       |   +-- String("Native(")
    |   |                               |       |   L-- Native: to_string
    |   |                               |       |       L-- Index
    |   |                               |       |           +-- GetVar(fn_info)
    |   |                               |       |           L-- Int(0)
    |   |                               |       L-- String(")")
    |   |       L-- Method: visitAstMethod
    |   |           L-- Block
    |   |               +-- If
    |   |               |   +-- BangEqual
    |   |               |   |   +-- Get(lhs)
    |   |               |   |   |   +-- GetVar(self)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- MethodCall: accept
    |   |               |               +-- Args
    |   |               |               |   L-- GetSelf
    |   |               |               L-- Get(lhs)
    |   |               |                   L-- GetVar(self)
    |   |               +-- If
    |   |               |   +-- EqualEqual
    |   |               |   |   +-- Get(lhs)
    |   |               |   |   |   +-- GetVar(self)
    |   |               |   |   L-- Nil
    |   |               |   L-- Block
    |   |               |       L-- Pop
    |   |               |           L-- MethodCall: push_code
    |   |               |               +-- Args
    |   |               |               |   L-- String("PushSelf")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: compile_list
    |   |               |       +-- Args
    |   |               |       |   L-- Get(args)
    |   |               |       |       L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("Call(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Plus
    |   |                       |           |   +-- Plus
    |   |                       |           |   |   +-- Get(name)
    |   |                       |           |   |   |   +-- GetVar(self)
    |   |                       |           |   |   L-- String(", ")
    |   |                       |           |   L-- Native: to_string
    |   |                       |           |       L-- Plus
    |   |                       |           |           +-- Native: len
    |   |                       |           |           |   L-- Get(args)
    |   |                       |           |           |       L-- GetVar(self)
    |   |                       |           |           L-- Int(1)
    |   |                       |           L-- String(")")
    |   |       L-- Method: visitAstPop
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Pop")
    |   |       L-- Method: visitAstEqualEqual
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Equals")
    |   |       L-- Method: visitAstIf
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(condition)
    |   |               |           L-- GetVar(self)
    |   |               +-- Def: skip_jump
    |   |               |   L-- Native: len
    |   |               |       L-- Field(code)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: push_code
    |   |               |       +-- Args
    |   |               |       |   L-- String("TEMP")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(block)
    |   |               |           L-- GetVar(self)
    |   |               +-- Def: end
    |   |               |   L-- Native: len
    |   |               |       L-- Field(code)
    |   |               L-- IndexSet
    |   |                   +-- Field(code)
    |   |                   +-- GetVar(skip_jump)
    |   |                   L-- Plus
    |   |                       +-- Plus
    |   |                       |   +-- String("JumpIfFalse(")
    |   |                       |   L-- Native: to_string
    |   |                       |       L-- GetVar(end)
    |   |                       L-- String(")")
    |   |       L-- Method: visitAstReturn
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(expr)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Return")
    |   |       L-- Method: visitAstWhile
    |   |           L-- Block
    |   |               +-- Def: loop_start
    |   |               |   L-- Native: len
    |   |               |       L-- Field(code)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(condition)
    |   |               |           L-- GetVar(self)
    |   |               +-- Def: exit_jump
    |   |               |   L-- Native: len
    |   |               |       L-- Field(code)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: push_code
    |   |               |       +-- Args
    |   |               |       |   L-- String("JumpIfFalse()")
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(block)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: push_code
    |   |               |       +-- Args
    |   |               |       |   L-- Plus
    |   |               |       |       +-- Plus
    |   |               |       |       |   +-- String("Jump(")
    |   |               |       |       |   L-- Native: to_string
    |   |               |       |       |       L-- GetVar(loop_start)
    |   |               |       |       L-- String(")")
    |   |               L-- IndexSet
    |   |                   +-- Field(code)
    |   |                   +-- GetVar(exit_jump)
    |   |                   L-- Plus
    |   |                       +-- Plus
    |   |                       |   +-- String("JumpIfFalse(")
    |   |                       |   L-- Native: to_string
    |   |                       |       L-- Native: len
    |   |                       |           L-- Field(code)
    |   |                       L-- String(")")
    |   |       L-- Method: visitAstOr
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Or")
    |   |       L-- Method: visitAstAnd
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("And")
    |   |       L-- Method: visitAstBangEqual
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("NotEquals")
    |   |       L-- Method: visitAstGreater
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Greater")
    |   |       L-- Method: visitAstGreaterEqual
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("GreaterEqual")
    |   |       L-- Method: visitAstLess
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("Less")
    |   |       L-- Method: visitAstLessEqual
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- String("LessEqual")
    |   |       L-- Method: visitAstGet
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("Get(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Get(field)
    |   |                       |           |   +-- GetVar(self)
    |   |                       |           L-- String(")")
    |   |       L-- Method: visitAstSet
    |   |           L-- Block
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(lhs)
    |   |               |           L-- GetVar(self)
    |   |               +-- Pop
    |   |               |   L-- MethodCall: accept
    |   |               |       +-- Args
    |   |               |       |   L-- GetSelf
    |   |               |       L-- Get(rhs)
    |   |               |           L-- GetVar(self)
    |   |               L-- Pop
    |   |                   L-- MethodCall: push_code
    |   |                       +-- Args
    |   |                       |   L-- Plus
    |   |                       |       +-- String("Set(")
    |   |                       |       L-- Plus
    |   |                       |           +-- Get(field)
    |   |                       |           |   +-- GetVar(self)
    |   |                       |           L-- String(")")
    |   L-- Root
    |       L-- Class: ImportResolver
    |           L-- Method: visitAstRoot
    |               L-- Block
    |                   +-- Def: i
    |                   |   L-- Int(0)
    |                   L-- While
    |                       L-- Less
    |                           +-- GetVar(i)
    |                           L-- Native: len
    |                               L-- Get(nodes)
    |                                   L-- GetVar(self)
    |                       L-- Block
    |                           +-- Pop
    |                           |   L-- Native: print
    |                           |       +-- String("while loop: ")
    |                           |       L-- GetVar(i)
    |                           +-- Pop
    |                           |   L-- Native: print
    |                           |       +-- String("node:")
    |                           |       L-- Index
    |                           |           +-- Get(nodes)
    |                           |           |   +-- GetVar(self)
    |                           |           L-- GetVar(i)
    |                           +-- Def: is_import
    |                           |   L-- MethodCall: accept
    |                           |       +-- Args
    |                           |       |   L-- GetSelf
    |                           |       L-- Index
    |                           |           +-- Get(nodes)
    |                           |           |   +-- GetVar(self)
    |                           |           L-- GetVar(i)
    |                           +-- If
    |                           |   +-- GetVar(is_import)
    |                           |   L-- Block
    |                           |       +-- Pop
    |                           |       |   L-- Native: print
    |                           |       |       L-- String("its an import!")
    |                           |       +-- Def: imports
    |                           |       |   L-- List
    |                           |       +-- Def: j
    |                           |       |   L-- Int(0)
    |                           |       +-- While
    |                           |       |   +-- Less
    |                           |       |   |   +-- GetVar(j)
    |                           |       |   |   L-- Native: len
    |                           |       |   |       L-- Get(imports)
    |                           |       |   |           L-- Index
    |                           |       |   |               +-- Get(nodes)
    |                           |       |   |               |   +-- GetVar(self)
    |                           |       |   |               L-- GetVar(i)
    |                           |       |   L-- Block
    |                           |       |       +-- Pop
    |                           |       |       |   L-- Native: print
    |                           |       |       |       +-- String("import")
    |                           |       |       |       L-- Index
    |                           |       |       |           +-- Get(imports)
    |                           |       |       |           |   +-- Index
    |                           |       |       |           |   |   +-- Get(nodes)
    |                           |       |       |           |   |   |   +-- GetVar(self)
    |                           |       |       |           |   |   L-- GetVar(i)
    |                           |       |       |           L-- GetVar(j)
    |                           |       |       +-- Def: file
    |                           |       |       |   L-- Index
    |                           |       |       |       +-- Get(imports)
    |                           |       |       |       |   +-- Index
    |                           |       |       |       |   |   +-- Get(nodes)
    |                           |       |       |       |   |   |   +-- GetVar(self)
    |                           |       |       |       |   |   L-- GetVar(i)
    |                           |       |       |       L-- GetVar(j)
    |                           |       |       +-- Def: input
    |                           |       |       |   L-- Native: read_file
    |                           |       |       |       L-- GetVar(file)
    |                           |       |       +-- Pop
    |                           |       |       |   L-- Native: print
    |                           |       |       |       +-- String("input:")
    |                           |       |       |       L-- GetVar(input)
    |                           |       |       +-- Def: lexer
    |                           |       |       |   L-- Instance: Lexer
    |                           |       |       |       +-- GetVar(input)
    |                           |       |       |       L-- Int(0)
    |                           |       |       +-- Reassign: lexer
    |                           |       |       |   L-- Instance: Peekable
    |                           |       |       |       +-- GetVar(lexer)
    |                           |       |       |       L-- Nil
    |                           |       |       +-- Def: parser
    |                           |       |       |   L-- Instance: Parser
    |                           |       |       |       +-- GetVar(lexer)
    |                           |       |       |       L-- GetVar(file)
    |                           |       |       +-- Def: root
    |                           |       |       |   L-- MethodCall: parse_root
    |                           |       |       |       L-- GetVar(parser)
    |                           |       |       +-- Pop
    |                           |       |       |   L-- Native: append
    |                           |       |       |       +-- GetVar(imports)
    |                           |       |       |       L-- GetVar(root)
    |                           |       |       L-- Reassign: j
    |                           |       |           L-- Plus
    |                           |       |               +-- GetVar(j)
    |                           |       |               L-- Int(1)
    |                           |       L-- IndexSet
    |                           |           +-- Get(nodes)
    |                           |           |   +-- GetVar(self)
    |                           |           +-- GetVar(i)
    |                           |           L-- Instance: AstBlock
    |                           |               L-- GetVar(imports)
    |                           L-- Reassign: i
    |                               L-- Plus
    |                                   +-- GetVar(i)
    |                                   L-- Int(1)
    |           L-- Method: visitAstNeg
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstNot
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstFloat
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstInt
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstString
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstGetField
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstSetField
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstList
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstIndex
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstIndexSet
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstBool
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstNil
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstGetVar
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstDef
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstPlus
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstClass
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstBlock
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstReassign
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstInstance
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstNative
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstMethod
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstPop
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstEqualEqual
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstIf
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstReturn
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstWhile
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstOr
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstAnd
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstBangEqual
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstGreater
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstGreaterEqual
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstLess
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstLessEqual
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstGet
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstSet
    |               L-- Block
    |                   L-- Return
    |                       L-- Bool(false)
    |           L-- Method: visitAstImport
    |               L-- Block
    |                   +-- Pop
    |                   |   L-- Native: print
    |                   |       L-- String("visited ast import")
    |                   L-- Return
    |                       L-- Bool(true)
    +-- Def: file
    |   L-- Native: args
    |       L-- Int(0)
    +-- Pop
    |   L-- Native: print
    |       +-- String("compiling file: ")
    |       L-- GetVar(file)
    +-- Def: input
    |   L-- Native: read_file
    |       L-- GetVar(file)
    +-- Pop
    |   L-- Native: print
    |       +-- String("input:")
    |       L-- GetVar(input)
    +-- Def: lexer
    |   L-- Instance: Lexer
    |       +-- GetVar(input)
    |       L-- Int(0)
    +-- Reassign: lexer
    |   L-- Instance: Peekable
    |       +-- GetVar(lexer)
    |       L-- Nil
    +-- Def: parser
    |   L-- Instance: Parser
    |       +-- GetVar(lexer)
    |       L-- GetVar(file)
    +-- Def: root
    |   L-- MethodCall: parse_root
    |       L-- GetVar(parser)
    +-- Def: import_resolver
    |   L-- Instance: ImportResolver
    +-- Pop
    |   L-- MethodCall: accept
    |       +-- Args
    |       |   L-- GetVar(import_resolver)
    |       L-- GetVar(root)
    +-- Def: printer
    |   L-- Instance: AstPrinter
    |       +-- List
    |       L-- Bool(true)
    +-- Pop
    |   L-- MethodCall: accept
    |       +-- Args
    |       |   L-- GetVar(printer)
    |       L-- GetVar(root)
    +-- Def: compiler
    |   L-- Instance: Compiler
    |       +-- Nil
    |       +-- Nil
    |       +-- Nil
    |       +-- Nil
    |       +-- Nil
    |       +-- Nil
    |       L-- Nil
    +-- Pop
    |   L-- MethodCall: init
    |       L-- GetVar(compiler)
    +-- Pop
    |   L-- MethodCall: accept
    |       +-- Args
    |       |   L-- GetVar(compiler)
    |       L-- GetVar(root)
    +-- Def: i
    |   L-- Int(0)
    +-- While
    |   +-- Less
    |   |   +-- GetVar(i)
    |   |   L-- Native: len
    |   |       L-- Get(code)
    |   |           L-- GetVar(compiler)
    |   L-- Block
    |       +-- Pop
    |       |   L-- Native: print
    |       |       L-- Index
    |       |           +-- Get(code)
    |       |           |   +-- GetVar(compiler)
    |       |           L-- GetVar(i)
    |       L-- Reassign: i
    |           L-- Plus
    |               +-- GetVar(i)
    |               L-- Int(1)
    +-- Pop
    |   L-- Native: print
    |       +-- String("Bytecode:")
    |       L-- Get(code)
    |           L-- GetVar(compiler)
    L-- Pop
        L-- Native: print
            +-- String("strings:")
            L-- Get(strings)
                L-- GetVar(compiler)
init compiler
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
the wierd ll thing probably should not be here
Jump(240)
PushInt(0)
Return
PushNil
Return
PushInt(1)
Return
PushNil
Return
PushInt(2)
Return
PushNil
Return
PushInt(3)
Return
PushNil
Return
PushInt(4)
Return
PushNil
Return
PushInt(5)
Return
PushNil
Return
PushInt(6)
Return
PushNil
Return
PushInt(7)
Return
PushNil
Return
PushInt(8)
Return
PushNil
Return
PushInt(9)
Return
PushNil
Return
PushInt(10)
Return
PushNil
Return
PushInt(11)
Return
PushNil
Return
PushInt(12)
Return
PushNil
Return
PushInt(13)
Return
PushNil
Return
PushInt(14)
Return
PushNil
Return
PushInt(15)
Return
PushNil
Return
PushInt(16)
Return
PushNil
Return
PushInt(17)
Return
PushNil
Return
PushInt(18)
Return
PushNil
Return
PushInt(19)
Return
PushNil
Return
PushInt(20)
Return
PushNil
Return
PushInt(21)
Return
PushNil
Return
PushInt(22)
Return
PushNil
Return
PushInt(23)
Return
PushNil
Return
PushInt(24)
Return
PushNil
Return
PushInt(25)
Return
PushNil
Return
PushInt(26)
Return
PushNil
Return
PushInt(27)
Return
PushNil
Return
PushInt(28)
Return
PushNil
Return
PushInt(29)
Return
PushNil
Return
PushInt(30)
Return
PushNil
Return
PushInt(31)
Return
PushNil
Return
PushInt(32)
Return
PushNil
Return
PushInt(33)
Return
PushNil
Return
PushInt(34)
Return
PushNil
Return
PushInt(35)
Return
PushNil
Return
PushInt(36)
Return
PushNil
Return
PushInt(37)
Return
PushNil
Return
PushInt(38)
Return
PushNil
Return
PushInt(40)
Return
PushNil
Return
PushInt(41)
Return
PushNil
Return
PushInt(42)
Return
PushNil
Return
PushInt(43)
Return
PushNil
Return
PushInt(44)
Return
PushNil
Return
PushString(0)
PushString(1)
PushString(2)
PushString(3)
PushString(4)
PushString(5)
PushString(6)
PushString(7)
PushString(8)
PushString(9)
PushString(10)
PushString(11)
PushString(12)
PushString(13)
PushString(14)
PushString(15)
PushString(16)
PushString(17)
PushString(18)
PushString(19)
PushString(20)
PushString(21)
PushString(22)
PushString(23)
PushString(24)
PushString(25)
PushString(26)
PushString(27)
PushString(28)
PushString(29)
PushString(30)
PushString(31)
PushString(32)
PushString(33)
PushString(34)
PushString(35)
PushString(36)
List(37)
PushInt(0)
GetLocal(3)
GetLocal(2)
Native(3)
Less
JumpIfFalse(234)
GetLocal(1)
GetLocal(2)
GetLocal(3)
IndexGet
Equals
JumpIfFalse(229)
GetLocal(3)
Return
GetLocal(3)
PushInt(1)
Plus
SetLocal(3)
Jump(216)
PushNil
Return
Pop
Pop
PushNil
Return
Jump(241)
Jump(724)
GetField(p)
GetField(code)
Native(3)
Less
GetField(code)
GetField(p)
IndexGet
PushString(37)
Equals
And
JumpIfFalse(258)
GetField(p)
PushInt(1)
Plus
SetField(p)
Jump(242)
PushNil
Return
GetField(p)
GetField(code)
Native(3)
GreaterEqual
Return
PushNil
Return
PushSelf
Call(is_done, 1)
JumpIfFalse(272)
PushBool(false)
Return
PushString(38)
PushInt(0)
GetLocal(2)
GetLocal(1)
Native(3)
Less
JumpIfFalse(294)
GetLocal(1)
GetLocal(2)
IndexGet
GetField(code)
GetField(p)
IndexGet
Equals
JumpIfFalse(289)
PushBool(true)
Return
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Jump(274)
PushBool(false)
Return
Pop
Pop
PushNil
Return
PushSelf
Call(is_done, 1)
JumpIfFalse(305)
PushBool(false)
Return
PushString(39)
PushInt(0)
GetLocal(2)
GetLocal(1)
Native(3)
Less
JumpIfFalse(327)
GetLocal(1)
GetLocal(2)
IndexGet
GetField(code)
GetField(p)
IndexGet
Equals
JumpIfFalse(322)
PushBool(true)
Return
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Jump(307)
PushBool(false)
Return
Pop
Pop
PushNil
Return
GetField(p)
GetField(code)
Native(3)
Less
JumpIfFalse(342)
GetField(p)
PushInt(1)
Plus
SetField(p)
PushNil
Return
GetField(p)
PushString(40)
PushSelf
Call(letter, 1)
PushSelf
Call(digit, 1)
Or
JumpIfFalse(363)
GetLocal(2)
GetField(code)
GetField(p)
IndexGet
Plus
SetLocal(2)
GetField(p)
PushInt(1)
Plus
SetField(p)
Jump(346)
GetField(p)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
GetLocal(2)
Call(from_str, 2)
GetLocal(4)
PushNil
NotEquals
JumpIfFalse(377)
GetLocal(2)
GetLocal(1)
GetLocal(3)
GetLocal(4)
Instance([kind, end, start, value], [], [])
Return
GetLocal(2)
GetLocal(1)
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Identifier, 1)
Instance([kind, end, start, value], [], [])
Return
Pop
Pop
Pop
Pop
PushNil
Return
GetField(p)
PushString(41)
PushBool(false)
PushSelf
Call(digit, 1)
GetField(code)
GetField(p)
IndexGet
PushString(42)
Equals
Or
JumpIfFalse(421)
GetField(code)
GetField(p)
IndexGet
PushString(43)
Equals
JumpIfFalse(410)
PushBool(true)
SetLocal(3)
GetLocal(2)
GetField(code)
GetField(p)
IndexGet
Plus
SetLocal(2)
GetField(p)
PushInt(1)
Plus
SetField(p)
Jump(393)
GetField(p)
GetLocal(3)
JumpIfFalse(431)
GetLocal(2)
GetLocal(1)
GetLocal(4)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Float, 1)
Instance([kind, end, start, value], [], [])
Return
GetLocal(2)
GetLocal(1)
GetLocal(4)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Int, 1)
Instance([kind, end, start, value], [], [])
Return
Pop
Pop
Pop
Pop
PushNil
Return
GetField(p)
PushString(44)
GetField(p)
PushInt(1)
Plus
SetField(p)
GetField(p)
GetField(code)
Native(3)
Less
GetField(code)
GetField(p)
IndexGet
PushString(45)
NotEquals
And
JumpIfFalse(508)
GetField(code)
GetField(p)
IndexGet
PushString(46)
Equals
GetLocal(3)
JumpIfFalse(493)
GetLocal(2)
GetField(code)
GetField(p)
IndexGet
Plus
SetLocal(2)
GetField(p)
PushInt(1)
Plus
SetField(p)
GetField(p)
GetField(code)
Native(3)
Less
JumpIfFalse(493)
GetLocal(2)
GetField(code)
GetField(p)
IndexGet
Plus
SetLocal(2)
GetField(p)
PushInt(1)
Plus
SetField(p)
GetLocal(3)
Not
JumpIfFalse(506)
GetLocal(2)
GetField(code)
GetField(p)
IndexGet
Plus
SetLocal(2)
GetField(p)
PushInt(1)
Plus
SetField(p)
Pop
Jump(450)
GetField(p)
GetField(code)
Native(3)
Less
JumpIfFalse(521)
GetLocal(2)
PushString(47)
Plus
SetLocal(2)
GetField(p)
PushInt(1)
Plus
SetField(p)
GetField(p)
GetLocal(2)
GetLocal(1)
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(String, 1)
Instance([kind, end, start, value], [], [])
Return
Pop
Pop
Pop
PushNil
Return
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
GetField(code)
GetField(p)
IndexGet
Call(from_str, 2)
GetLocal(1)
PushNil
NotEquals
JumpIfFalse(553)
GetField(code)
GetField(p)
IndexGet
GetField(p)
GetField(p)
PushInt(1)
Plus
GetLocal(1)
Instance([kind, end, start, value], [], [])
Return
PushNil
Return
Pop
PushNil
Return
GetField(p)
PushInt(1)
Plus
GetField(code)
Native(3)
Equals
JumpIfFalse(567)
PushNil
Return
GetField(code)
GetField(p)
IndexGet
GetField(code)
GetField(p)
PushInt(1)
Plus
IndexGet
GetLocal(1)
PushString(48)
Equals
GetLocal(2)
PushString(49)
Equals
And
JumpIfFalse(594)
GetLocal(1)
GetLocal(2)
Plus
GetField(p)
GetField(p)
PushInt(2)
Plus
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(BangEqual, 1)
Instance([kind, end, start, value], [], [])
Return
GetLocal(1)
PushString(50)
Equals
GetLocal(2)
PushString(51)
Equals
And
JumpIfFalse(613)
GetLocal(1)
GetLocal(2)
Plus
GetField(p)
GetField(p)
PushInt(2)
Plus
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(EqualEqual, 1)
Instance([kind, end, start, value], [], [])
Return
GetLocal(1)
PushString(52)
Equals
GetLocal(2)
PushString(53)
Equals
And
JumpIfFalse(632)
GetLocal(1)
GetLocal(2)
Plus
GetField(p)
GetField(p)
PushInt(2)
Plus
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(GreaterEqual, 1)
Instance([kind, end, start, value], [], [])
Return
GetLocal(1)
PushString(54)
Equals
GetLocal(2)
PushString(55)
Equals
And
JumpIfFalse(651)
GetLocal(1)
GetLocal(2)
Plus
GetField(p)
GetField(p)
PushInt(2)
Plus
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LessEqual, 1)
Instance([kind, end, start, value], [], [])
Return
PushNil
Return
Pop
Pop
PushNil
Return
PushSelf
Call(is_done, 1)
JumpIfFalse(662)
PushNil
Return
PushSelf
Call(whitespace, 1)
Pop
PushSelf
Call(is_done, 1)
Not
JumpIfFalse(720)
PushSelf
Call(two_char, 1)
GetLocal(1)
PushNil
NotEquals
JumpIfFalse(681)
GetField(p)
PushInt(2)
Plus
SetField(p)
GetLocal(1)
Return
PushSelf
Call(letter, 1)
JumpIfFalse(687)
PushSelf
Call(identifier, 1)
Return
PushSelf
Call(digit, 1)
JumpIfFalse(693)
PushSelf
Call(number, 1)
Return
PushSelf
Call(single_char, 1)
GetLocal(2)
PushNil
NotEquals
JumpIfFalse(705)
GetField(p)
PushInt(1)
Plus
SetField(p)
GetLocal(2)
Return
GetField(code)
GetField(p)
IndexGet
PushString(56)
Equals
JumpIfFalse(714)
PushSelf
Call(string, 1)
Return
PushSelf
Call(advance, 1)
Pop
Pop
Pop
Jump(665)
PushNil
Return
PushNil
Return
Jump(751)
GetField(peek_item)
PushNil
NotEquals
JumpIfFalse(735)
GetField(peek_item)
PushNil
SetField(peek_item)
GetLocal(1)
Return
Pop
GetField(item)
Call(next, 1)
Return
PushNil
Return
GetField(peek_item)
PushNil
Equals
JumpIfFalse(747)
GetField(item)
Call(next, 1)
SetField(peek_item)
GetField(peek_item)
Return
PushNil
Return
Jump(758)
GetLocal(1)
PushSelf
Call(visitAstRoot, 2)
Return
PushNil
Return
Jump(765)
GetLocal(1)
PushSelf
Call(visitAstNeg, 2)
Return
PushNil
Return
Jump(772)
GetLocal(1)
PushSelf
Call(visitAstNot, 2)
Return
PushNil
Return
Jump(779)
GetLocal(1)
PushSelf
Call(visitAstFloat, 2)
Return
PushNil
Return
Jump(786)
GetLocal(1)
PushSelf
Call(visitAstInt, 2)
Return
PushNil
Return
Jump(793)
GetLocal(1)
PushSelf
Call(visitAstString, 2)
Return
PushNil
Return
Jump(804)
GetLocal(1)
PushSelf
Call(visitAstGetField, 2)
Return
PushNil
Return
PushString(57)
Return
PushNil
Return
Jump(811)
GetLocal(1)
PushSelf
Call(visitAstSetField, 2)
Return
PushNil
Return
Jump(818)
GetLocal(1)
PushSelf
Call(visitAstList, 2)
Return
PushNil
Return
Jump(829)
GetLocal(1)
PushSelf
Call(visitAstIndex, 2)
Return
PushNil
Return
PushString(58)
Return
PushNil
Return
Jump(840)
GetLocal(1)
PushSelf
Call(visitAstIndexSet, 2)
Return
PushNil
Return
PushString(59)
Return
PushNil
Return
Jump(847)
GetLocal(1)
PushSelf
Call(visitAstBool, 2)
Return
PushNil
Return
Jump(854)
GetLocal(1)
PushSelf
Call(visitAstNil, 2)
Return
PushNil
Return
Jump(865)
GetLocal(1)
PushSelf
Call(visitAstGetVar, 2)
Return
PushNil
Return
PushString(60)
Return
PushNil
Return
Jump(872)
GetLocal(1)
PushSelf
Call(visitAstDef, 2)
Return
PushNil
Return
Jump(879)
GetLocal(1)
PushSelf
Call(visitAstPlus, 2)
Return
PushNil
Return
Jump(886)
GetLocal(1)
PushSelf
Call(visitAstMinus, 2)
Return
PushNil
Return
Jump(893)
GetLocal(1)
PushSelf
Call(visitAstClass, 2)
Return
PushNil
Return
Jump(900)
GetLocal(1)
PushSelf
Call(visitAstBlock, 2)
Return
PushNil
Return
Jump(911)
GetLocal(1)
PushSelf
Call(visitAstReassign, 2)
Return
PushNil
Return
PushString(61)
Return
PushNil
Return
Jump(918)
GetLocal(1)
PushSelf
Call(visitAstInstance, 2)
Return
PushNil
Return
Jump(925)
GetLocal(1)
PushSelf
Call(visitAstNative, 2)
Return
PushNil
Return
Jump(936)
GetLocal(1)
PushSelf
Call(visitAstMethod, 2)
Return
PushNil
Return
PushString(62)
Return
PushNil
Return
Jump(943)
GetLocal(1)
PushSelf
Call(visitAstPop, 2)
Return
PushNil
Return
Jump(950)
GetLocal(1)
PushSelf
Call(visitAstEqualEqual, 2)
Return
PushNil
Return
Jump(957)
GetLocal(1)
PushSelf
Call(visitAstIf, 2)
Return
PushNil
Return
Jump(964)
GetLocal(1)
PushSelf
Call(visitAstReturn, 2)
Return
PushNil
Return
Jump(971)
GetLocal(1)
PushSelf
Call(visitAstWhile, 2)
Return
PushNil
Return
Jump(978)
GetLocal(1)
PushSelf
Call(visitAstOr, 2)
Return
PushNil
Return
Jump(985)
GetLocal(1)
PushSelf
Call(visitAstAnd, 2)
Return
PushNil
Return
Jump(992)
GetLocal(1)
PushSelf
Call(visitAstBangEqual, 2)
Return
PushNil
Return
Jump(999)
GetLocal(1)
PushSelf
Call(visitAstGreater, 2)
Return
PushNil
Return
Jump(1006)
GetLocal(1)
PushSelf
Call(visitAstGreaterEqual, 2)
Return
PushNil
Return
Jump(1013)
GetLocal(1)
PushSelf
Call(visitAstLess, 2)
Return
PushNil
Return
Jump(1020)
GetLocal(1)
PushSelf
Call(visitAstLessEqual, 2)
Return
PushNil
Return
Jump(1031)
GetLocal(1)
PushSelf
Call(visitAstGet, 2)
Return
PushNil
Return
PushString(63)
Return
PushNil
Return
Jump(1038)
GetLocal(1)
PushSelf
Call(visitAstImport, 2)
Return
PushNil
Return
Jump(1049)
GetLocal(1)
PushSelf
Call(visitAstSet, 2)
Return
PushNil
Return
PushString(64)
Return
PushNil
Return
Jump(1056)
GetLocal(1)
PushSelf
Call(visitAstGetSelf, 2)
Return
PushNil
Return
Jump(1057)
Jump(2388)
GetField(lexer)
Call(next, 1)
GetLocal(1)
GetLocal(2)
Get(kind)
NotEquals
JumpIfFalse(1081)
PushString(65)
GetLocal(2)
Print(2)
Pop
PushString(66)
GetLocal(1)
Native(1)
Plus
PushString(67)
Plus
GetLocal(2)
Get(kind)
Native(1)
Plus
Native(4)
Pop
Pop
PushNil
Return
GetField(lexer)
Call(next, 1)
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Identifier, 1)
NotEquals
JumpIfFalse(1099)
PushString(68)
GetLocal(1)
Get(kind)
Native(1)
Plus
Native(4)
Pop
GetLocal(1)
Get(value)
Return
Pop
PushNil
Return
GetLocal(1)
PushNil
Equals
JumpIfFalse(1111)
PushInt(0)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Equal, 1)
Equals
JumpIfFalse(1119)
PushInt(1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Or, 1)
Equals
JumpIfFalse(1127)
PushInt(3)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(And, 1)
Equals
JumpIfFalse(1135)
PushInt(4)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(BangEqual, 1)
Equals
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(EqualEqual, 1)
Equals
Or
JumpIfFalse(1149)
PushInt(5)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Greater, 1)
Equals
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(GreaterEqual, 1)
Equals
Or
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Less, 1)
Equals
Or
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LessEqual, 1)
Equals
Or
JumpIfFalse(1175)
PushInt(6)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Plus, 1)
Equals
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Minus, 1)
Equals
Or
JumpIfFalse(1189)
PushInt(7)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Star, 1)
Equals
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Slash, 1)
Equals
Or
JumpIfFalse(1203)
PushInt(8)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftParen, 1)
Equals
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBracket, 1)
Equals
Or
JumpIfFalse(1217)
PushInt(10)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Dot, 1)
Equals
JumpIfFalse(1225)
PushInt(11)
Return
PushInt(0)
Return
PushNil
Return
GetField(lexer)
Call(peek, 1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Identifier, 1)
Equals
JumpIfFalse(1242)
PushSelf
Call(consume_identifier, 1)
GetLocal(1)
Instance([value], [accept, kind], [794, 800])
Return
Pop
Instance([], [accept], [1050])
Return
PushString(69)
Native(4)
Pop
PushNil
Return
PushSelf
Call(expr, 1)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightParen, 1)
Call(consume, 2)
Pop
GetLocal(1)
Return
Pop
PushNil
Return
GetField(lexer)
Call(next, 1)
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Minus, 1)
Equals
JumpIfFalse(1274)
PushSelf
PushInt(9)
Call(parse_expr, 2)
Instance([expr], [accept], [759])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Bang, 1)
Equals
JumpIfFalse(1285)
PushSelf
PushInt(9)
Call(parse_expr, 2)
Instance([expr], [accept], [766])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBracket, 1)
Equals
JumpIfFalse(1294)
PushSelf
Call(list, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Identifier, 1)
Equals
JumpIfFalse(1304)
GetLocal(1)
Get(value)
Instance([value], [accept, kind], [855, 861])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Int, 1)
Equals
JumpIfFalse(1314)
GetLocal(1)
Get(value)
Instance([value], [accept], [780])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Float, 1)
Equals
JumpIfFalse(1324)
GetLocal(1)
Get(value)
Instance([value], [accept], [773])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(String, 1)
Equals
JumpIfFalse(1334)
GetLocal(1)
Get(value)
Instance([value], [accept], [787])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(True, 1)
Equals
JumpIfFalse(1343)
PushBool(true)
Instance([value], [accept], [841])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(False, 1)
Equals
JumpIfFalse(1352)
PushBool(false)
Instance([value], [accept], [841])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Nil, 1)
Equals
JumpIfFalse(1360)
Instance([], [accept], [848])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(At, 1)
Equals
JumpIfFalse(1369)
PushSelf
Call(field, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Hash, 1)
Equals
JumpIfFalse(1378)
PushSelf
Call(native, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftParen, 1)
Equals
JumpIfFalse(1387)
PushSelf
Call(grouping, 1)
Return
PushString(70)
GetLocal(1)
Print(2)
Pop
PushString(71)
Native(4)
Pop
Pop
PushNil
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Or, 1)
Equals
JumpIfFalse(1406)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [972])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(And, 1)
Equals
JumpIfFalse(1415)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [979])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(BangEqual, 1)
Equals
JumpIfFalse(1424)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [986])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(EqualEqual, 1)
Equals
JumpIfFalse(1433)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [944])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Greater, 1)
Equals
JumpIfFalse(1442)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [993])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(GreaterEqual, 1)
Equals
JumpIfFalse(1451)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [1000])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Less, 1)
Equals
JumpIfFalse(1460)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [1007])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LessEqual, 1)
Equals
JumpIfFalse(1469)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [1014])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Plus, 1)
Equals
JumpIfFalse(1478)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [873])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Minus, 1)
Equals
JumpIfFalse(1487)
GetLocal(1)
GetLocal(2)
Instance([rhs, lhs], [accept], [880])
Return
GetLocal(3)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Equal, 1)
Equals
JumpIfFalse(1526)
GetLocal(1)
Call(kind, 1)
PushString(72)
Equals
JumpIfFalse(1502)
GetLocal(1)
Get(value)
GetLocal(2)
Instance([expr, name], [accept, kind], [901, 907])
Return
GetLocal(1)
Call(kind, 1)
PushString(73)
Equals
JumpIfFalse(1514)
GetLocal(1)
Get(lhs)
GetLocal(1)
Get(field)
GetLocal(2)
Instance([rhs, field, lhs], [accept, kind], [1039, 1045])
Return
GetLocal(1)
Call(kind, 1)
PushString(74)
Equals
JumpIfFalse(1526)
GetLocal(1)
Get(lhs)
GetLocal(1)
Get(indexer)
GetLocal(2)
Instance([rhs, indexer, lhs], [accept, kind], [830, 836])
Return
PushString(75)
Native(4)
Pop
PushNil
Return
List(0)
GetField(lexer)
Call(peek, 1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightParen, 1)
NotEquals
JumpIfFalse(1557)
GetLocal(2)
PushSelf
Call(expr, 1)
Native(5)
Pop
GetField(lexer)
Call(peek, 1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Comma, 1)
Equals
JumpIfFalse(1556)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Comma, 1)
Call(consume, 2)
Pop
Jump(1532)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightParen, 1)
Call(consume, 2)
Pop
GetLocal(1)
Call(kind, 1)
PushString(76)
Equals
JumpIfFalse(1572)
GetLocal(1)
Get(value)
GetLocal(2)
Instance([args, name], [accept], [912])
Return
GetLocal(1)
Call(kind, 1)
PushString(77)
Equals
JumpIfFalse(1584)
GetLocal(1)
Get(field)
GetLocal(2)
GetLocal(1)
Get(lhs)
Instance([lhs, args, name], [accept, kind], [926, 932])
Return
GetLocal(1)
Call(kind, 1)
PushString(78)
Equals
JumpIfFalse(1595)
GetLocal(1)
Get(value)
GetLocal(2)
PushNil
Instance([lhs, args, name], [accept, kind], [926, 932])
Return
PushString(79)
Native(4)
Pop
Pop
PushNil
Return
PushSelf
Call(expr, 1)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBracket, 1)
Call(consume, 2)
Pop
GetLocal(1)
GetLocal(2)
Instance([indexer, lhs], [accept, kind], [819, 825])
Return
Pop
PushNil
Return
PushSelf
Call(consume_identifier, 1)
GetLocal(1)
GetLocal(2)
Instance([field, lhs], [accept, kind], [1021, 1027])
Return
Pop
PushNil
Return
GetField(lexer)
Call(peek, 1)
GetLocal(2)
PushNil
NotEquals
JumpIfFalse(1723)
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftParen, 1)
Equals
JumpIfFalse(1645)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftParen, 1)
Call(consume, 2)
Pop
PushSelf
GetLocal(1)
Call(call, 2)
SetLocal(1)
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBracket, 1)
Equals
JumpIfFalse(1660)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBracket, 1)
Call(consume, 2)
Pop
PushSelf
GetLocal(1)
Call(index, 2)
SetLocal(1)
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Dot, 1)
Equals
JumpIfFalse(1675)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Dot, 1)
Call(consume, 2)
Pop
PushSelf
GetLocal(1)
Call(get_or_set, 2)
SetLocal(1)
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftParen, 1)
NotEquals
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBracket, 1)
NotEquals
And
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Dot, 1)
NotEquals
And
JumpIfFalse(1719)
PushSelf
GetLocal(2)
Call(infix_prec, 2)
GetLocal(3)
PushInt(0)
Equals
JumpIfFalse(1702)
GetLocal(1)
Return
PushSelf
GetLocal(2)
Get(kind)
Call(consume, 2)
Pop
PushSelf
GetLocal(3)
Call(parse_expr, 2)
PushSelf
GetLocal(1)
GetLocal(4)
GetLocal(2)
Get(kind)
Call(match_infix_token, 4)
SetLocal(1)
Pop
Pop
GetField(lexer)
Call(peek, 1)
SetLocal(2)
Jump(1626)
GetLocal(1)
Return
Pop
PushNil
Return
PushSelf
Call(parse_prefix, 1)
GetLocal(1)
PushSelf
GetField(lexer)
Call(peek, 1)
Call(infix_prec, 2)
Less
JumpIfFalse(1742)
PushSelf
GetLocal(2)
Call(parse_infix, 2)
SetLocal(2)
Jump(1730)
GetLocal(2)
Return
Pop
PushNil
Return
PushSelf
PushInt(0)
Call(parse_expr, 2)
Return
PushNil
Return
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBrace, 1)
Call(consume, 2)
Pop
List(0)
PushBool(false)
GetLocal(2)
Not
JumpIfFalse(1786)
GetField(lexer)
Call(peek, 1)
GetLocal(3)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBrace, 1)
Equals
JumpIfFalse(1773)
PushBool(true)
SetLocal(2)
GetLocal(3)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBrace, 1)
NotEquals
JumpIfFalse(1784)
GetLocal(1)
PushSelf
Call(stmt, 1)
Native(5)
Pop
Pop
Jump(1760)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBrace, 1)
Call(consume, 2)
Pop
GetLocal(1)
Instance([stmts], [accept], [894])
Return
Pop
Pop
PushNil
Return
GetField(lexer)
Call(peek, 1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftParen, 1)
NotEquals
JumpIfFalse(1807)
List(0)
Return
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftParen, 1)
Call(consume, 2)
Pop
List(0)
GetField(lexer)
Call(peek, 1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightParen, 1)
NotEquals
JumpIfFalse(1848)
GetField(lexer)
Call(peek, 1)
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Identifier, 1)
Equals
JumpIfFalse(1835)
PushSelf
Call(consume_identifier, 1)
GetLocal(1)
GetLocal(3)
Native(5)
Pop
Pop
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Comma, 1)
Equals
JumpIfFalse(1846)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Comma, 1)
Call(consume, 2)
Pop
Pop
Jump(1813)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightParen, 1)
Call(consume, 2)
Pop
GetLocal(1)
Return
Pop
PushNil
Return
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Def, 1)
Call(consume, 2)
Pop
PushSelf
Call(consume_identifier, 1)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Equal, 1)
Call(consume, 2)
Pop
PushSelf
Call(expr, 1)
GetLocal(1)
GetLocal(2)
Instance([expr, name], [accept], [866])
Return
Pop
Pop
PushNil
Return
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Class, 1)
Call(consume, 2)
Pop
PushSelf
Call(consume_identifier, 1)
PushSelf
Call(param_list, 1)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBrace, 1)
Call(consume, 2)
Pop
List(0)
GetField(lexer)
Call(peek, 1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBrace, 1)
NotEquals
JumpIfFalse(1919)
PushSelf
Call(consume_identifier, 1)
PushSelf
Call(param_list, 1)
PushSelf
Call(block, 1)
GetLocal(3)
GetLocal(4)
GetLocal(5)
GetLocal(6)
Instance([block, params, name], [], [])
Native(5)
Pop
Pop
Pop
Pop
Jump(1895)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBrace, 1)
Call(consume, 2)
Pop
GetLocal(1)
GetLocal(2)
GetLocal(3)
Instance([methods, fields, name], [accept], [887])
Return
Pop
Pop
Pop
PushNil
Return
List(0)
GetField(lexer)
Call(peek, 1)
PushBool(true)
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBracket, 1)
NotEquals
JumpIfFalse(1963)
GetLocal(3)
Not
JumpIfFalse(1952)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Comma, 1)
Call(consume, 2)
Pop
PushBool(false)
SetLocal(3)
GetLocal(1)
PushSelf
Call(expr, 1)
Native(5)
Pop
GetField(lexer)
Call(peek, 1)
SetLocal(2)
Jump(1938)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBracket, 1)
Call(consume, 2)
Pop
GetLocal(1)
Instance([items], [accept], [812])
Return
Pop
Pop
Pop
PushNil
Return
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(If, 1)
Call(consume, 2)
Pop
PushSelf
Call(expr, 1)
PushSelf
Call(block, 1)
GetLocal(1)
GetLocal(2)
Instance([block, condition], [accept], [951])
Return
Pop
Pop
PushNil
Return
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(While, 1)
Call(consume, 2)
Pop
PushSelf
Call(expr, 1)
PushSelf
Call(block, 1)
GetLocal(1)
GetLocal(2)
Instance([block, condition], [accept], [965])
Return
Pop
Pop
PushNil
Return
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Return, 1)
Call(consume, 2)
Pop
PushSelf
Call(expr, 1)
Instance([expr], [accept], [958])
Return
PushNil
Return
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(At, 1)
Call(consume, 2)
Pop
PushSelf
Call(consume_identifier, 1)
GetField(lexer)
Call(next, 1)
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Equal, 1)
Equals
JumpIfFalse(2041)
GetLocal(1)
PushSelf
Call(expr, 1)
Instance([expr, name], [accept], [805])
Return
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftParen, 1)
Equals
JumpIfFalse(2053)
PushSelf
GetLocal(1)
Instance([value], [accept, kind], [794, 800])
Call(call, 2)
Instance([expr], [accept], [937])
Return
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBracket, 1)
Equals
JumpIfFalse(2081)
PushSelf
Call(expr, 1)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBracket, 1)
Call(consume, 2)
Pop
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Equal, 1)
Call(consume, 2)
Pop
PushSelf
Call(expr, 1)
GetLocal(1)
Instance([value], [accept, kind], [794, 800])
GetLocal(3)
GetLocal(4)
Instance([rhs, indexer, lhs], [accept, kind], [830, 836])
Return
Pop
Pop
PushString(80)
GetLocal(2)
Print(2)
Pop
PushString(81)
Native(4)
Pop
Pop
Pop
PushNil
Return
PushSelf
Call(consume_identifier, 1)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftParen, 1)
Call(consume, 2)
Pop
List(0)
GetField(lexer)
Call(peek, 1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightParen, 1)
Equals
GetLocal(3)
Not
JumpIfFalse(2136)
GetLocal(2)
PushSelf
Call(expr, 1)
Native(5)
Pop
GetField(lexer)
Call(peek, 1)
Get(kind)
GetLocal(4)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Comma, 1)
Equals
JumpIfFalse(2127)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Comma, 1)
Call(consume, 2)
Pop
GetLocal(4)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightParen, 1)
Equals
JumpIfFalse(2134)
PushBool(true)
SetLocal(3)
Pop
Jump(2106)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightParen, 1)
Call(consume, 2)
Pop
GetLocal(1)
GetLocal(2)
Instance([args, name], [accept], [919])
Return
Pop
Pop
Pop
PushNil
Return
GetField(lexer)
Call(peek, 1)
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBrace, 1)
Equals
JumpIfFalse(2161)
PushSelf
Call(block, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Def, 1)
Equals
JumpIfFalse(2170)
PushSelf
Call(stmt_def, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBracket, 1)
Equals
JumpIfFalse(2179)
PushSelf
Call(list, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Class, 1)
Equals
JumpIfFalse(2188)
PushSelf
Call(stmt_class, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Identifier, 1)
Equals
JumpIfFalse(2221)
PushSelf
Call(expr, 1)
PushString(82)
GetLocal(2)
Print(2)
Pop
GetLocal(2)
Call(kind, 1)
GetLocal(3)
PushString(83)
Equals
GetLocal(3)
PushString(84)
Equals
GetLocal(3)
PushString(85)
Equals
Or
Or
JumpIfFalse(2217)
GetLocal(2)
Instance([expr], [accept], [937])
Return
GetLocal(2)
Return
Pop
Pop
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(If, 1)
Equals
JumpIfFalse(2230)
PushSelf
Call(stmt_if, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(While, 1)
Equals
JumpIfFalse(2239)
PushSelf
Call(stmt_while, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Return, 1)
Equals
JumpIfFalse(2248)
PushSelf
Call(stmt_return, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(At, 1)
Equals
JumpIfFalse(2257)
PushSelf
Call(stmt_set_field, 1)
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Hash, 1)
Equals
JumpIfFalse(2272)
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Hash, 1)
Call(consume, 2)
Pop
PushSelf
Call(native, 1)
Instance([expr], [accept], [937])
Return
GetLocal(1)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Import, 1)
Equals
JumpIfFalse(2281)
PushSelf
Call(stmt_import, 1)
Return
PushString(86)
GetLocal(1)
Print(2)
Pop
PushString(87)
Native(4)
Pop
Pop
PushNil
Return
List(0)
GetField(lexer)
Call(peek, 1)
PushNil
NotEquals
JumpIfFalse(2305)
PushSelf
Call(stmt, 1)
GetLocal(1)
GetLocal(2)
Native(5)
Pop
Pop
Jump(2292)
GetLocal(1)
Instance([nodes], [accept], [752])
Return
Pop
PushNil
Return
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(Import, 1)
Call(consume, 2)
Pop
PushSelf
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(LeftBrace, 1)
Call(consume, 2)
Pop
List(0)
GetField(lexer)
Call(next, 1)
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(RightBrace, 1)
NotEquals
JumpIfFalse(2381)
GetLocal(2)
Get(kind)
Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177])
Call(String, 1)
Equals
JumpIfFalse(2377)
PushString(88)
GetField(file)
PushString(89)
Native(9)
PushInt(0)
GetLocal(5)
GetLocal(4)
Native(3)
PushInt(1)
Minus
Less
JumpIfFalse(2361)
GetLocal(3)
GetLocal(4)
GetLocal(5)
IndexGet
PushString(90)
Plus
Plus
SetLocal(3)
GetLocal(5)
PushInt(1)
Plus
SetLocal(5)
Jump(2341)
GetLocal(3)
GetLocal(2)
Get(value)
PushString(91)
Native(9)
PushInt(0)
IndexGet
Plus
SetLocal(3)
GetLocal(1)
GetLocal(3)
Native(5)
Pop
Pop
Pop
Pop
GetField(lexer)
Call(next, 1)
SetLocal(2)
Jump(2324)
GetLocal(1)
Instance([imports], [accept], [1032])
Return
Pop
Pop
PushNil
Return
Jump(3376)
PushInt(0)
PushString(92)
GetLocal(2)
GetField(indent)
Native(3)
Less
JumpIfFalse(2407)
GetLocal(3)
GetField(indent)
GetLocal(2)
IndexGet
Plus
SetLocal(3)
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Jump(2391)
GetField(is_last)
JumpIfFalse(2415)
GetLocal(3)
PushString(93)
Plus
GetLocal(1)
Print(2)
Pop
GetField(is_last)
Not
JumpIfFalse(2424)
GetLocal(3)
PushString(94)
Plus
GetLocal(1)
Print(2)
Pop
Pop
Pop
PushNil
Return
GetField(is_last)
JumpIfFalse(2434)
GetField(indent)
PushString(95)
Native(5)
Pop
GetField(is_last)
Not
JumpIfFalse(2441)
GetField(indent)
PushString(96)
Native(5)
Pop
PushNil
Return
GetField(indent)
Native(6)
Pop
PushNil
Return
PushSelf
Call(add_indent, 1)
Pop
PushInt(0)
GetLocal(2)
GetLocal(1)
Native(3)
Less
JumpIfFalse(2479)
PushBool(false)
SetField(is_last)
GetLocal(2)
GetLocal(1)
Native(3)
PushInt(1)
Minus
Equals
JumpIfFalse(2468)
PushBool(true)
SetField(is_last)
GetLocal(1)
GetLocal(2)
IndexGet
PushSelf
Call(accept, 2)
Pop
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Jump(2452)
PushSelf
Call(pop_indent, 1)
Pop
Pop
PushNil
Return
PushSelf
PushString(97)
Call(print_node, 2)
Pop
PushSelf
GetLocal(1)
Get(nodes)
Call(loop, 2)
Pop
PushNil
Return
PushSelf
PushString(98)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(99)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(100)
Call(print_node, 2)
Pop
PushNil
Return
PushSelf
PushString(101)
GetLocal(1)
Get(value)
PushString(102)
Plus
Plus
Call(print_node, 2)
Pop
PushNil
Return
PushSelf
PushString(103)
GetLocal(1)
Get(value)
PushString(104)
Plus
Plus
Call(print_node, 2)
Pop
PushNil
Return
PushSelf
PushString(105)
GetLocal(1)
Get(value)
PushString(106)
Plus
Plus
Call(print_node, 2)
Pop
PushNil
Return
PushSelf
PushString(107)
GetLocal(1)
Get(value)
PushString(108)
Plus
Plus
Call(print_node, 2)
Pop
PushNil
Return
PushSelf
PushString(109)
GetLocal(1)
Get(name)
PushString(110)
Plus
Plus
Call(print_node, 2)
Pop
PushBool(true)
SetField(is_last)
PushSelf
Call(add_indent, 1)
Pop
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(111)
Call(print_node, 2)
Pop
PushSelf
GetLocal(1)
Get(items)
Call(loop, 2)
Pop
PushNil
Return
PushSelf
PushString(112)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(indexer)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(113)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(indexer)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(114)
GetLocal(1)
Get(value)
Native(1)
Plus
PushString(115)
Plus
Call(print_node, 2)
Pop
PushNil
Return
PushSelf
PushString(116)
Call(print_node, 2)
Pop
PushNil
Return
PushSelf
PushString(117)
GetLocal(1)
Get(value)
PushString(118)
Plus
Plus
Call(print_node, 2)
Pop
PushNil
Return
PushSelf
PushString(119)
GetLocal(1)
Get(name)
Plus
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(120)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(121)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(122)
GetLocal(1)
Get(name)
Plus
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushInt(0)
GetLocal(2)
GetLocal(1)
Get(fields)
Native(3)
Less
JumpIfFalse(2824)
GetLocal(1)
Get(methods)
Native(3)
PushInt(0)
Equals
GetLocal(2)
GetLocal(1)
Get(fields)
Native(3)
PushInt(1)
Minus
Equals
And
SetField(is_last)
PushSelf
PushString(123)
GetLocal(1)
Get(fields)
GetLocal(2)
IndexGet
Plus
Call(print_node, 2)
Pop
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Jump(2790)
PushInt(0)
SetLocal(2)
GetLocal(2)
GetLocal(1)
Get(methods)
Native(3)
Less
JumpIfFalse(2871)
GetLocal(2)
GetLocal(1)
Get(methods)
Native(3)
PushInt(1)
Minus
Equals
JumpIfFalse(2842)
PushBool(true)
SetField(is_last)
PushSelf
PushString(124)
GetLocal(1)
Get(methods)
GetLocal(2)
IndexGet
Get(name)
Plus
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
GetLocal(1)
Get(methods)
GetLocal(2)
IndexGet
Get(block)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Jump(2826)
PushSelf
Call(pop_indent, 1)
Pop
Pop
PushNil
Return
PushSelf
PushString(125)
Call(print_node, 2)
Pop
PushSelf
GetLocal(1)
Get(stmts)
Call(loop, 2)
Pop
PushNil
Return
PushSelf
PushString(126)
GetLocal(1)
Get(name)
Plus
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(127)
GetLocal(1)
Get(name)
Plus
Call(print_node, 2)
Pop
PushSelf
GetLocal(1)
Get(args)
Call(loop, 2)
Pop
PushNil
Return
PushSelf
PushString(128)
GetLocal(1)
Get(name)
Plus
Call(print_node, 2)
Pop
PushSelf
GetLocal(1)
Get(args)
Call(loop, 2)
Pop
PushNil
Return
PushSelf
PushString(129)
GetLocal(1)
Get(name)
Plus
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
GetLocal(1)
Get(lhs)
PushNil
Equals
GetLocal(1)
Get(args)
Native(3)
PushInt(0)
Equals
And
SetField(is_last)
PushInt(0)
GetLocal(1)
Get(args)
Native(3)
PushInt(0)
Greater
JumpIfFalse(3009)
PushSelf
PushString(130)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
GetLocal(1)
Get(lhs)
PushNil
Equals
SetField(is_last)
GetLocal(2)
GetLocal(1)
Get(args)
Native(3)
Less
JumpIfFalse(3006)
GetLocal(2)
GetLocal(1)
Get(args)
Native(3)
PushInt(1)
Minus
Equals
JumpIfFalse(2994)
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(args)
GetLocal(2)
IndexGet
PushSelf
Call(accept, 2)
Pop
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Jump(2978)
PushSelf
Call(pop_indent, 1)
Pop
GetLocal(1)
Get(lhs)
PushNil
NotEquals
JumpIfFalse(3021)
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
Pop
PushNil
Return
PushSelf
PushString(131)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(132)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(133)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(condition)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(block)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(134)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(135)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
GetLocal(1)
Get(condition)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(block)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(136)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(137)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(138)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(139)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(140)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(141)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(142)
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(143)
GetLocal(1)
Get(field)
PushString(144)
Plus
Plus
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
PushSelf
PushString(145)
GetLocal(1)
Get(field)
PushString(146)
Plus
Plus
Call(print_node, 2)
Pop
PushSelf
Call(add_indent, 1)
Pop
PushBool(false)
SetField(is_last)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushBool(true)
SetField(is_last)
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
Call(pop_indent, 1)
Pop
PushNil
Return
Jump(3377)
Jump(3378)
Jump(3379)
Jump(4670)
PushString(147)
Print(1)
Pop
List(0)
SetField(code)
List(0)
SetField(strings)
List(0)
List(1)
SetField(variables)
PushInt(0)
SetField(depth)
List(0)
SetField(classes)
PushNil
SetField(current_fields)
PushNil
SetField(current_class_name)
PushNil
Return
PushInt(0)
GetLocal(2)
GetField(classes)
Native(3)
Less
JumpIfFalse(3422)
GetLocal(1)
GetField(classes)
GetLocal(2)
IndexGet
Get(name)
Equals
JumpIfFalse(3417)
GetField(classes)
GetLocal(2)
IndexGet
Return
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Jump(3401)
PushNil
Return
Pop
PushNil
Return
GetField(code)
GetLocal(1)
Native(5)
Pop
PushNil
Return
GetField(variables)
List(0)
Native(5)
Pop
GetField(depth)
PushInt(1)
Plus
SetField(depth)
PushNil
Return
GetField(variables)
Native(6)
GetField(depth)
PushInt(1)
Minus
SetField(depth)
Pop
PushNil
Return
GetField(depth)
PushInt(1)
Plus
SetField(depth)
PushNil
Return
GetField(variables)
Native(6)
GetLocal(1)
Native(3)
PushInt(0)
List(0)
GetLocal(3)
GetLocal(2)
Less
JumpIfFalse(3497)
GetLocal(1)
GetLocal(3)
IndexGet
Get(depth)
GetField(depth)
Equals
JumpIfFalse(3479)
PushSelf
PushString(148)
Call(push_code, 2)
Pop
GetLocal(1)
GetLocal(3)
IndexGet
Get(depth)
GetField(depth)
NotEquals
JumpIfFalse(3492)
GetLocal(4)
GetLocal(1)
GetLocal(3)
IndexGet
Native(5)
Pop
GetLocal(3)
PushInt(1)
Plus
SetLocal(3)
Jump(3464)
GetField(depth)
PushInt(1)
Minus
SetField(depth)
GetField(variables)
GetLocal(4)
Native(5)
Pop
Pop
Pop
Pop
Pop
PushNil
Return
GetField(variables)
Native(3)
PushInt(1)
Minus
GetField(variables)
GetField(variables)
Native(3)
PushInt(1)
Minus
IndexGet
PushInt(0)
PushNil
GetLocal(4)
GetLocal(3)
Native(3)
Less
JumpIfFalse(3547)
GetLocal(3)
GetLocal(4)
IndexGet
Get(name)
GetLocal(1)
Equals
JumpIfFalse(3542)
PushString(149)
GetLocal(1)
Plus
PushString(150)
Plus
Native(4)
Pop
GetLocal(4)
PushInt(1)
Plus
SetLocal(4)
Jump(3523)
PushString(151)
Print(1)
Pop
GetLocal(3)
GetLocal(1)
GetField(depth)
GetLocal(3)
Native(3)
GetLocal(2)
Plus
Instance([stack_pos, depth, name], [], [])
Native(5)
Pop
Pop
Pop
Pop
Pop
PushNil
Return
GetField(variables)
GetField(variables)
Native(3)
PushInt(1)
Minus
IndexGet
PushInt(0)
GetLocal(3)
GetLocal(2)
Native(3)
Less
JumpIfFalse(3595)
GetLocal(2)
GetLocal(3)
IndexGet
Get(name)
GetLocal(1)
Equals
JumpIfFalse(3590)
GetLocal(2)
GetLocal(3)
IndexGet
Get(stack_pos)
Return
GetLocal(3)
PushInt(1)
Plus
SetLocal(3)
Jump(3573)
PushNil
Return
Pop
Pop
PushNil
Return
PushInt(0)
GetLocal(2)
GetLocal(1)
Native(3)
Less
JumpIfFalse(3618)
GetLocal(1)
GetLocal(2)
IndexGet
PushSelf
Call(accept, 2)
Pop
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Jump(3602)
Pop
PushNil
Return
GetLocal(1)
PushString(152)
Equals
JumpIfFalse(3629)
PushInt(0)
PushInt(1)
List(2)
Return
GetLocal(1)
PushString(153)
Equals
JumpIfFalse(3637)
PushInt(1)
PushInt(1)
List(2)
Return
GetLocal(1)
PushString(154)
Equals
JumpIfFalse(3645)
PushInt(2)
PushInt(1)
List(2)
Return
GetLocal(1)
PushString(155)
Equals
JumpIfFalse(3653)
PushInt(3)
PushInt(1)
List(2)
Return
GetLocal(1)
PushString(156)
Equals
JumpIfFalse(3661)
PushInt(4)
PushInt(1)
List(2)
Return
GetLocal(1)
PushString(157)
Equals
JumpIfFalse(3669)
PushInt(5)
PushInt(2)
List(2)
Return
GetLocal(1)
PushString(158)
Equals
JumpIfFalse(3677)
PushInt(6)
PushInt(1)
List(2)
Return
GetLocal(1)
PushString(159)
Equals
JumpIfFalse(3685)
PushInt(7)
PushInt(2)
List(2)
Return
GetLocal(1)
PushString(160)
Equals
JumpIfFalse(3693)
PushInt(8)
PushInt(1)
List(2)
Return
GetLocal(1)
PushString(161)
Equals
JumpIfFalse(3701)
PushInt(9)
PushInt(2)
List(2)
Return
PushString(162)
GetLocal(1)
Plus
Native(4)
Pop
PushNil
Return
PushSelf
Call(begin_scope, 1)
Pop
PushSelf
GetLocal(1)
Get(nodes)
Call(compile_list, 2)
Pop
PushSelf
Call(end_scope, 1)
Pop
PushNil
Return
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(163)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(164)
Call(push_code, 2)
Pop
PushNil
Return
PushSelf
PushString(165)
GetLocal(1)
Get(value)
Native(1)
Plus
PushString(166)
Plus
Call(push_code, 2)
Pop
PushNil
Return
PushSelf
PushString(167)
GetLocal(1)
Get(value)
Native(1)
Plus
PushString(168)
Plus
Call(push_code, 2)
Pop
PushNil
Return
PushSelf
PushString(169)
GetField(strings)
Native(3)
Native(1)
Plus
PushString(170)
Plus
Call(push_code, 2)
Pop
GetField(strings)
GetLocal(1)
Get(value)
Native(5)
Pop
PushNil
Return
PushSelf
PushString(171)
GetLocal(1)
Get(value)
PushString(172)
Plus
Plus
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(173)
GetLocal(1)
Get(name)
PushString(174)
Plus
Plus
Call(push_code, 2)
Pop
PushNil
Return
PushSelf
GetLocal(1)
Get(items)
Call(compile_list, 2)
Pop
PushSelf
PushString(175)
GetLocal(1)
Get(items)
Native(3)
Native(1)
Plus
PushString(176)
Plus
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(indexer)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(177)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(indexer)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(178)
Call(push_code, 2)
Pop
PushNil
Return
PushSelf
PushString(179)
GetLocal(1)
Get(value)
Native(1)
Plus
PushString(180)
Plus
Call(push_code, 2)
Pop
PushNil
Return
PushSelf
PushString(181)
Call(push_code, 2)
Pop
PushNil
Return
PushSelf
GetLocal(1)
Get(value)
Call(get_local, 2)
GetLocal(2)
PushNil
NotEquals
JumpIfFalse(3901)
PushSelf
PushString(182)
GetLocal(2)
Native(1)
Plus
PushString(183)
Plus
Call(push_code, 2)
Pop
GetLocal(2)
PushNil
Equals
JumpIfFalse(3973)
PushSelf
GetLocal(1)
Get(value)
Call(find_class, 2)
GetLocal(3)
PushNil
Equals
JumpIfFalse(3916)
PushString(184)
Native(4)
Pop
GetLocal(3)
Get(fields)
Native(3)
PushInt(0)
NotEquals
JumpIfFalse(3925)
PushString(185)
Native(4)
Pop
List(0)
List(0)
PushInt(0)
GetLocal(6)
GetLocal(3)
Get(methods)
Native(3)
Less
JumpIfFalse(3955)
GetLocal(4)
GetLocal(3)
Get(methods)
GetLocal(6)
IndexGet
Get(name)
Native(5)
Pop
GetLocal(5)
GetLocal(3)
Get(methods)
GetLocal(6)
IndexGet
Get(code_start)
Native(5)
Pop
GetLocal(6)
PushInt(1)
Plus
SetLocal(6)
Jump(3928)
PushSelf
PushString(186)
GetLocal(4)
Native(1)
Plus
PushString(187)
Plus
GetLocal(5)
Native(1)
Plus
PushString(188)
Plus
Call(push_code, 2)
Pop
Pop
Pop
Pop
Pop
Pop
PushNil
Return
PushSelf
PushString(189)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
GetLocal(1)
Get(name)
Call(add_local, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(190)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(191)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(name)
SetField(current_class_name)
GetLocal(1)
Get(fields)
SetField(current_fields)
GetField(code)
Native(3)
PushSelf
PushString(192)
Call(push_code, 2)
Pop
PushSelf
GetLocal(1)
Get(name)
Call(find_class, 2)
PushNil
NotEquals
JumpIfFalse(4053)
PushString(193)
GetLocal(1)
Get(name)
PushString(194)
Plus
Plus
Native(4)
Pop
List(0)
PushInt(0)
GetLocal(4)
GetLocal(1)
Get(methods)
Native(3)
Less
JumpIfFalse(4122)
PushSelf
Call(begin_method, 1)
Pop
GetLocal(1)
Get(methods)
GetLocal(4)
IndexGet
PushInt(0)
GetLocal(6)
GetLocal(5)
Get(params)
Native(3)
Less
JumpIfFalse(4087)
PushSelf
GetLocal(5)
Get(params)
GetLocal(6)
IndexGet
Call(add_local, 2)
Pop
GetLocal(6)
PushInt(1)
Plus
SetLocal(6)
Jump(4069)
GetField(code)
Native(3)
GetLocal(5)
Get(block)
PushSelf
Call(accept, 2)
Pop
GetLocal(5)
Get(name)
GetLocal(7)
Instance([code_start, name], [], [])
GetLocal(3)
GetLocal(8)
Native(5)
Pop
PushSelf
PushString(195)
Call(push_code, 2)
Pop
PushSelf
PushString(196)
Call(push_code, 2)
Pop
GetLocal(4)
PushInt(1)
Plus
SetLocal(4)
PushSelf
Call(end_method, 1)
Pop
Pop
Pop
Pop
Pop
Jump(4055)
GetField(code)
Native(3)
GetField(code)
GetLocal(2)
PushString(197)
GetLocal(5)
Native(1)
Plus
PushString(198)
Plus
IndexSet
PushNil
SetField(current_class_name)
PushNil
SetField(current_fields)
GetLocal(1)
Get(name)
GetLocal(1)
Get(fields)
GetLocal(3)
Instance([methods, fields, name], [], [])
GetField(classes)
GetLocal(6)
Native(5)
Pop
Pop
Pop
Pop
Pop
Pop
PushNil
Return
PushSelf
Call(begin_scope, 1)
Pop
PushSelf
GetLocal(1)
Get(stmts)
Call(compile_list, 2)
Pop
PushSelf
Call(end_scope, 1)
Pop
PushNil
Return
PushSelf
GetLocal(1)
Get(name)
Call(get_local, 2)
GetLocal(2)
PushNil
Equals
JumpIfFalse(4181)
PushString(199)
GetLocal(1)
Get(name)
Plus
Native(4)
Pop
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(200)
GetLocal(2)
Native(1)
Plus
PushString(201)
Plus
Call(push_code, 2)
Pop
Pop
PushNil
Return
PushSelf
GetLocal(1)
Get(name)
Call(find_class, 2)
GetLocal(2)
PushNil
Equals
JumpIfFalse(4212)
PushString(202)
GetLocal(1)
Get(name)
Plus
Native(4)
Pop
GetLocal(2)
Get(fields)
Native(3)
GetLocal(1)
Get(args)
Native(3)
NotEquals
JumpIfFalse(4223)
PushString(203)
Native(4)
Pop
List(0)
GetLocal(2)
Get(fields)
Native(3)
PushInt(1)
Minus
GetLocal(4)
PushInt(0)
GreaterEqual
JumpIfFalse(4245)
GetLocal(3)
GetLocal(2)
Get(fields)
GetLocal(4)
IndexGet
Native(5)
Pop
GetLocal(4)
PushInt(1)
Minus
SetLocal(4)
Jump(4229)
List(0)
List(0)
PushInt(0)
SetLocal(4)
GetLocal(4)
GetLocal(2)
Get(methods)
Native(3)
Less
JumpIfFalse(4276)
GetLocal(5)
GetLocal(2)
Get(methods)
GetLocal(4)
IndexGet
Get(name)
Native(5)
Pop
GetLocal(6)
GetLocal(2)
Get(methods)
GetLocal(4)
IndexGet
Get(code_start)
Native(5)
Pop
GetLocal(4)
PushInt(1)
Plus
SetLocal(4)
Jump(4249)
PushSelf
GetLocal(1)
Get(args)
Call(compile_list, 2)
Pop
PushSelf
PushString(204)
GetLocal(3)
Native(1)
Plus
PushString(205)
Plus
GetLocal(5)
Native(1)
Plus
PushString(206)
Plus
GetLocal(6)
Native(1)
Plus
PushString(207)
Plus
Call(push_code, 2)
Pop
Pop
Pop
Pop
Pop
Pop
PushNil
Return
PushSelf
GetLocal(1)
Get(name)
Call(native, 2)
GetLocal(1)
Get(name)
PushString(208)
NotEquals
GetLocal(1)
Get(args)
Native(3)
GetLocal(2)
PushInt(1)
IndexGet
NotEquals
And
JumpIfFalse(4327)
PushString(209)
Native(4)
Pop
PushSelf
GetLocal(1)
Get(args)
Call(compile_list, 2)
Pop
GetLocal(1)
Get(name)
PushString(210)
Equals
JumpIfFalse(4348)
PushSelf
PushString(211)
GetLocal(1)
Get(args)
Native(3)
Native(1)
Plus
PushString(212)
Plus
Call(push_code, 2)
Pop
GetLocal(1)
Get(name)
PushString(213)
NotEquals
JumpIfFalse(4364)
PushSelf
PushString(214)
GetLocal(2)
PushInt(0)
IndexGet
Native(1)
Plus
PushString(215)
Plus
Call(push_code, 2)
Pop
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushNil
NotEquals
JumpIfFalse(4377)
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(lhs)
PushNil
Equals
JumpIfFalse(4386)
PushSelf
PushString(216)
Call(push_code, 2)
Pop
PushSelf
GetLocal(1)
Get(args)
Call(compile_list, 2)
Pop
PushSelf
PushString(217)
GetLocal(1)
Get(name)
PushString(218)
Plus
GetLocal(1)
Get(args)
Native(3)
PushInt(1)
Plus
Native(1)
Plus
PushString(219)
Plus
Plus
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(220)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(221)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(condition)
PushSelf
Call(accept, 2)
Pop
GetField(code)
Native(3)
PushSelf
PushString(222)
Call(push_code, 2)
Pop
GetLocal(1)
Get(block)
PushSelf
Call(accept, 2)
Pop
GetField(code)
Native(3)
GetField(code)
GetLocal(2)
PushString(223)
GetLocal(3)
Native(1)
Plus
PushString(224)
Plus
IndexSet
Pop
Pop
PushNil
Return
GetLocal(1)
Get(expr)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(225)
Call(push_code, 2)
Pop
PushNil
Return
GetField(code)
Native(3)
GetLocal(1)
Get(condition)
PushSelf
Call(accept, 2)
Pop
GetField(code)
Native(3)
PushSelf
PushString(226)
Call(push_code, 2)
Pop
GetLocal(1)
Get(block)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(227)
GetLocal(2)
Native(1)
Plus
PushString(228)
Plus
Call(push_code, 2)
Pop
GetField(code)
GetLocal(3)
PushString(229)
GetField(code)
Native(3)
Native(1)
Plus
PushString(230)
Plus
IndexSet
Pop
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(231)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(232)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(233)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(234)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(235)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(236)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(237)
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(238)
GetLocal(1)
Get(field)
PushString(239)
Plus
Plus
Call(push_code, 2)
Pop
PushNil
Return
GetLocal(1)
Get(lhs)
PushSelf
Call(accept, 2)
Pop
GetLocal(1)
Get(rhs)
PushSelf
Call(accept, 2)
Pop
PushSelf
PushString(240)
GetLocal(1)
Get(field)
PushString(241)
Plus
Plus
Call(push_code, 2)
Pop
PushNil
Return
Jump(4924)
PushInt(0)
GetLocal(2)
GetLocal(1)
Get(nodes)
Native(3)
Less
JumpIfFalse(4774)
PushString(242)
GetLocal(2)
Print(2)
Pop
PushString(243)
GetLocal(1)
Get(nodes)
GetLocal(2)
IndexGet
Print(2)
Pop
GetLocal(1)
Get(nodes)
GetLocal(2)
IndexGet
PushSelf
Call(accept, 2)
GetLocal(3)
JumpIfFalse(4768)
PushString(244)
Print(1)
Pop
List(0)
PushInt(0)
GetLocal(5)
GetLocal(1)
Get(nodes)
GetLocal(2)
IndexGet
Get(imports)
Native(3)
Less
JumpIfFalse(4760)
PushString(245)
GetLocal(1)
Get(nodes)
GetLocal(2)
IndexGet
Get(imports)
GetLocal(5)
IndexGet
Print(2)
Pop
GetLocal(1)
Get(nodes)
GetLocal(2)
IndexGet
Get(imports)
GetLocal(5)
IndexGet
GetLocal(6)
Native(2)
PushString(246)
GetLocal(7)
Print(2)
Pop
GetLocal(7)
PushInt(0)
Instance([p, code], [whitespace, is_done, letter, digit, advance, identifier, number, string, single_char, two_char, next], [242, 260, 267, 300, 333, 344, 390, 444, 534, 558, 657])
GetLocal(8)
PushNil
Instance([peek_item, item], [next, peek], [725, 740])
SetLocal(8)
GetLocal(8)
GetLocal(6)
Instance([file, lexer], [consume, consume_identifier, infix_prec, field, grouping, parse_prefix, match_infix_token, call, index, get_or_set, parse_infix, parse_expr, expr, block, param_list, stmt_def, stmt_class, list, stmt_if, stmt_while, stmt_return, stmt_set_field, native, stmt, parse_root, stmt_import], [1058, 1084, 1105, 1229, 1249, 1261, 1397, 1531, 1601, 1615, 1624, 1728, 1747, 1753, 1798, 1858, 1880, 1934, 1976, 1993, 2010, 2021, 2092, 2150, 2291, 2311])
GetLocal(9)
Call(parse_root, 1)
GetLocal(4)
GetLocal(10)
Native(5)
Pop
GetLocal(5)
PushInt(1)
Plus
SetLocal(5)
Pop
Pop
Pop
Pop
Pop
Jump(4702)
GetLocal(1)
Get(nodes)
GetLocal(2)
GetLocal(4)
Instance([stmts], [accept], [894])
IndexSet
Pop
Pop
GetLocal(2)
PushInt(1)
Plus
SetLocal(2)
Pop
Jump(4672)
Pop
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushBool(false)
Return
PushNil
Return
PushString(247)
Print(1)
Pop
PushBool(true)
Return
PushNil
Return
PushInt(0)
Native(8)
PushString(248)
GetLocal(0)
Print(2)
Pop
GetLocal(0)
Native(2)
PushString(249)
GetLocal(1)
Print(2)
Pop
GetLocal(1)
PushInt(0)
Instance([p, code], [whitespace, is_done, letter, digit, advance, identifier, number, string, single_char, two_char, next], [242, 260, 267, 300, 333, 344, 390, 444, 534, 558, 657])
GetLocal(2)
PushNil
Instance([peek_item, item], [next, peek], [725, 740])
SetLocal(2)
GetLocal(2)
GetLocal(0)
Instance([file, lexer], [consume, consume_identifier, infix_prec, field, grouping, parse_prefix, match_infix_token, call, index, get_or_set, parse_infix, parse_expr, expr, block, param_list, stmt_def, stmt_class, list, stmt_if, stmt_while, stmt_return, stmt_set_field, native, stmt, parse_root, stmt_import], [1058, 1084, 1105, 1229, 1249, 1261, 1397, 1531, 1601, 1615, 1624, 1728, 1747, 1753, 1798, 1858, 1880, 1934, 1976, 1993, 2010, 2021, 2092, 2150, 2291, 2311])
GetLocal(3)
Call(parse_root, 1)
Instance([], [visitAstRoot, visitAstNeg, visitAstNot, visitAstFloat, visitAstInt, visitAstString, visitAstGetField, visitAstSetField, visitAstList, visitAstIndex, visitAstIndexSet, visitAstBool, visitAstNil, visitAstGetVar, visitAstDef, visitAstPlus, visitAstClass, visitAstBlock, visitAstReassign, visitAstInstance, visitAstNative, visitAstMethod, visitAstPop, visitAstEqualEqual, visitAstIf, visitAstReturn, visitAstWhile, visitAstOr, visitAstAnd, visitAstBangEqual, visitAstGreater, visitAstGreaterEqual, visitAstLess, visitAstLessEqual, visitAstGet, visitAstSet, visitAstImport], [4671, 4777, 4781, 4785, 4789, 4793, 4797, 4801, 4805, 4809, 4813, 4817, 4821, 4825, 4829, 4833, 4837, 4841, 4845, 4849, 4853, 4857, 4861, 4865, 4869, 4873, 4877, 4881, 4885, 4889, 4893, 4897, 4901, 4905, 4909, 4913, 4917])
GetLocal(4)
GetLocal(5)
Call(accept, 2)
Pop
List(0)
PushBool(true)
Instance([is_last, indent], [print_node, add_indent, pop_indent, loop, visitAstRoot, visitAstNeg, visitAstNot, visitAstGetSelf, visitAstFloat, visitAstInt, visitAstString, visitAstGetField, visitAstSetField, visitAstList, visitAstIndex, visitAstIndexSet, visitAstBool, visitAstNil, visitAstGetVar, visitAstDef, visitAstPlus, visitAstMinus, visitAstClass, visitAstBlock, visitAstReassign, visitAstInstance, visitAstNative, visitAstMethod, visitAstPop, visitAstEqualEqual, visitAstIf, visitAstReturn, visitAstWhile, visitAstOr, visitAstAnd, visitAstBangEqual, visitAstGreater, visitAstGreaterEqual, visitAstLess, visitAstLessEqual, visitAstGet, visitAstSet], [2389, 2428, 2443, 2448, 2485, 2496, 2515, 2534, 2540, 2551, 2562, 2573, 2584, 2608, 2619, 2645, 2676, 2688, 2694, 2705, 2727, 2753, 2779, 2877, 2888, 2910, 2924, 2938, 3027, 3046, 3072, 3098, 3117, 3141, 3167, 3193, 3219, 3245, 3271, 3297, 3323, 3345])
GetLocal(4)
GetLocal(6)
Call(accept, 2)
Pop
PushNil
PushNil
PushNil
PushNil
PushNil
PushNil
PushNil
Instance([current_class_name, current_fields, classes, depth, variables, strings, code], [init, find_class, push_code, begin_method, end_method, begin_scope, end_scope, add_local, get_local, compile_list, native, visitAstRoot, visitAstNeg, visitAstNot, visitAstFloat, visitAstInt, visitAstString, visitAstGetField, visitAstSetField, visitAstList, visitAstIndex, visitAstIndexSet, visitAstBool, visitAstNil, visitAstGetVar, visitAstGetSelf, visitAstDef, visitAstPlus, visitAstMinus, visitAstClass, visitAstBlock, visitAstReassign, visitAstInstance, visitAstNative, visitAstMethod, visitAstPop, visitAstEqualEqual, visitAstIf, visitAstReturn, visitAstWhile, visitAstOr, visitAstAnd, visitAstBangEqual, visitAstGreater, visitAstGreaterEqual, visitAstLess, visitAstLessEqual, visitAstGet, visitAstSet], [3380, 3400, 3427, 3433, 3443, 3452, 3458, 3511, 3566, 3601, 3621, 3708, 3721, 3732, 3743, 3755, 3767, 3784, 3795, 3811, 3829, 3845, 3866, 3878, 3884, 3976, 3982, 3994, 4010, 4026, 4154, 4167, 4198, 4307, 4367, 4411, 4422, 4438, 4469, 4480, 4521, 4537, 4553, 4569, 4585, 4601, 4617, 4633, 4649])
GetLocal(7)
Call(init, 1)
Pop
GetLocal(4)
GetLocal(7)
Call(accept, 2)
Pop
PushInt(0)
GetLocal(8)
GetLocal(7)
Get(code)
Native(3)
Less
JumpIfFalse(4993)
GetLocal(7)
Get(code)
GetLocal(8)
IndexGet
Print(1)
Pop
GetLocal(8)
PushInt(1)
Plus
SetLocal(8)
Jump(4976)
PushString(250)
GetLocal(7)
Get(code)
Print(2)
Pop
PushString(251)
GetLocal(7)
Get(strings)
Print(2)
Pop
Pop
Pop
Pop
Pop
Pop
Pop
Pop
Pop
Pop
Bytecode: [Jump(240), PushInt(0), Return, PushNil, Return, PushInt(1), Return, PushNil, Return, PushInt(2), Return, PushNil, Return, PushInt(3), Return, PushNil, Return, PushInt(4), Return, PushNil, Return, PushInt(5), Return, PushNil, Return, PushInt(6), Return, PushNil, Return, PushInt(7), Return, PushNil, Return, PushInt(8), Return, PushNil, Return, PushInt(9), Return, PushNil, Return, PushInt(10), Return, PushNil, Return, PushInt(11), Return, PushNil, Return, PushInt(12), Return, PushNil, Return, PushInt(13), Return, PushNil, Return, PushInt(14), Return, PushNil, Return, PushInt(15), Return, PushNil, Return, PushInt(16), Return, PushNil, Return, PushInt(17), Return, PushNil, Return, PushInt(18), Return, PushNil, Return, PushInt(19), Return, PushNil, Return, PushInt(20), Return, PushNil, Return, PushInt(21), Return, PushNil, Return, PushInt(22), Return, PushNil, Return, PushInt(23), Return, PushNil, Return, PushInt(24), Return, PushNil, Return, PushInt(25), Return, PushNil, Return, PushInt(26), Return, PushNil, Return, PushInt(27), Return, PushNil, Return, PushInt(28), Return, PushNil, Return, PushInt(29), Return, PushNil, Return, PushInt(30), Return, PushNil, Return, PushInt(31), Return, PushNil, Return, PushInt(32), Return, PushNil, Return, PushInt(33), Return, PushNil, Return, PushInt(34), Return, PushNil, Return, PushInt(35), Return, PushNil, Return, PushInt(36), Return, PushNil, Return, PushInt(37), Return, PushNil, Return, PushInt(38), Return, PushNil, Return, PushInt(40), Return, PushNil, Return, PushInt(41), Return, PushNil, Return, PushInt(42), Return, PushNil, Return, PushInt(43), Return, PushNil, Return, PushInt(44), Return, PushNil, Return, PushString(0), PushString(1), PushString(2), PushString(3), PushString(4), PushString(5), PushString(6), PushString(7), PushString(8), PushString(9), PushString(10), PushString(11), PushString(12), PushString(13), PushString(14), PushString(15), PushString(16), PushString(17), PushString(18), PushString(19), PushString(20), PushString(21), PushString(22), PushString(23), PushString(24), PushString(25), PushString(26), PushString(27), PushString(28), PushString(29), PushString(30), PushString(31), PushString(32), PushString(33), PushString(34), PushString(35), PushString(36), List(37), PushInt(0), GetLocal(3), GetLocal(2), Native(3), Less, JumpIfFalse(234), GetLocal(1), GetLocal(2), GetLocal(3), IndexGet, Equals, JumpIfFalse(229), GetLocal(3), Return, GetLocal(3), PushInt(1), Plus, SetLocal(3), Jump(216), PushNil, Return, Pop, Pop, PushNil, Return, Jump(241), Jump(724), GetField(p), GetField(code), Native(3), Less, GetField(code), GetField(p), IndexGet, PushString(37), Equals, And, JumpIfFalse(258), GetField(p), PushInt(1), Plus, SetField(p), Jump(242), PushNil, Return, GetField(p), GetField(code), Native(3), GreaterEqual, Return, PushNil, Return, PushSelf, Call(is_done, 1), JumpIfFalse(272), PushBool(false), Return, PushString(38), PushInt(0), GetLocal(2), GetLocal(1), Native(3), Less, JumpIfFalse(294), GetLocal(1), GetLocal(2), IndexGet, GetField(code), GetField(p), IndexGet, Equals, JumpIfFalse(289), PushBool(true), Return, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(274), PushBool(false), Return, Pop, Pop, PushNil, Return, PushSelf, Call(is_done, 1), JumpIfFalse(305), PushBool(false), Return, PushString(39), PushInt(0), GetLocal(2), GetLocal(1), Native(3), Less, JumpIfFalse(327), GetLocal(1), GetLocal(2), IndexGet, GetField(code), GetField(p), IndexGet, Equals, JumpIfFalse(322), PushBool(true), Return, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(307), PushBool(false), Return, Pop, Pop, PushNil, Return, GetField(p), GetField(code), Native(3), Less, JumpIfFalse(342), GetField(p), PushInt(1), Plus, SetField(p), PushNil, Return, GetField(p), PushString(40), PushSelf, Call(letter, 1), PushSelf, Call(digit, 1), Or, JumpIfFalse(363), GetLocal(2), GetField(code), GetField(p), IndexGet, Plus, SetLocal(2), GetField(p), PushInt(1), Plus, SetField(p), Jump(346), GetField(p), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), GetLocal(2), Call(from_str, 2), GetLocal(4), PushNil, NotEquals, JumpIfFalse(377), GetLocal(2), GetLocal(1), GetLocal(3), GetLocal(4), Instance([kind, end, start, value], [], []), Return, GetLocal(2), GetLocal(1), GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Identifier, 1), Instance([kind, end, start, value], [], []), Return, Pop, Pop, Pop, Pop, PushNil, Return, GetField(p), PushString(41), PushBool(false), PushSelf, Call(digit, 1), GetField(code), GetField(p), IndexGet, PushString(42), Equals, Or, JumpIfFalse(421), GetField(code), GetField(p), IndexGet, PushString(43), Equals, JumpIfFalse(410), PushBool(true), SetLocal(3), GetLocal(2), GetField(code), GetField(p), IndexGet, Plus, SetLocal(2), GetField(p), PushInt(1), Plus, SetField(p), Jump(393), GetField(p), GetLocal(3), JumpIfFalse(431), GetLocal(2), GetLocal(1), GetLocal(4), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Float, 1), Instance([kind, end, start, value], [], []), Return, GetLocal(2), GetLocal(1), GetLocal(4), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Int, 1), Instance([kind, end, start, value], [], []), Return, Pop, Pop, Pop, Pop, PushNil, Return, GetField(p), PushString(44), GetField(p), PushInt(1), Plus, SetField(p), GetField(p), GetField(code), Native(3), Less, GetField(code), GetField(p), IndexGet, PushString(45), NotEquals, And, JumpIfFalse(508), GetField(code), GetField(p), IndexGet, PushString(46), Equals, GetLocal(3), JumpIfFalse(493), GetLocal(2), GetField(code), GetField(p), IndexGet, Plus, SetLocal(2), GetField(p), PushInt(1), Plus, SetField(p), GetField(p), GetField(code), Native(3), Less, JumpIfFalse(493), GetLocal(2), GetField(code), GetField(p), IndexGet, Plus, SetLocal(2), GetField(p), PushInt(1), Plus, SetField(p), GetLocal(3), Not, JumpIfFalse(506), GetLocal(2), GetField(code), GetField(p), IndexGet, Plus, SetLocal(2), GetField(p), PushInt(1), Plus, SetField(p), Pop, Jump(450), GetField(p), GetField(code), Native(3), Less, JumpIfFalse(521), GetLocal(2), PushString(47), Plus, SetLocal(2), GetField(p), PushInt(1), Plus, SetField(p), GetField(p), GetLocal(2), GetLocal(1), GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(String, 1), Instance([kind, end, start, value], [], []), Return, Pop, Pop, Pop, PushNil, Return, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), GetField(code), GetField(p), IndexGet, Call(from_str, 2), GetLocal(1), PushNil, NotEquals, JumpIfFalse(553), GetField(code), GetField(p), IndexGet, GetField(p), GetField(p), PushInt(1), Plus, GetLocal(1), Instance([kind, end, start, value], [], []), Return, PushNil, Return, Pop, PushNil, Return, GetField(p), PushInt(1), Plus, GetField(code), Native(3), Equals, JumpIfFalse(567), PushNil, Return, GetField(code), GetField(p), IndexGet, GetField(code), GetField(p), PushInt(1), Plus, IndexGet, GetLocal(1), PushString(48), Equals, GetLocal(2), PushString(49), Equals, And, JumpIfFalse(594), GetLocal(1), GetLocal(2), Plus, GetField(p), GetField(p), PushInt(2), Plus, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(BangEqual, 1), Instance([kind, end, start, value], [], []), Return, GetLocal(1), PushString(50), Equals, GetLocal(2), PushString(51), Equals, And, JumpIfFalse(613), GetLocal(1), GetLocal(2), Plus, GetField(p), GetField(p), PushInt(2), Plus, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(EqualEqual, 1), Instance([kind, end, start, value], [], []), Return, GetLocal(1), PushString(52), Equals, GetLocal(2), PushString(53), Equals, And, JumpIfFalse(632), GetLocal(1), GetLocal(2), Plus, GetField(p), GetField(p), PushInt(2), Plus, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(GreaterEqual, 1), Instance([kind, end, start, value], [], []), Return, GetLocal(1), PushString(54), Equals, GetLocal(2), PushString(55), Equals, And, JumpIfFalse(651), GetLocal(1), GetLocal(2), Plus, GetField(p), GetField(p), PushInt(2), Plus, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LessEqual, 1), Instance([kind, end, start, value], [], []), Return, PushNil, Return, Pop, Pop, PushNil, Return, PushSelf, Call(is_done, 1), JumpIfFalse(662), PushNil, Return, PushSelf, Call(whitespace, 1), Pop, PushSelf, Call(is_done, 1), Not, JumpIfFalse(720), PushSelf, Call(two_char, 1), GetLocal(1), PushNil, NotEquals, JumpIfFalse(681), GetField(p), PushInt(2), Plus, SetField(p), GetLocal(1), Return, PushSelf, Call(letter, 1), JumpIfFalse(687), PushSelf, Call(identifier, 1), Return, PushSelf, Call(digit, 1), JumpIfFalse(693), PushSelf, Call(number, 1), Return, PushSelf, Call(single_char, 1), GetLocal(2), PushNil, NotEquals, JumpIfFalse(705), GetField(p), PushInt(1), Plus, SetField(p), GetLocal(2), Return, GetField(code), GetField(p), IndexGet, PushString(56), Equals, JumpIfFalse(714), PushSelf, Call(string, 1), Return, PushSelf, Call(advance, 1), Pop, Pop, Pop, Jump(665), PushNil, Return, PushNil, Return, Jump(751), GetField(peek_item), PushNil, NotEquals, JumpIfFalse(735), GetField(peek_item), PushNil, SetField(peek_item), GetLocal(1), Return, Pop, GetField(item), Call(next, 1), Return, PushNil, Return, GetField(peek_item), PushNil, Equals, JumpIfFalse(747), GetField(item), Call(next, 1), SetField(peek_item), GetField(peek_item), Return, PushNil, Return, Jump(758), GetLocal(1), PushSelf, Call(visitAstRoot, 2), Return, PushNil, Return, Jump(765), GetLocal(1), PushSelf, Call(visitAstNeg, 2), Return, PushNil, Return, Jump(772), GetLocal(1), PushSelf, Call(visitAstNot, 2), Return, PushNil, Return, Jump(779), GetLocal(1), PushSelf, Call(visitAstFloat, 2), Return, PushNil, Return, Jump(786), GetLocal(1), PushSelf, Call(visitAstInt, 2), Return, PushNil, Return, Jump(793), GetLocal(1), PushSelf, Call(visitAstString, 2), Return, PushNil, Return, Jump(804), GetLocal(1), PushSelf, Call(visitAstGetField, 2), Return, PushNil, Return, PushString(57), Return, PushNil, Return, Jump(811), GetLocal(1), PushSelf, Call(visitAstSetField, 2), Return, PushNil, Return, Jump(818), GetLocal(1), PushSelf, Call(visitAstList, 2), Return, PushNil, Return, Jump(829), GetLocal(1), PushSelf, Call(visitAstIndex, 2), Return, PushNil, Return, PushString(58), Return, PushNil, Return, Jump(840), GetLocal(1), PushSelf, Call(visitAstIndexSet, 2), Return, PushNil, Return, PushString(59), Return, PushNil, Return, Jump(847), GetLocal(1), PushSelf, Call(visitAstBool, 2), Return, PushNil, Return, Jump(854), GetLocal(1), PushSelf, Call(visitAstNil, 2), Return, PushNil, Return, Jump(865), GetLocal(1), PushSelf, Call(visitAstGetVar, 2), Return, PushNil, Return, PushString(60), Return, PushNil, Return, Jump(872), GetLocal(1), PushSelf, Call(visitAstDef, 2), Return, PushNil, Return, Jump(879), GetLocal(1), PushSelf, Call(visitAstPlus, 2), Return, PushNil, Return, Jump(886), GetLocal(1), PushSelf, Call(visitAstMinus, 2), Return, PushNil, Return, Jump(893), GetLocal(1), PushSelf, Call(visitAstClass, 2), Return, PushNil, Return, Jump(900), GetLocal(1), PushSelf, Call(visitAstBlock, 2), Return, PushNil, Return, Jump(911), GetLocal(1), PushSelf, Call(visitAstReassign, 2), Return, PushNil, Return, PushString(61), Return, PushNil, Return, Jump(918), GetLocal(1), PushSelf, Call(visitAstInstance, 2), Return, PushNil, Return, Jump(925), GetLocal(1), PushSelf, Call(visitAstNative, 2), Return, PushNil, Return, Jump(936), GetLocal(1), PushSelf, Call(visitAstMethod, 2), Return, PushNil, Return, PushString(62), Return, PushNil, Return, Jump(943), GetLocal(1), PushSelf, Call(visitAstPop, 2), Return, PushNil, Return, Jump(950), GetLocal(1), PushSelf, Call(visitAstEqualEqual, 2), Return, PushNil, Return, Jump(957), GetLocal(1), PushSelf, Call(visitAstIf, 2), Return, PushNil, Return, Jump(964), GetLocal(1), PushSelf, Call(visitAstReturn, 2), Return, PushNil, Return, Jump(971), GetLocal(1), PushSelf, Call(visitAstWhile, 2), Return, PushNil, Return, Jump(978), GetLocal(1), PushSelf, Call(visitAstOr, 2), Return, PushNil, Return, Jump(985), GetLocal(1), PushSelf, Call(visitAstAnd, 2), Return, PushNil, Return, Jump(992), GetLocal(1), PushSelf, Call(visitAstBangEqual, 2), Return, PushNil, Return, Jump(999), GetLocal(1), PushSelf, Call(visitAstGreater, 2), Return, PushNil, Return, Jump(1006), GetLocal(1), PushSelf, Call(visitAstGreaterEqual, 2), Return, PushNil, Return, Jump(1013), GetLocal(1), PushSelf, Call(visitAstLess, 2), Return, PushNil, Return, Jump(1020), GetLocal(1), PushSelf, Call(visitAstLessEqual, 2), Return, PushNil, Return, Jump(1031), GetLocal(1), PushSelf, Call(visitAstGet, 2), Return, PushNil, Return, PushString(63), Return, PushNil, Return, Jump(1038), GetLocal(1), PushSelf, Call(visitAstImport, 2), Return, PushNil, Return, Jump(1049), GetLocal(1), PushSelf, Call(visitAstSet, 2), Return, PushNil, Return, PushString(64), Return, PushNil, Return, Jump(1056), GetLocal(1), PushSelf, Call(visitAstGetSelf, 2), Return, PushNil, Return, Jump(1057), Jump(2388), GetField(lexer), Call(next, 1), GetLocal(1), GetLocal(2), Get(kind), NotEquals, JumpIfFalse(1081), PushString(65), GetLocal(2), Print(2), Pop, PushString(66), GetLocal(1), Native(1), Plus, PushString(67), Plus, GetLocal(2), Get(kind), Native(1), Plus, Native(4), Pop, Pop, PushNil, Return, GetField(lexer), Call(next, 1), GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Identifier, 1), NotEquals, JumpIfFalse(1099), PushString(68), GetLocal(1), Get(kind), Native(1), Plus, Native(4), Pop, GetLocal(1), Get(value), Return, Pop, PushNil, Return, GetLocal(1), PushNil, Equals, JumpIfFalse(1111), PushInt(0), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Equal, 1), Equals, JumpIfFalse(1119), PushInt(1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Or, 1), Equals, JumpIfFalse(1127), PushInt(3), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(And, 1), Equals, JumpIfFalse(1135), PushInt(4), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(BangEqual, 1), Equals, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(EqualEqual, 1), Equals, Or, JumpIfFalse(1149), PushInt(5), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Greater, 1), Equals, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(GreaterEqual, 1), Equals, Or, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Less, 1), Equals, Or, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LessEqual, 1), Equals, Or, JumpIfFalse(1175), PushInt(6), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Plus, 1), Equals, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Minus, 1), Equals, Or, JumpIfFalse(1189), PushInt(7), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Star, 1), Equals, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Slash, 1), Equals, Or, JumpIfFalse(1203), PushInt(8), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftParen, 1), Equals, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBracket, 1), Equals, Or, JumpIfFalse(1217), PushInt(10), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Dot, 1), Equals, JumpIfFalse(1225), PushInt(11), Return, PushInt(0), Return, PushNil, Return, GetField(lexer), Call(peek, 1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Identifier, 1), Equals, JumpIfFalse(1242), PushSelf, Call(consume_identifier, 1), GetLocal(1), Instance([value], [accept, kind], [794, 800]), Return, Pop, Instance([], [accept], [1050]), Return, PushString(69), Native(4), Pop, PushNil, Return, PushSelf, Call(expr, 1), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightParen, 1), Call(consume, 2), Pop, GetLocal(1), Return, Pop, PushNil, Return, GetField(lexer), Call(next, 1), GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Minus, 1), Equals, JumpIfFalse(1274), PushSelf, PushInt(9), Call(parse_expr, 2), Instance([expr], [accept], [759]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Bang, 1), Equals, JumpIfFalse(1285), PushSelf, PushInt(9), Call(parse_expr, 2), Instance([expr], [accept], [766]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBracket, 1), Equals, JumpIfFalse(1294), PushSelf, Call(list, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Identifier, 1), Equals, JumpIfFalse(1304), GetLocal(1), Get(value), Instance([value], [accept, kind], [855, 861]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Int, 1), Equals, JumpIfFalse(1314), GetLocal(1), Get(value), Instance([value], [accept], [780]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Float, 1), Equals, JumpIfFalse(1324), GetLocal(1), Get(value), Instance([value], [accept], [773]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(String, 1), Equals, JumpIfFalse(1334), GetLocal(1), Get(value), Instance([value], [accept], [787]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(True, 1), Equals, JumpIfFalse(1343), PushBool(true), Instance([value], [accept], [841]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(False, 1), Equals, JumpIfFalse(1352), PushBool(false), Instance([value], [accept], [841]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Nil, 1), Equals, JumpIfFalse(1360), Instance([], [accept], [848]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(At, 1), Equals, JumpIfFalse(1369), PushSelf, Call(field, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Hash, 1), Equals, JumpIfFalse(1378), PushSelf, Call(native, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftParen, 1), Equals, JumpIfFalse(1387), PushSelf, Call(grouping, 1), Return, PushString(70), GetLocal(1), Print(2), Pop, PushString(71), Native(4), Pop, Pop, PushNil, Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Or, 1), Equals, JumpIfFalse(1406), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [972]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(And, 1), Equals, JumpIfFalse(1415), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [979]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(BangEqual, 1), Equals, JumpIfFalse(1424), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [986]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(EqualEqual, 1), Equals, JumpIfFalse(1433), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [944]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Greater, 1), Equals, JumpIfFalse(1442), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [993]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(GreaterEqual, 1), Equals, JumpIfFalse(1451), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [1000]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Less, 1), Equals, JumpIfFalse(1460), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [1007]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LessEqual, 1), Equals, JumpIfFalse(1469), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [1014]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Plus, 1), Equals, JumpIfFalse(1478), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [873]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Minus, 1), Equals, JumpIfFalse(1487), GetLocal(1), GetLocal(2), Instance([rhs, lhs], [accept], [880]), Return, GetLocal(3), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Equal, 1), Equals, JumpIfFalse(1526), GetLocal(1), Call(kind, 1), PushString(72), Equals, JumpIfFalse(1502), GetLocal(1), Get(value), GetLocal(2), Instance([expr, name], [accept, kind], [901, 907]), Return, GetLocal(1), Call(kind, 1), PushString(73), Equals, JumpIfFalse(1514), GetLocal(1), Get(lhs), GetLocal(1), Get(field), GetLocal(2), Instance([rhs, field, lhs], [accept, kind], [1039, 1045]), Return, GetLocal(1), Call(kind, 1), PushString(74), Equals, JumpIfFalse(1526), GetLocal(1), Get(lhs), GetLocal(1), Get(indexer), GetLocal(2), Instance([rhs, indexer, lhs], [accept, kind], [830, 836]), Return, PushString(75), Native(4), Pop, PushNil, Return, List(0), GetField(lexer), Call(peek, 1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightParen, 1), NotEquals, JumpIfFalse(1557), GetLocal(2), PushSelf, Call(expr, 1), Native(5), Pop, GetField(lexer), Call(peek, 1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Comma, 1), Equals, JumpIfFalse(1556), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Comma, 1), Call(consume, 2), Pop, Jump(1532), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightParen, 1), Call(consume, 2), Pop, GetLocal(1), Call(kind, 1), PushString(76), Equals, JumpIfFalse(1572), GetLocal(1), Get(value), GetLocal(2), Instance([args, name], [accept], [912]), Return, GetLocal(1), Call(kind, 1), PushString(77), Equals, JumpIfFalse(1584), GetLocal(1), Get(field), GetLocal(2), GetLocal(1), Get(lhs), Instance([lhs, args, name], [accept, kind], [926, 932]), Return, GetLocal(1), Call(kind, 1), PushString(78), Equals, JumpIfFalse(1595), GetLocal(1), Get(value), GetLocal(2), PushNil, Instance([lhs, args, name], [accept, kind], [926, 932]), Return, PushString(79), Native(4), Pop, Pop, PushNil, Return, PushSelf, Call(expr, 1), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBracket, 1), Call(consume, 2), Pop, GetLocal(1), GetLocal(2), Instance([indexer, lhs], [accept, kind], [819, 825]), Return, Pop, PushNil, Return, PushSelf, Call(consume_identifier, 1), GetLocal(1), GetLocal(2), Instance([field, lhs], [accept, kind], [1021, 1027]), Return, Pop, PushNil, Return, GetField(lexer), Call(peek, 1), GetLocal(2), PushNil, NotEquals, JumpIfFalse(1723), GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftParen, 1), Equals, JumpIfFalse(1645), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftParen, 1), Call(consume, 2), Pop, PushSelf, GetLocal(1), Call(call, 2), SetLocal(1), GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBracket, 1), Equals, JumpIfFalse(1660), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBracket, 1), Call(consume, 2), Pop, PushSelf, GetLocal(1), Call(index, 2), SetLocal(1), GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Dot, 1), Equals, JumpIfFalse(1675), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Dot, 1), Call(consume, 2), Pop, PushSelf, GetLocal(1), Call(get_or_set, 2), SetLocal(1), GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftParen, 1), NotEquals, GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBracket, 1), NotEquals, And, GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Dot, 1), NotEquals, And, JumpIfFalse(1719), PushSelf, GetLocal(2), Call(infix_prec, 2), GetLocal(3), PushInt(0), Equals, JumpIfFalse(1702), GetLocal(1), Return, PushSelf, GetLocal(2), Get(kind), Call(consume, 2), Pop, PushSelf, GetLocal(3), Call(parse_expr, 2), PushSelf, GetLocal(1), GetLocal(4), GetLocal(2), Get(kind), Call(match_infix_token, 4), SetLocal(1), Pop, Pop, GetField(lexer), Call(peek, 1), SetLocal(2), Jump(1626), GetLocal(1), Return, Pop, PushNil, Return, PushSelf, Call(parse_prefix, 1), GetLocal(1), PushSelf, GetField(lexer), Call(peek, 1), Call(infix_prec, 2), Less, JumpIfFalse(1742), PushSelf, GetLocal(2), Call(parse_infix, 2), SetLocal(2), Jump(1730), GetLocal(2), Return, Pop, PushNil, Return, PushSelf, PushInt(0), Call(parse_expr, 2), Return, PushNil, Return, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBrace, 1), Call(consume, 2), Pop, List(0), PushBool(false), GetLocal(2), Not, JumpIfFalse(1786), GetField(lexer), Call(peek, 1), GetLocal(3), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBrace, 1), Equals, JumpIfFalse(1773), PushBool(true), SetLocal(2), GetLocal(3), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBrace, 1), NotEquals, JumpIfFalse(1784), GetLocal(1), PushSelf, Call(stmt, 1), Native(5), Pop, Pop, Jump(1760), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBrace, 1), Call(consume, 2), Pop, GetLocal(1), Instance([stmts], [accept], [894]), Return, Pop, Pop, PushNil, Return, GetField(lexer), Call(peek, 1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftParen, 1), NotEquals, JumpIfFalse(1807), List(0), Return, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftParen, 1), Call(consume, 2), Pop, List(0), GetField(lexer), Call(peek, 1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightParen, 1), NotEquals, JumpIfFalse(1848), GetField(lexer), Call(peek, 1), GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Identifier, 1), Equals, JumpIfFalse(1835), PushSelf, Call(consume_identifier, 1), GetLocal(1), GetLocal(3), Native(5), Pop, Pop, GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Comma, 1), Equals, JumpIfFalse(1846), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Comma, 1), Call(consume, 2), Pop, Pop, Jump(1813), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightParen, 1), Call(consume, 2), Pop, GetLocal(1), Return, Pop, PushNil, Return, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Def, 1), Call(consume, 2), Pop, PushSelf, Call(consume_identifier, 1), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Equal, 1), Call(consume, 2), Pop, PushSelf, Call(expr, 1), GetLocal(1), GetLocal(2), Instance([expr, name], [accept], [866]), Return, Pop, Pop, PushNil, Return, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Class, 1), Call(consume, 2), Pop, PushSelf, Call(consume_identifier, 1), PushSelf, Call(param_list, 1), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBrace, 1), Call(consume, 2), Pop, List(0), GetField(lexer), Call(peek, 1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBrace, 1), NotEquals, JumpIfFalse(1919), PushSelf, Call(consume_identifier, 1), PushSelf, Call(param_list, 1), PushSelf, Call(block, 1), GetLocal(3), GetLocal(4), GetLocal(5), GetLocal(6), Instance([block, params, name], [], []), Native(5), Pop, Pop, Pop, Pop, Jump(1895), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBrace, 1), Call(consume, 2), Pop, GetLocal(1), GetLocal(2), GetLocal(3), Instance([methods, fields, name], [accept], [887]), Return, Pop, Pop, Pop, PushNil, Return, List(0), GetField(lexer), Call(peek, 1), PushBool(true), GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBracket, 1), NotEquals, JumpIfFalse(1963), GetLocal(3), Not, JumpIfFalse(1952), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Comma, 1), Call(consume, 2), Pop, PushBool(false), SetLocal(3), GetLocal(1), PushSelf, Call(expr, 1), Native(5), Pop, GetField(lexer), Call(peek, 1), SetLocal(2), Jump(1938), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBracket, 1), Call(consume, 2), Pop, GetLocal(1), Instance([items], [accept], [812]), Return, Pop, Pop, Pop, PushNil, Return, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(If, 1), Call(consume, 2), Pop, PushSelf, Call(expr, 1), PushSelf, Call(block, 1), GetLocal(1), GetLocal(2), Instance([block, condition], [accept], [951]), Return, Pop, Pop, PushNil, Return, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(While, 1), Call(consume, 2), Pop, PushSelf, Call(expr, 1), PushSelf, Call(block, 1), GetLocal(1), GetLocal(2), Instance([block, condition], [accept], [965]), Return, Pop, Pop, PushNil, Return, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Return, 1), Call(consume, 2), Pop, PushSelf, Call(expr, 1), Instance([expr], [accept], [958]), Return, PushNil, Return, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(At, 1), Call(consume, 2), Pop, PushSelf, Call(consume_identifier, 1), GetField(lexer), Call(next, 1), GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Equal, 1), Equals, JumpIfFalse(2041), GetLocal(1), PushSelf, Call(expr, 1), Instance([expr, name], [accept], [805]), Return, GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftParen, 1), Equals, JumpIfFalse(2053), PushSelf, GetLocal(1), Instance([value], [accept, kind], [794, 800]), Call(call, 2), Instance([expr], [accept], [937]), Return, GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBracket, 1), Equals, JumpIfFalse(2081), PushSelf, Call(expr, 1), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBracket, 1), Call(consume, 2), Pop, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Equal, 1), Call(consume, 2), Pop, PushSelf, Call(expr, 1), GetLocal(1), Instance([value], [accept, kind], [794, 800]), GetLocal(3), GetLocal(4), Instance([rhs, indexer, lhs], [accept, kind], [830, 836]), Return, Pop, Pop, PushString(80), GetLocal(2), Print(2), Pop, PushString(81), Native(4), Pop, Pop, Pop, PushNil, Return, PushSelf, Call(consume_identifier, 1), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftParen, 1), Call(consume, 2), Pop, List(0), GetField(lexer), Call(peek, 1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightParen, 1), Equals, GetLocal(3), Not, JumpIfFalse(2136), GetLocal(2), PushSelf, Call(expr, 1), Native(5), Pop, GetField(lexer), Call(peek, 1), Get(kind), GetLocal(4), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Comma, 1), Equals, JumpIfFalse(2127), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Comma, 1), Call(consume, 2), Pop, GetLocal(4), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightParen, 1), Equals, JumpIfFalse(2134), PushBool(true), SetLocal(3), Pop, Jump(2106), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightParen, 1), Call(consume, 2), Pop, GetLocal(1), GetLocal(2), Instance([args, name], [accept], [919]), Return, Pop, Pop, Pop, PushNil, Return, GetField(lexer), Call(peek, 1), GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBrace, 1), Equals, JumpIfFalse(2161), PushSelf, Call(block, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Def, 1), Equals, JumpIfFalse(2170), PushSelf, Call(stmt_def, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBracket, 1), Equals, JumpIfFalse(2179), PushSelf, Call(list, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Class, 1), Equals, JumpIfFalse(2188), PushSelf, Call(stmt_class, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Identifier, 1), Equals, JumpIfFalse(2221), PushSelf, Call(expr, 1), PushString(82), GetLocal(2), Print(2), Pop, GetLocal(2), Call(kind, 1), GetLocal(3), PushString(83), Equals, GetLocal(3), PushString(84), Equals, GetLocal(3), PushString(85), Equals, Or, Or, JumpIfFalse(2217), GetLocal(2), Instance([expr], [accept], [937]), Return, GetLocal(2), Return, Pop, Pop, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(If, 1), Equals, JumpIfFalse(2230), PushSelf, Call(stmt_if, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(While, 1), Equals, JumpIfFalse(2239), PushSelf, Call(stmt_while, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Return, 1), Equals, JumpIfFalse(2248), PushSelf, Call(stmt_return, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(At, 1), Equals, JumpIfFalse(2257), PushSelf, Call(stmt_set_field, 1), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Hash, 1), Equals, JumpIfFalse(2272), PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Hash, 1), Call(consume, 2), Pop, PushSelf, Call(native, 1), Instance([expr], [accept], [937]), Return, GetLocal(1), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Import, 1), Equals, JumpIfFalse(2281), PushSelf, Call(stmt_import, 1), Return, PushString(86), GetLocal(1), Print(2), Pop, PushString(87), Native(4), Pop, Pop, PushNil, Return, List(0), GetField(lexer), Call(peek, 1), PushNil, NotEquals, JumpIfFalse(2305), PushSelf, Call(stmt, 1), GetLocal(1), GetLocal(2), Native(5), Pop, Pop, Jump(2292), GetLocal(1), Instance([nodes], [accept], [752]), Return, Pop, PushNil, Return, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(Import, 1), Call(consume, 2), Pop, PushSelf, Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(LeftBrace, 1), Call(consume, 2), Pop, List(0), GetField(lexer), Call(next, 1), GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(RightBrace, 1), NotEquals, JumpIfFalse(2381), GetLocal(2), Get(kind), Instance([], [LeftParen, RightParen, LeftBracket, RightBracket, LeftBrace, RightBrace, Less, Greater, Equal, Plus, Minus, Slash, Star, Dot, Comma, Colon, SemiColon, Bang, At, Hash, Class, And, Or, Else, If, For, Nil, Return, While, Import, True, False, Def, Int, Float, Bool, Str, Identifier, String, Float, BangEqual, EqualEqual, GreaterEqual, LessEqual, from_str], [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149, 153, 157, 161, 165, 169, 173, 177]), Call(String, 1), Equals, JumpIfFalse(2377), PushString(88), GetField(file), PushString(89), Native(9), PushInt(0), GetLocal(5), GetLocal(4), Native(3), PushInt(1), Minus, Less, JumpIfFalse(2361), GetLocal(3), GetLocal(4), GetLocal(5), IndexGet, PushString(90), Plus, Plus, SetLocal(3), GetLocal(5), PushInt(1), Plus, SetLocal(5), Jump(2341), GetLocal(3), GetLocal(2), Get(value), PushString(91), Native(9), PushInt(0), IndexGet, Plus, SetLocal(3), GetLocal(1), GetLocal(3), Native(5), Pop, Pop, Pop, Pop, GetField(lexer), Call(next, 1), SetLocal(2), Jump(2324), GetLocal(1), Instance([imports], [accept], [1032]), Return, Pop, Pop, PushNil, Return, Jump(3376), PushInt(0), PushString(92), GetLocal(2), GetField(indent), Native(3), Less, JumpIfFalse(2407), GetLocal(3), GetField(indent), GetLocal(2), IndexGet, Plus, SetLocal(3), GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2391), GetField(is_last), JumpIfFalse(2415), GetLocal(3), PushString(93), Plus, GetLocal(1), Print(2), Pop, GetField(is_last), Not, JumpIfFalse(2424), GetLocal(3), PushString(94), Plus, GetLocal(1), Print(2), Pop, Pop, Pop, PushNil, Return, GetField(is_last), JumpIfFalse(2434), GetField(indent), PushString(95), Native(5), Pop, GetField(is_last), Not, JumpIfFalse(2441), GetField(indent), PushString(96), Native(5), Pop, PushNil, Return, GetField(indent), Native(6), Pop, PushNil, Return, PushSelf, Call(add_indent, 1), Pop, PushInt(0), GetLocal(2), GetLocal(1), Native(3), Less, JumpIfFalse(2479), PushBool(false), SetField(is_last), GetLocal(2), GetLocal(1), Native(3), PushInt(1), Minus, Equals, JumpIfFalse(2468), PushBool(true), SetField(is_last), GetLocal(1), GetLocal(2), IndexGet, PushSelf, Call(accept, 2), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2452), PushSelf, Call(pop_indent, 1), Pop, Pop, PushNil, Return, PushSelf, PushString(97), Call(print_node, 2), Pop, PushSelf, GetLocal(1), Get(nodes), Call(loop, 2), Pop, PushNil, Return, PushSelf, PushString(98), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(99), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(100), Call(print_node, 2), Pop, PushNil, Return, PushSelf, PushString(101), GetLocal(1), Get(value), PushString(102), Plus, Plus, Call(print_node, 2), Pop, PushNil, Return, PushSelf, PushString(103), GetLocal(1), Get(value), PushString(104), Plus, Plus, Call(print_node, 2), Pop, PushNil, Return, PushSelf, PushString(105), GetLocal(1), Get(value), PushString(106), Plus, Plus, Call(print_node, 2), Pop, PushNil, Return, PushSelf, PushString(107), GetLocal(1), Get(value), PushString(108), Plus, Plus, Call(print_node, 2), Pop, PushNil, Return, PushSelf, PushString(109), GetLocal(1), Get(name), PushString(110), Plus, Plus, Call(print_node, 2), Pop, PushBool(true), SetField(is_last), PushSelf, Call(add_indent, 1), Pop, GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(111), Call(print_node, 2), Pop, PushSelf, GetLocal(1), Get(items), Call(loop, 2), Pop, PushNil, Return, PushSelf, PushString(112), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(indexer), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(113), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(indexer), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(114), GetLocal(1), Get(value), Native(1), Plus, PushString(115), Plus, Call(print_node, 2), Pop, PushNil, Return, PushSelf, PushString(116), Call(print_node, 2), Pop, PushNil, Return, PushSelf, PushString(117), GetLocal(1), Get(value), PushString(118), Plus, Plus, Call(print_node, 2), Pop, PushNil, Return, PushSelf, PushString(119), GetLocal(1), Get(name), Plus, Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(120), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(121), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(122), GetLocal(1), Get(name), Plus, Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushInt(0), GetLocal(2), GetLocal(1), Get(fields), Native(3), Less, JumpIfFalse(2824), GetLocal(1), Get(methods), Native(3), PushInt(0), Equals, GetLocal(2), GetLocal(1), Get(fields), Native(3), PushInt(1), Minus, Equals, And, SetField(is_last), PushSelf, PushString(123), GetLocal(1), Get(fields), GetLocal(2), IndexGet, Plus, Call(print_node, 2), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2790), PushInt(0), SetLocal(2), GetLocal(2), GetLocal(1), Get(methods), Native(3), Less, JumpIfFalse(2871), GetLocal(2), GetLocal(1), Get(methods), Native(3), PushInt(1), Minus, Equals, JumpIfFalse(2842), PushBool(true), SetField(is_last), PushSelf, PushString(124), GetLocal(1), Get(methods), GetLocal(2), IndexGet, Get(name), Plus, Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, GetLocal(1), Get(methods), GetLocal(2), IndexGet, Get(block), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2826), PushSelf, Call(pop_indent, 1), Pop, Pop, PushNil, Return, PushSelf, PushString(125), Call(print_node, 2), Pop, PushSelf, GetLocal(1), Get(stmts), Call(loop, 2), Pop, PushNil, Return, PushSelf, PushString(126), GetLocal(1), Get(name), Plus, Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(127), GetLocal(1), Get(name), Plus, Call(print_node, 2), Pop, PushSelf, GetLocal(1), Get(args), Call(loop, 2), Pop, PushNil, Return, PushSelf, PushString(128), GetLocal(1), Get(name), Plus, Call(print_node, 2), Pop, PushSelf, GetLocal(1), Get(args), Call(loop, 2), Pop, PushNil, Return, PushSelf, PushString(129), GetLocal(1), Get(name), Plus, Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, GetLocal(1), Get(lhs), PushNil, Equals, GetLocal(1), Get(args), Native(3), PushInt(0), Equals, And, SetField(is_last), PushInt(0), GetLocal(1), Get(args), Native(3), PushInt(0), Greater, JumpIfFalse(3009), PushSelf, PushString(130), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, GetLocal(1), Get(lhs), PushNil, Equals, SetField(is_last), GetLocal(2), GetLocal(1), Get(args), Native(3), Less, JumpIfFalse(3006), GetLocal(2), GetLocal(1), Get(args), Native(3), PushInt(1), Minus, Equals, JumpIfFalse(2994), PushBool(true), SetField(is_last), GetLocal(1), Get(args), GetLocal(2), IndexGet, PushSelf, Call(accept, 2), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(2978), PushSelf, Call(pop_indent, 1), Pop, GetLocal(1), Get(lhs), PushNil, NotEquals, JumpIfFalse(3021), PushBool(true), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, Pop, PushNil, Return, PushSelf, PushString(131), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(132), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(133), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(condition), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(block), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(134), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(135), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, GetLocal(1), Get(condition), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(block), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(136), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(137), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(138), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(139), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(140), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(141), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(142), Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(143), GetLocal(1), Get(field), PushString(144), Plus, Plus, Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, PushSelf, PushString(145), GetLocal(1), Get(field), PushString(146), Plus, Plus, Call(print_node, 2), Pop, PushSelf, Call(add_indent, 1), Pop, PushBool(false), SetField(is_last), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushBool(true), SetField(is_last), GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, Call(pop_indent, 1), Pop, PushNil, Return, Jump(3377), Jump(3378), Jump(3379), Jump(4670), PushString(147), Print(1), Pop, List(0), SetField(code), List(0), SetField(strings), List(0), List(1), SetField(variables), PushInt(0), SetField(depth), List(0), SetField(classes), PushNil, SetField(current_fields), PushNil, SetField(current_class_name), PushNil, Return, PushInt(0), GetLocal(2), GetField(classes), Native(3), Less, JumpIfFalse(3422), GetLocal(1), GetField(classes), GetLocal(2), IndexGet, Get(name), Equals, JumpIfFalse(3417), GetField(classes), GetLocal(2), IndexGet, Return, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(3401), PushNil, Return, Pop, PushNil, Return, GetField(code), GetLocal(1), Native(5), Pop, PushNil, Return, GetField(variables), List(0), Native(5), Pop, GetField(depth), PushInt(1), Plus, SetField(depth), PushNil, Return, GetField(variables), Native(6), GetField(depth), PushInt(1), Minus, SetField(depth), Pop, PushNil, Return, GetField(depth), PushInt(1), Plus, SetField(depth), PushNil, Return, GetField(variables), Native(6), GetLocal(1), Native(3), PushInt(0), List(0), GetLocal(3), GetLocal(2), Less, JumpIfFalse(3497), GetLocal(1), GetLocal(3), IndexGet, Get(depth), GetField(depth), Equals, JumpIfFalse(3479), PushSelf, PushString(148), Call(push_code, 2), Pop, GetLocal(1), GetLocal(3), IndexGet, Get(depth), GetField(depth), NotEquals, JumpIfFalse(3492), GetLocal(4), GetLocal(1), GetLocal(3), IndexGet, Native(5), Pop, GetLocal(3), PushInt(1), Plus, SetLocal(3), Jump(3464), GetField(depth), PushInt(1), Minus, SetField(depth), GetField(variables), GetLocal(4), Native(5), Pop, Pop, Pop, Pop, Pop, PushNil, Return, GetField(variables), Native(3), PushInt(1), Minus, GetField(variables), GetField(variables), Native(3), PushInt(1), Minus, IndexGet, PushInt(0), PushNil, GetLocal(4), GetLocal(3), Native(3), Less, JumpIfFalse(3547), GetLocal(3), GetLocal(4), IndexGet, Get(name), GetLocal(1), Equals, JumpIfFalse(3542), PushString(149), GetLocal(1), Plus, PushString(150), Plus, Native(4), Pop, GetLocal(4), PushInt(1), Plus, SetLocal(4), Jump(3523), PushString(151), Print(1), Pop, GetLocal(3), GetLocal(1), GetField(depth), GetLocal(3), Native(3), GetLocal(2), Plus, Instance([stack_pos, depth, name], [], []), Native(5), Pop, Pop, Pop, Pop, Pop, PushNil, Return, GetField(variables), GetField(variables), Native(3), PushInt(1), Minus, IndexGet, PushInt(0), GetLocal(3), GetLocal(2), Native(3), Less, JumpIfFalse(3595), GetLocal(2), GetLocal(3), IndexGet, Get(name), GetLocal(1), Equals, JumpIfFalse(3590), GetLocal(2), GetLocal(3), IndexGet, Get(stack_pos), Return, GetLocal(3), PushInt(1), Plus, SetLocal(3), Jump(3573), PushNil, Return, Pop, Pop, PushNil, Return, PushInt(0), GetLocal(2), GetLocal(1), Native(3), Less, JumpIfFalse(3618), GetLocal(1), GetLocal(2), IndexGet, PushSelf, Call(accept, 2), Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Jump(3602), Pop, PushNil, Return, GetLocal(1), PushString(152), Equals, JumpIfFalse(3629), PushInt(0), PushInt(1), List(2), Return, GetLocal(1), PushString(153), Equals, JumpIfFalse(3637), PushInt(1), PushInt(1), List(2), Return, GetLocal(1), PushString(154), Equals, JumpIfFalse(3645), PushInt(2), PushInt(1), List(2), Return, GetLocal(1), PushString(155), Equals, JumpIfFalse(3653), PushInt(3), PushInt(1), List(2), Return, GetLocal(1), PushString(156), Equals, JumpIfFalse(3661), PushInt(4), PushInt(1), List(2), Return, GetLocal(1), PushString(157), Equals, JumpIfFalse(3669), PushInt(5), PushInt(2), List(2), Return, GetLocal(1), PushString(158), Equals, JumpIfFalse(3677), PushInt(6), PushInt(1), List(2), Return, GetLocal(1), PushString(159), Equals, JumpIfFalse(3685), PushInt(7), PushInt(2), List(2), Return, GetLocal(1), PushString(160), Equals, JumpIfFalse(3693), PushInt(8), PushInt(1), List(2), Return, GetLocal(1), PushString(161), Equals, JumpIfFalse(3701), PushInt(9), PushInt(2), List(2), Return, PushString(162), GetLocal(1), Plus, Native(4), Pop, PushNil, Return, PushSelf, Call(begin_scope, 1), Pop, PushSelf, GetLocal(1), Get(nodes), Call(compile_list, 2), Pop, PushSelf, Call(end_scope, 1), Pop, PushNil, Return, GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(163), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(164), Call(push_code, 2), Pop, PushNil, Return, PushSelf, PushString(165), GetLocal(1), Get(value), Native(1), Plus, PushString(166), Plus, Call(push_code, 2), Pop, PushNil, Return, PushSelf, PushString(167), GetLocal(1), Get(value), Native(1), Plus, PushString(168), Plus, Call(push_code, 2), Pop, PushNil, Return, PushSelf, PushString(169), GetField(strings), Native(3), Native(1), Plus, PushString(170), Plus, Call(push_code, 2), Pop, GetField(strings), GetLocal(1), Get(value), Native(5), Pop, PushNil, Return, PushSelf, PushString(171), GetLocal(1), Get(value), PushString(172), Plus, Plus, Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(173), GetLocal(1), Get(name), PushString(174), Plus, Plus, Call(push_code, 2), Pop, PushNil, Return, PushSelf, GetLocal(1), Get(items), Call(compile_list, 2), Pop, PushSelf, PushString(175), GetLocal(1), Get(items), Native(3), Native(1), Plus, PushString(176), Plus, Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(indexer), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(177), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(indexer), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(178), Call(push_code, 2), Pop, PushNil, Return, PushSelf, PushString(179), GetLocal(1), Get(value), Native(1), Plus, PushString(180), Plus, Call(push_code, 2), Pop, PushNil, Return, PushSelf, PushString(181), Call(push_code, 2), Pop, PushNil, Return, PushSelf, GetLocal(1), Get(value), Call(get_local, 2), GetLocal(2), PushNil, NotEquals, JumpIfFalse(3901), PushSelf, PushString(182), GetLocal(2), Native(1), Plus, PushString(183), Plus, Call(push_code, 2), Pop, GetLocal(2), PushNil, Equals, JumpIfFalse(3973), PushSelf, GetLocal(1), Get(value), Call(find_class, 2), GetLocal(3), PushNil, Equals, JumpIfFalse(3916), PushString(184), Native(4), Pop, GetLocal(3), Get(fields), Native(3), PushInt(0), NotEquals, JumpIfFalse(3925), PushString(185), Native(4), Pop, List(0), List(0), PushInt(0), GetLocal(6), GetLocal(3), Get(methods), Native(3), Less, JumpIfFalse(3955), GetLocal(4), GetLocal(3), Get(methods), GetLocal(6), IndexGet, Get(name), Native(5), Pop, GetLocal(5), GetLocal(3), Get(methods), GetLocal(6), IndexGet, Get(code_start), Native(5), Pop, GetLocal(6), PushInt(1), Plus, SetLocal(6), Jump(3928), PushSelf, PushString(186), GetLocal(4), Native(1), Plus, PushString(187), Plus, GetLocal(5), Native(1), Plus, PushString(188), Plus, Call(push_code, 2), Pop, Pop, Pop, Pop, Pop, Pop, PushNil, Return, PushSelf, PushString(189), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, GetLocal(1), Get(name), Call(add_local, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(190), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(191), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(name), SetField(current_class_name), GetLocal(1), Get(fields), SetField(current_fields), GetField(code), Native(3), PushSelf, PushString(192), Call(push_code, 2), Pop, PushSelf, GetLocal(1), Get(name), Call(find_class, 2), PushNil, NotEquals, JumpIfFalse(4053), PushString(193), GetLocal(1), Get(name), PushString(194), Plus, Plus, Native(4), Pop, List(0), PushInt(0), GetLocal(4), GetLocal(1), Get(methods), Native(3), Less, JumpIfFalse(4122), PushSelf, Call(begin_method, 1), Pop, GetLocal(1), Get(methods), GetLocal(4), IndexGet, PushInt(0), GetLocal(6), GetLocal(5), Get(params), Native(3), Less, JumpIfFalse(4087), PushSelf, GetLocal(5), Get(params), GetLocal(6), IndexGet, Call(add_local, 2), Pop, GetLocal(6), PushInt(1), Plus, SetLocal(6), Jump(4069), GetField(code), Native(3), GetLocal(5), Get(block), PushSelf, Call(accept, 2), Pop, GetLocal(5), Get(name), GetLocal(7), Instance([code_start, name], [], []), GetLocal(3), GetLocal(8), Native(5), Pop, PushSelf, PushString(195), Call(push_code, 2), Pop, PushSelf, PushString(196), Call(push_code, 2), Pop, GetLocal(4), PushInt(1), Plus, SetLocal(4), PushSelf, Call(end_method, 1), Pop, Pop, Pop, Pop, Pop, Jump(4055), GetField(code), Native(3), GetField(code), GetLocal(2), PushString(197), GetLocal(5), Native(1), Plus, PushString(198), Plus, IndexSet, PushNil, SetField(current_class_name), PushNil, SetField(current_fields), GetLocal(1), Get(name), GetLocal(1), Get(fields), GetLocal(3), Instance([methods, fields, name], [], []), GetField(classes), GetLocal(6), Native(5), Pop, Pop, Pop, Pop, Pop, Pop, PushNil, Return, PushSelf, Call(begin_scope, 1), Pop, PushSelf, GetLocal(1), Get(stmts), Call(compile_list, 2), Pop, PushSelf, Call(end_scope, 1), Pop, PushNil, Return, PushSelf, GetLocal(1), Get(name), Call(get_local, 2), GetLocal(2), PushNil, Equals, JumpIfFalse(4181), PushString(199), GetLocal(1), Get(name), Plus, Native(4), Pop, GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(200), GetLocal(2), Native(1), Plus, PushString(201), Plus, Call(push_code, 2), Pop, Pop, PushNil, Return, PushSelf, GetLocal(1), Get(name), Call(find_class, 2), GetLocal(2), PushNil, Equals, JumpIfFalse(4212), PushString(202), GetLocal(1), Get(name), Plus, Native(4), Pop, GetLocal(2), Get(fields), Native(3), GetLocal(1), Get(args), Native(3), NotEquals, JumpIfFalse(4223), PushString(203), Native(4), Pop, List(0), GetLocal(2), Get(fields), Native(3), PushInt(1), Minus, GetLocal(4), PushInt(0), GreaterEqual, JumpIfFalse(4245), GetLocal(3), GetLocal(2), Get(fields), GetLocal(4), IndexGet, Native(5), Pop, GetLocal(4), PushInt(1), Minus, SetLocal(4), Jump(4229), List(0), List(0), PushInt(0), SetLocal(4), GetLocal(4), GetLocal(2), Get(methods), Native(3), Less, JumpIfFalse(4276), GetLocal(5), GetLocal(2), Get(methods), GetLocal(4), IndexGet, Get(name), Native(5), Pop, GetLocal(6), GetLocal(2), Get(methods), GetLocal(4), IndexGet, Get(code_start), Native(5), Pop, GetLocal(4), PushInt(1), Plus, SetLocal(4), Jump(4249), PushSelf, GetLocal(1), Get(args), Call(compile_list, 2), Pop, PushSelf, PushString(204), GetLocal(3), Native(1), Plus, PushString(205), Plus, GetLocal(5), Native(1), Plus, PushString(206), Plus, GetLocal(6), Native(1), Plus, PushString(207), Plus, Call(push_code, 2), Pop, Pop, Pop, Pop, Pop, Pop, PushNil, Return, PushSelf, GetLocal(1), Get(name), Call(native, 2), GetLocal(1), Get(name), PushString(208), NotEquals, GetLocal(1), Get(args), Native(3), GetLocal(2), PushInt(1), IndexGet, NotEquals, And, JumpIfFalse(4327), PushString(209), Native(4), Pop, PushSelf, GetLocal(1), Get(args), Call(compile_list, 2), Pop, GetLocal(1), Get(name), PushString(210), Equals, JumpIfFalse(4348), PushSelf, PushString(211), GetLocal(1), Get(args), Native(3), Native(1), Plus, PushString(212), Plus, Call(push_code, 2), Pop, GetLocal(1), Get(name), PushString(213), NotEquals, JumpIfFalse(4364), PushSelf, PushString(214), GetLocal(2), PushInt(0), IndexGet, Native(1), Plus, PushString(215), Plus, Call(push_code, 2), Pop, Pop, PushNil, Return, GetLocal(1), Get(lhs), PushNil, NotEquals, JumpIfFalse(4377), GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(lhs), PushNil, Equals, JumpIfFalse(4386), PushSelf, PushString(216), Call(push_code, 2), Pop, PushSelf, GetLocal(1), Get(args), Call(compile_list, 2), Pop, PushSelf, PushString(217), GetLocal(1), Get(name), PushString(218), Plus, GetLocal(1), Get(args), Native(3), PushInt(1), Plus, Native(1), Plus, PushString(219), Plus, Plus, Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(220), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(221), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(condition), PushSelf, Call(accept, 2), Pop, GetField(code), Native(3), PushSelf, PushString(222), Call(push_code, 2), Pop, GetLocal(1), Get(block), PushSelf, Call(accept, 2), Pop, GetField(code), Native(3), GetField(code), GetLocal(2), PushString(223), GetLocal(3), Native(1), Plus, PushString(224), Plus, IndexSet, Pop, Pop, PushNil, Return, GetLocal(1), Get(expr), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(225), Call(push_code, 2), Pop, PushNil, Return, GetField(code), Native(3), GetLocal(1), Get(condition), PushSelf, Call(accept, 2), Pop, GetField(code), Native(3), PushSelf, PushString(226), Call(push_code, 2), Pop, GetLocal(1), Get(block), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(227), GetLocal(2), Native(1), Plus, PushString(228), Plus, Call(push_code, 2), Pop, GetField(code), GetLocal(3), PushString(229), GetField(code), Native(3), Native(1), Plus, PushString(230), Plus, IndexSet, Pop, Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(231), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(232), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(233), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(234), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(235), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(236), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(237), Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(238), GetLocal(1), Get(field), PushString(239), Plus, Plus, Call(push_code, 2), Pop, PushNil, Return, GetLocal(1), Get(lhs), PushSelf, Call(accept, 2), Pop, GetLocal(1), Get(rhs), PushSelf, Call(accept, 2), Pop, PushSelf, PushString(240), GetLocal(1), Get(field), PushString(241), Plus, Plus, Call(push_code, 2), Pop, PushNil, Return, Jump(4924), PushInt(0), GetLocal(2), GetLocal(1), Get(nodes), Native(3), Less, JumpIfFalse(4774), PushString(242), GetLocal(2), Print(2), Pop, PushString(243), GetLocal(1), Get(nodes), GetLocal(2), IndexGet, Print(2), Pop, GetLocal(1), Get(nodes), GetLocal(2), IndexGet, PushSelf, Call(accept, 2), GetLocal(3), JumpIfFalse(4768), PushString(244), Print(1), Pop, List(0), PushInt(0), GetLocal(5), GetLocal(1), Get(nodes), GetLocal(2), IndexGet, Get(imports), Native(3), Less, JumpIfFalse(4760), PushString(245), GetLocal(1), Get(nodes), GetLocal(2), IndexGet, Get(imports), GetLocal(5), IndexGet, Print(2), Pop, GetLocal(1), Get(nodes), GetLocal(2), IndexGet, Get(imports), GetLocal(5), IndexGet, GetLocal(6), Native(2), PushString(246), GetLocal(7), Print(2), Pop, GetLocal(7), PushInt(0), Instance([p, code], [whitespace, is_done, letter, digit, advance, identifier, number, string, single_char, two_char, next], [242, 260, 267, 300, 333, 344, 390, 444, 534, 558, 657]), GetLocal(8), PushNil, Instance([peek_item, item], [next, peek], [725, 740]), SetLocal(8), GetLocal(8), GetLocal(6), Instance([file, lexer], [consume, consume_identifier, infix_prec, field, grouping, parse_prefix, match_infix_token, call, index, get_or_set, parse_infix, parse_expr, expr, block, param_list, stmt_def, stmt_class, list, stmt_if, stmt_while, stmt_return, stmt_set_field, native, stmt, parse_root, stmt_import], [1058, 1084, 1105, 1229, 1249, 1261, 1397, 1531, 1601, 1615, 1624, 1728, 1747, 1753, 1798, 1858, 1880, 1934, 1976, 1993, 2010, 2021, 2092, 2150, 2291, 2311]), GetLocal(9), Call(parse_root, 1), GetLocal(4), GetLocal(10), Native(5), Pop, GetLocal(5), PushInt(1), Plus, SetLocal(5), Pop, Pop, Pop, Pop, Pop, Jump(4702), GetLocal(1), Get(nodes), GetLocal(2), GetLocal(4), Instance([stmts], [accept], [894]), IndexSet, Pop, Pop, GetLocal(2), PushInt(1), Plus, SetLocal(2), Pop, Jump(4672), Pop, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushBool(false), Return, PushNil, Return, PushString(247), Print(1), Pop, PushBool(true), Return, PushNil, Return, PushInt(0), Native(8), PushString(248), GetLocal(0), Print(2), Pop, GetLocal(0), Native(2), PushString(249), GetLocal(1), Print(2), Pop, GetLocal(1), PushInt(0), Instance([p, code], [whitespace, is_done, letter, digit, advance, identifier, number, string, single_char, two_char, next], [242, 260, 267, 300, 333, 344, 390, 444, 534, 558, 657]), GetLocal(2), PushNil, Instance([peek_item, item], [next, peek], [725, 740]), SetLocal(2), GetLocal(2), GetLocal(0), Instance([file, lexer], [consume, consume_identifier, infix_prec, field, grouping, parse_prefix, match_infix_token, call, index, get_or_set, parse_infix, parse_expr, expr, block, param_list, stmt_def, stmt_class, list, stmt_if, stmt_while, stmt_return, stmt_set_field, native, stmt, parse_root, stmt_import], [1058, 1084, 1105, 1229, 1249, 1261, 1397, 1531, 1601, 1615, 1624, 1728, 1747, 1753, 1798, 1858, 1880, 1934, 1976, 1993, 2010, 2021, 2092, 2150, 2291, 2311]), GetLocal(3), Call(parse_root, 1), Instance([], [visitAstRoot, visitAstNeg, visitAstNot, visitAstFloat, visitAstInt, visitAstString, visitAstGetField, visitAstSetField, visitAstList, visitAstIndex, visitAstIndexSet, visitAstBool, visitAstNil, visitAstGetVar, visitAstDef, visitAstPlus, visitAstClass, visitAstBlock, visitAstReassign, visitAstInstance, visitAstNative, visitAstMethod, visitAstPop, visitAstEqualEqual, visitAstIf, visitAstReturn, visitAstWhile, visitAstOr, visitAstAnd, visitAstBangEqual, visitAstGreater, visitAstGreaterEqual, visitAstLess, visitAstLessEqual, visitAstGet, visitAstSet, visitAstImport], [4671, 4777, 4781, 4785, 4789, 4793, 4797, 4801, 4805, 4809, 4813, 4817, 4821, 4825, 4829, 4833, 4837, 4841, 4845, 4849, 4853, 4857, 4861, 4865, 4869, 4873, 4877, 4881, 4885, 4889, 4893, 4897, 4901, 4905, 4909, 4913, 4917]), GetLocal(4), GetLocal(5), Call(accept, 2), Pop, List(0), PushBool(true), Instance([is_last, indent], [print_node, add_indent, pop_indent, loop, visitAstRoot, visitAstNeg, visitAstNot, visitAstGetSelf, visitAstFloat, visitAstInt, visitAstString, visitAstGetField, visitAstSetField, visitAstList, visitAstIndex, visitAstIndexSet, visitAstBool, visitAstNil, visitAstGetVar, visitAstDef, visitAstPlus, visitAstMinus, visitAstClass, visitAstBlock, visitAstReassign, visitAstInstance, visitAstNative, visitAstMethod, visitAstPop, visitAstEqualEqual, visitAstIf, visitAstReturn, visitAstWhile, visitAstOr, visitAstAnd, visitAstBangEqual, visitAstGreater, visitAstGreaterEqual, visitAstLess, visitAstLessEqual, visitAstGet, visitAstSet], [2389, 2428, 2443, 2448, 2485, 2496, 2515, 2534, 2540, 2551, 2562, 2573, 2584, 2608, 2619, 2645, 2676, 2688, 2694, 2705, 2727, 2753, 2779, 2877, 2888, 2910, 2924, 2938, 3027, 3046, 3072, 3098, 3117, 3141, 3167, 3193, 3219, 3245, 3271, 3297, 3323, 3345]), GetLocal(4), GetLocal(6), Call(accept, 2), Pop, PushNil, PushNil, PushNil, PushNil, PushNil, PushNil, PushNil, Instance([current_class_name, current_fields, classes, depth, variables, strings, code], [init, find_class, push_code, begin_method, end_method, begin_scope, end_scope, add_local, get_local, compile_list, native, visitAstRoot, visitAstNeg, visitAstNot, visitAstFloat, visitAstInt, visitAstString, visitAstGetField, visitAstSetField, visitAstList, visitAstIndex, visitAstIndexSet, visitAstBool, visitAstNil, visitAstGetVar, visitAstGetSelf, visitAstDef, visitAstPlus, visitAstMinus, visitAstClass, visitAstBlock, visitAstReassign, visitAstInstance, visitAstNative, visitAstMethod, visitAstPop, visitAstEqualEqual, visitAstIf, visitAstReturn, visitAstWhile, visitAstOr, visitAstAnd, visitAstBangEqual, visitAstGreater, visitAstGreaterEqual, visitAstLess, visitAstLessEqual, visitAstGet, visitAstSet], [3380, 3400, 3427, 3433, 3443, 3452, 3458, 3511, 3566, 3601, 3621, 3708, 3721, 3732, 3743, 3755, 3767, 3784, 3795, 3811, 3829, 3845, 3866, 3878, 3884, 3976, 3982, 3994, 4010, 4026, 4154, 4167, 4198, 4307, 4367, 4411, 4422, 4438, 4469, 4480, 4521, 4537, 4553, 4569, 4585, 4601, 4617, 4633, 4649]), GetLocal(7), Call(init, 1), Pop, GetLocal(4), GetLocal(7), Call(accept, 2), Pop, PushInt(0), GetLocal(8), GetLocal(7), Get(code), Native(3), Less, JumpIfFalse(4993), GetLocal(7), Get(code), GetLocal(8), IndexGet, Print(1), Pop, GetLocal(8), PushInt(1), Plus, SetLocal(8), Jump(4976), PushString(250), GetLocal(7), Get(code), Print(2), Pop, PushString(251), GetLocal(7), Get(strings), Print(2), Pop, Pop, Pop, Pop, Pop, Pop, Pop, Pop, Pop, Pop]
strings: ["(", ")", "[", "]", "{", "}", "<", ">", "=", "+", "-", "/", "*", ".", ",", ":", ";", "!", "@", "#", "class", "and", "or", "else", "if", "for", "nil", "return", "while", "import", "true", "false", "def", "int", "float", "bool", "str", " ", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_", "0123456789", "", "", ".", ".", "\"", "\"", "\\", "\"", "!", "=", "=", "=", ">", "=", "<", "=", "\"", "GetField", "Index", "IndexSet", "GetVar", "Reassign", "Method", "Get", "Set", "token", "expected ", " but got ", "expected identifier but got ", "field", "token", "parse prefix", "GetVar", "Get", "Index", "no infix token match", "GetVar", "Get", "GetField", "call err", "next ", "todo: stmt_set_field", "todo: should pop if method instance or get", "Method", "Instance", "Get", "token", "stmt", "", "/", "/", "\"", "", "L--", "+--", "    ", "|   ", "Root", "Neg", "Not", "GetSelf", "Float(", ")", "Int(", ")", "String(", ")", "Field(", ")", "SetField(", ")", "List", "Index", "IndexSet", "Bool(", ")", "Nil", "GetVar(", ")", "Def: ", "Plus", "Minus", "Class: ", "Field: ", "Method: ", "Block", "Reassign: ", "Instance: ", "Native: ", "MethodCall: ", "Args", "Pop", "EqualEqual", "If", "Return", "While", "Or", "And", "BangEqual", "Greater", "GreaterEqual", "Less", "LessEqual", "Get(", ")", "Set(", ")", "init compiler", "Pop", "var with name: ", " already exists", "the wierd ll thing probably should not be here", "print", "to_string", "read_file", "len", "err", "append", "pop", "compile", "args", "split", "no native function with name: ", "Neg", "Not", "PushFloat(", ")", "PushInt(", ")", "PushString(", ")", "GetField(", ")", "SetField(", ")", "List(", ")", "IndexGet", "IndexSet", "PushBool(", ")", "PushNil", "GetLocal(", ")", "class should not be nil", "trying to call class without arguments? todo?", "Instance([], ", ", ", ")", "PushSelf", "Plus", "Minus", "Jump()", "Class '", "' is already defined", "PushNil", "Return", "Jump(", ")", "Could not find variable: ", "SetLocal(", ")", "Could not find class: ", "Arity does not match", "Instance(", ", ", ", ", ")", "print", "arity does not match", "print", "Print(", ")", "print", "Native(", ")", "PushSelf", "Call(", ", ", ")", "Pop", "Equals", "TEMP", "JumpIfFalse(", ")", "Return", "JumpIfFalse()", "Jump(", ")", "JumpIfFalse(", ")", "Or", "And", "NotEquals", "Greater", "GreaterEqual", "Less", "LessEqual", "Get(", ")", "Set(", ")", "while loop: ", "node:", "its an import!", "import", "input:", "visited ast import", "compiling file: ", "input:", "Bytecode:", "strings:"]


Execution time: 10358ms
